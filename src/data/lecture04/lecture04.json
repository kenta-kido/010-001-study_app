[
  {
    "id": 1,
    "questionDe": "(s5) Was ist die Socket API und warum ist sie wichtig?",
    "questionJa": "Socket APIとは何か？なぜそれが重要なのか？",
    "answerDe": [
      "Socket API ist die wichtigste Internet-API.",
      "Ein Socket bezeichnet einen spezifischen Kommunikationskanal mit IP-Adresse und TCP/UDP-Port.",
      "Sie erlaubt das Empfangen und Senden von Daten über diesen Kommunikationskanal.",
      "Sie ist auf allen wichtigen Betriebssystemen verfügbar (z. B. Windows, Linux, OS X).",
      "Anwendungen nutzen das Internet über diese API."
    ],
    "answerJa": [
      "Socket APIは最も重要なインターネットAPIである。",
      "ソケットはIPアドレスとTCP/UDPポートから成る通信チャネルを表す。",
      "このAPIを通じてデータの送受信が可能になる。",
      "主要なすべてのオペレーティングシステムで利用可能（例：Windows、Linux、OS X）。",
      "アプリケーションはこのAPIを使ってインターネットを利用する。"
    ],
    "explanationDe": [
      "Die Socket API ist eine standardisierte Schnittstelle, mit der Programme auf Netzwerkfunktionen zugreifen können. Sie erlaubt es Anwendungen, Daten über das Internet zu senden und zu empfangen.",
      "Ein Socket dient dabei als Endpunkt einer Verbindung und wird durch eine IP-Adresse und einen Port eindeutig identifiziert. Zum Beispiel kann eine Anwendung einen TCP-Socket mit IP-Adresse 192.168.0.1 und Port 80 öffnen.",
      "Die API ist betriebssystemübergreifend implementiert und erlaubt die Portierung von Netzwerkprogrammen zwischen Windows, Linux und anderen Plattformen.",
      "Ein Vorteil der Socket API ist ihre Flexibilität: Sie unterstützt sowohl verbindungsorientierte (TCP) als auch verbindungslose (UDP) Kommunikation.",
      "Im Gegensatz zu einfachen Dateioperationen auf lokalen Dateien ist bei Sockets eine Kommunikation über Netzwerke möglich – auch über große Distanzen und mit unterschiedlichen Rechnern.",
      "Beispiel: Ein Webbrowser nutzt die Socket API, um eine HTTP-Anfrage an einen Webserver zu senden; die Antwort (z. B. eine HTML-Seite) wird ebenfalls über einen Socket empfangen.",
      "Die Wichtigkeit der Socket API liegt darin, dass sie eine grundlegende Infrastruktur für alle netzwerkbasierten Anwendungen bereitstellt – ohne sie könnten Programme keine Verbindung zum Internet herstellen."
    ],
    "explanationJa": [
      "Socket APIは、アプリケーションがネットワーク機能を利用するための標準化されたインターフェースです。これにより、プログラムはインターネットを通じてデータを送受信できるようになります。",
      "ソケットとは通信の終点を意味し、IPアドレスとポート番号によって一意に識別されます。たとえば、IPアドレス192.168.0.1、ポート80のTCPソケットを開くことで、特定のWebサーバと通信可能になります。",
      "このAPIはWindows、Linux、OS Xなどの主要なオペレーティングシステムで提供されており、アプリケーションの移植性にも優れています。",
      "Socket APIは柔軟性が高く、TCPのような接続型通信とUDPのような接続不要な通信の両方に対応しています。",
      "ローカルファイルへの読み書きとは異なり、Socketを使えば遠隔のコンピュータとの通信が可能になります。これは、インターネット越しの通信を実現する基盤です。",
      "例えば、WebブラウザはSocket APIを使用してHTTPリクエストをWebサーバに送り、その応答（HTMLドキュメントなど）をSocket経由で受け取ります。",
      "Socket APIは、インターネット上の通信を行うすべてのアプリケーションに不可欠な基盤であり、これがなければネットワーク経由のやり取りは実現できません。"
    ],
    "originalSlideText": "❑ Anwendungen nutzen das Internet → Betriebssysteme \nbieten den Service Internet über APIs (Application\nProgramming Interfaces) an\n❑ Wichtigste Internet-API: Socket API\n❑ Socket ist Bezeichner für einen spezifischen \nKommunikationskanal auf dem Computer\n TCP/UDP-Port und IP-Adresse\n Daten empfangen, senden über den Socket\n❑ Auf allen wichtigen Betriebssystemen verfügbar\n MS Windows, Unixoide wie Linux und OS X, …",
    "explanationImage": "lecture02/lecture03_ex04.png",
    "questionImage": "lecture02/lecture03_ex04.png"
  },
  {
    "id": 2,
    "questionDe": "(s6) Welche Besonderheiten weist ein Socket gegenüber lokalen Dateien auf?",
    "questionJa": "ソケットはローカルファイルと比べてどのような特徴があるか？",
    "answerDe": [
      "Sockets sind File Descriptors.",
      "Standard-Dateioperationen wie read und write sind anwendbar.",
      "Im Gegensatz zu lokalen Dateien benötigen Sockets komplexe Parameter.",
      "Dazu gehören Port, Transportprotokoll und weitere Netzwerkparameter.",
      "Sockets werden durch einen Integer (Dateideskriptor) identifiziert."
    ],
    "answerJa": [
      "ソケットはファイルディスクリプタである。",
      "readやwriteなどの標準的なファイル操作が使用できる。",
      "ローカルファイルとは異なり、ソケットには複雑なパラメータが必要。",
      "パラメータにはポート番号、トランスポート層プロトコルなどが含まれる。",
      "ソケットは整数型のファイルディスクリプタによって識別される。"
    ],
    "explanationDe": [
      "Sockets sind wie lokale Dateien über sogenannte File Descriptors zugänglich – also numerische Kennungen, über die das Betriebssystem den Zugriff verwaltet.",
      "Das bedeutet, dass viele der gleichen Systemfunktionen wie read() oder write() auch auf Sockets anwendbar sind, was die Programmierung vereinheitlicht.",
      "Allerdings ist die Konfiguration eines Sockets deutlich komplexer als bei einer lokalen Datei, weil zusätzlich Netzwerkparameter wie IP-Adressen, Ports und das verwendete Transportprotokoll (z. B. TCP oder UDP) angegeben werden müssen.",
      "Im Gegensatz zu Dateien, bei denen der Zugriff lokal und direkt erfolgt, erfordert die Nutzung eines Sockets typischerweise einen Verbindungsaufbau mit einem entfernten Rechner.",
      "Während bei Dateien der Pfad zur Datei genügt, benötigt ein Socket auch Kontextinformationen zum Kommunikationspartner und dem gewünschten Übertragungsmodus.",
      "Ein Beispiel: Um eine Datei zu öffnen, reicht der Pfad wie '/home/user/data.txt'. Um einen Socket zu nutzen, muss z. B. IP 192.168.0.1 und Port 80 spezifiziert werden.",
      "Sockets sind also mächtiger, aber auch komplexer als lokale Dateien – sie erlauben Netzwerkkommunikation, müssen dafür aber mehr technische Details verwalten."
    ],
    "explanationJa": [
      "ソケットは、ローカルファイルと同じくファイルディスクリプタ（数値で識別されるOSのリソース）を通じてアクセスされます。つまり、`read()`や`write()`といったファイル操作関数をソケットにも使うことができます。",
      "このように見かけ上は似ていますが、ソケットの使用にはネットワーク通信特有の複雑な設定が必要になります。",
      "たとえば、IPアドレス、ポート番号、使用するトランスポートプロトコル（TCPやUDP）などの情報が必須です。",
      "ローカルファイルであればファイルのパスさえわかれば良いのに対し、ソケットでは相手先のネットワーク情報を明示的に指定する必要があります。",
      "また、ローカルファイルは物理的にコンピュータ内部に存在するため、接続の確立は不要ですが、ソケットではリモートとの接続確立（特にTCPの場合）が必須です。",
      "例として、テキストファイル '/home/user/data.txt' を開くのは簡単ですが、ソケットでWebサーバに接続するには、たとえば '192.168.0.1:80' にTCP接続する必要があります。",
      "つまり、ソケットはネットワーク通信を実現するための強力な仕組みであり、ローカルファイルよりも柔軟である反面、より複雑な設定と理解が求められます。"
    ],
    "originalSlideText": "❑ Sockets sind File Descriptors\n Standard-Dateioperationen wie read und write lassen sich auch \nauf Sockets anwenden\n❑ Im Gegensatz zu lokalen Dateien komplexe Parameter\n Port\n Transport Layer Protokoll\n …\n❑ Komplexe API mit vielen Funktionen, einfacher Datentyp \n(Integer) identifiziert socket",
    "explanationImage": "",
    "questionImage": ""
  },
  {
    "id": 3,
    "questionDe": "(s7) Wie erzeugt man einen Socket im Client-Programm?",
    "questionJa": "クライアントプログラムではどのようにソケットを生成するか？",
    "answerDe": [
      "Ein Socket wird mit der Funktion socket(domain, type, protocol) erzeugt.",
      "Beispiel: socket(AF_INET, SOCK_STREAM, 0) erzeugt einen TCP-Socket im IPv4-Netz.",
      "Die Funktion gibt einen Deskriptor zurück, der das Socket repräsentiert."
    ],
    "answerJa": [
      "ソケットは socket(domain, type, protocol) 関数で生成される。",
      "例：socket(AF_INET, SOCK_STREAM, 0) はIPv4ネットワーク上のTCPソケットを生成する。",
      "この関数はソケットを表すディスクリプタを返す。"
    ],
    "explanationDe": [
      "Um eine Netzwerkverbindung im Client-Programm herzustellen, muss zuerst ein Socket erzeugt werden. Dies geschieht mit der Funktion `socket()`.",
      "Die Funktion `socket(domain, type, protocol)` erwartet drei Parameter: Der `domain` gibt das Adressformat an (z. B. `AF_INET` für IPv4), `type` bestimmt den Kommunikationstyp (z. B. `SOCK_STREAM` für TCP), und `protocol` gibt das konkrete Protokoll an (meistens 0 für das Standardprotokoll des Typs).",
      "Ein typischer Aufruf lautet: `socket(AF_INET, SOCK_STREAM, 0)`. Dieser erzeugt ein Socket für eine TCP-Verbindung über IPv4.",
      "Das Ergebnis ist ein Integer, der als Deskriptor fungiert. Dieser Deskriptor wird verwendet, um später mit anderen Funktionen wie `connect()` oder `send()` auf das Socket zuzugreifen.",
      "Im Gegensatz zu einer Datei öffnet man hier keinen lokalen Pfad, sondern schafft eine Abstraktion für eine mögliche Netzwerkverbindung.",
      "Wenn der Socket erfolgreich erstellt wurde, kann er anschließend mit einem Server verbunden werden.",
      "Diese Art der Socket-Erzeugung ist plattformunabhängig und wird in C, Python, Java und anderen Programmiersprachen ähnlich gehandhabt."
    ],
    "explanationJa": [
      "クライアントプログラムでネットワーク通信を行うには、まずソケットを生成する必要があります。そのために使うのが `socket()` 関数です。",
      "`socket(domain, type, protocol)` という形式で3つの引数を指定します。`domain` はアドレス形式（例：IPv4の `AF_INET`）、`type` は通信の型（例：TCPの `SOCK_STREAM`）、`protocol` は通常 0（デフォルトプロトコル）です。",
      "例えば `socket(AF_INET, SOCK_STREAM, 0)` とすれば、IPv4のTCP通信を行うためのソケットを生成できます。",
      "この関数は整数型のディスクリプタ（識別子）を返します。後続の `connect()` や `send()` などの関数はこの識別子を使ってソケットを指定します。",
      "ローカルファイルを開くのとは異なり、ここでは通信チャネルを定義する抽象的なリソースを作成しています。",
      "ソケットが正常に作成されれば、その後は接続を確立し、データを送受信できるようになります。",
      "このようなソケットの生成方法は、C言語やPython、Javaなど、さまざまなプログラミング言語でほぼ共通しています。"
    ],
    "originalSlideText": "❑ Erzeugung des Socket\n❑ descriptor = socket(domain, type, protocol)\n❑ Bsp.: socket(AF_INET, SOCK_STREAM, 0) erzeugt einen \nTCP Socket im IP4 Netz",
    "explanationImage": "",
    "questionImage": ""
  },
  {
    "id": 4,
    "questionDe": "(s8) Wie baut der Client eine Verbindung zum Server auf?",
    "questionJa": "クライアントはどのようにしてサーバとの接続を確立するか？",
    "answerDe": [
      "Ein Client baut die Verbindung mit der Funktion connect(descriptor, saddress, saddresslen) auf.",
      "Es wird ein TCP-Socket (Streaming-Typ) verwendet.",
      "saddress enthält alle notwendigen Server-Adressinformationen."
    ],
    "answerJa": [
      "クライアントは connect(descriptor, saddress, saddresslen) 関数で接続を確立する。",
      "この際、TCPソケット（ストリーミング型）が用いられる。",
      "saddressにはサーバのアドレス情報がすべて含まれている。"
    ],
    "explanationDe": [
      "Nachdem ein Socket erzeugt wurde, stellt der Client mit der Funktion `connect()` eine Verbindung zu einem Server her.",
      "`connect(descriptor, saddress, saddresslen)` verbindet das Client-Socket mit der Adresse des Servers. Der `descriptor` ist der Rückgabewert der vorherigen `socket()`-Funktion.",
      "`saddress` ist eine Datenstruktur, die die IP-Adresse und den Port des Zielservers enthält, z. B. 192.168.0.1:80.",
      "Da TCP ein verbindungsorientiertes Protokoll ist, muss der Verbindungsaufbau erfolgen, bevor Daten gesendet oder empfangen werden können. Dies geschieht implizit mit `connect()`.",
      "Ein erfolgreicher Aufruf von `connect()` führt dazu, dass das lokale System ein sogenanntes Three-Way-Handshake-Protokoll mit dem Server durchführt, um die Verbindung zu bestätigen.",
      "Im Gegensatz zu UDP, das verbindungslos arbeitet, stellt TCP sicher, dass beide Seiten bereit zur Kommunikation sind, bevor irgendetwas übertragen wird.",
      "Beispiel: Ein Webbrowser verwendet `connect()` mit einem TCP-Socket, um eine Verbindung zu einem Webserver auf Port 80 aufzubauen, bevor er eine HTTP-Anfrage sendet."
    ],
    "explanationJa": [
      "ソケットを作成した後、クライアントは `connect()` 関数を使ってサーバとの接続を確立します。",
      "`connect(descriptor, saddress, saddresslen)` という形式で、生成したソケット識別子と、サーバのアドレス情報を指定します。",
      "`saddress` には、接続先のIPアドレスやポート番号など、通信相手のすべての情報が含まれます。たとえば、IPが 192.168.0.1 でポートが 80 のWebサーバと通信する場合、その情報を構造体で渡します。",
      "ここではTCP（接続型）ソケットが使われるため、通信の前に必ず接続を確立する必要があります。これが `connect()` 関数の役割です。",
      "この関数が呼び出されると、クライアントとサーバ間で「3ウェイ・ハンドシェイク」と呼ばれる手順が実行され、相互に接続を確認します。",
      "UDPのような接続不要な通信とは異なり、TCPでは通信の信頼性を確保するために、この接続フェーズが不可欠です。",
      "例えばWebブラウザは、HTTPリクエストを送る前に `connect()` を使ってWebサーバとの通信チャネルを準備します。"
    ],
    "originalSlideText": "❑ Verbindungsaufbau zu einem bestimmten Server\n Folglich TCP Socket bzw. Streaming Typ\n❑ connect(descriptor, saddress, saddresslen)\n❑ saddress enthält alle Server-Adress-Informationen",
    "explanationImage": "",
    "questionImage": ""
  },
  {
    "id": 5,
    "questionDe": "(s9) Wie sendet ein Client Daten an den Server?",
    "questionJa": "クライアントはどのようにしてサーバへデータを送信するか？",
    "answerDe": [
      "Die Datenübertragung erfolgt typischerweise mit einem Request.",
      "send(descriptor, data, length, flags) wird verwendet.",
      "Die Funktion sendet Daten über das zuvor verbundene Socket an den Server."
    ],
    "answerJa": [
      "データの送信は通常リクエストの形で行われる。",
      "send(descriptor, data, length, flags) 関数が使用される。",
      "この関数は、事前に接続されたソケットを通じてサーバにデータを送信する。"
    ],
    "explanationDe": [
      "Sobald der Client über `connect()` eine Verbindung zum Server aufgebaut hat, kann er Daten senden. Dafür wird die Funktion `send()` verwendet.",
      "`send(descriptor, data, length, flags)` überträgt die in `data` gespeicherten Informationen über das Socket, das durch `descriptor` referenziert ist.",
      "`length` gibt die Anzahl der zu übertragenden Bytes an, und `flags` kann für besondere Sendeoptionen verwendet werden (meistens 0).",
      "Ein typischer Anwendungsfall ist das Senden eines HTTP-Requests: Der Browser stellt eine Anfrage an den Webserver, z. B. `GET /index.html HTTP/1.1`, als Text über das Socket.",
      "Die Daten werden binär über das Netzwerk verschickt, auch wenn sie ursprünglich als Text vorliegen.",
      "Im Vergleich zu lokalen Dateien, bei denen man einfach in eine Datei schreibt, erfordert die Netzwerkübertragung explizite Kontrolle über Format, Länge und Timing der Daten.",
      "Die `send()`-Funktion ist in vielen Programmiersprachen ähnlich verfügbar – in C, Python, Java etc. – was plattformübergreifende Netzwerkprogrammierung erleichtert."
    ],
    "explanationJa": [
      "クライアントが `connect()` を使ってサーバと接続を確立した後、データ送信には `send()` 関数を使用します。",
      "`send(descriptor, data, length, flags)` は、引数 `descriptor` に指定されたソケットを通じて、`data` に格納されたデータを `length` バイト分サーバへ送信します。",
      "`flags` は特別な送信モードの指定に使われますが、通常は 0 を指定します。",
      "具体例として、Webブラウザが `GET /index.html HTTP/1.1` というHTTPリクエストを送る際、その文字列をソケット経由で送信します。",
      "データはネットワーク上ではバイナリ形式で送られます。たとえ人が読む文字列であっても、送信前にバイト列として扱われます。",
      "ローカルファイルへの書き込みと異なり、ネットワーク通信ではデータのフォーマット、サイズ、送信のタイミングなどを明示的に制御する必要があります。",
      "この `send()` 関数はC言語だけでなく、PythonやJavaなど多くの言語にも同様のインタフェースがあるため、ネットワークプログラミングの基礎として幅広く使用されています。"
    ],
    "originalSlideText": "❑ Übertragung der Daten → typischerweise der Request\n❑ send(descriptor, data, length, flags)",
    "explanationImage": "",
    "questionImage": ""
  },
  {
    "id": 6,
    "questionDe": "(s10) Wie empfängt ein Client eine Antwort vom Server?",
    "questionJa": "クライアントはどのようにしてサーバからの応答を受け取るか？",
    "answerDe": [
      "Der Client empfängt die Antwort mit der Funktion recv(descriptor, buffer, length, flags).",
      "Die Funktion liest die Daten aus dem Socket in den angegebenen Puffer.",
      "Sie wird typischerweise genutzt, um den Response des Servers zu verarbeiten."
    ],
    "answerJa": [
      "クライアントは recv(descriptor, buffer, length, flags) 関数で応答を受信する。",
      "この関数はソケットからデータを指定されたバッファに読み取る。",
      "通常、サーバからのレスポンスを処理するために使用される。"
    ],
    "explanationDe": [
      "Nach dem Senden einer Anfrage erwartet der Client typischerweise eine Antwort vom Server. Diese wird über das gleiche Socket empfangen.",
      "Dazu dient die Funktion `recv(descriptor, buffer, length, flags)`. Sie liest die Daten aus dem Socket und schreibt sie in den Speicherbereich, der durch `buffer` angegeben ist.",
      "Der Parameter `descriptor` verweist auf das Socket, über das die Verbindung besteht. `length` gibt die maximale Anzahl von Bytes an, die gelesen werden sollen.",
      "Die Funktion blockiert in der Regel, bis Daten empfangen wurden – es sei denn, das Socket ist im nicht-blockierenden Modus geöffnet.",
      "Ein typisches Beispiel: Nach einem HTTP-GET-Request liest der Browser mit `recv()` die HTML-Seite, die der Webserver als Antwort sendet.",
      "Im Vergleich zur Dateioperation `read()` funktioniert `recv()` ähnlich, ist aber speziell auf die Netzwerkkommunikation zugeschnitten – inklusive Optionen zur Fehlerbehandlung und Kontrolle des Empfangsverhaltens.",
      "Die empfangenen Daten können beliebiger Art sein – HTML, JSON, Binärdaten etc. – und müssen vom Client entsprechend interpretiert werden."
    ],
    "explanationJa": [
      "クライアントがリクエストを送信した後、通常はサーバからの応答を待ちます。その応答データを受信するのに使われるのが `recv()` 関数です。",
      "`recv(descriptor, buffer, length, flags)` は、指定されたソケットからデータを受け取り、それを `buffer`（バッファ）に格納します。",
      "`descriptor` は接続済みのソケット識別子で、`length` は読み取る最大バイト数です。",
      "この関数は、通常はデータが到着するまで処理を停止（ブロック）しますが、非ブロッキング設定がされていれば即時戻るように動作します。",
      "例えばWebブラウザでは、HTTPリクエストを送信後、HTMLデータを `recv()` を使って受信します。",
      "ファイル操作での `read()` に似ていますが、`recv()` はネットワーク通信向けに設計されており、受信時の制御やエラー処理に対応しています。",
      "受信するデータはHTMLやJSON、バイナリなど多様であり、クライアント側で用途に応じて解析・表示されます。"
    ],
    "originalSlideText": "❑ Empfangen der Antwort → Response des Servers\n❑ recv(descriptor, buffer, length, flags)",
    "explanationImage": "",
    "questionImage": ""
  },
  {
    "id": 7,
    "questionDe": "(s11) Wie legt ein Server die IP-Adresse und den Port für einen Socket fest?",
    "questionJa": "サーバはどのようにソケットにIPアドレスとポート番号を割り当てるか？",
    "answerDe": [
      "Der Server verwendet die Funktion bind(descriptor, localaddr, addrlen).",
      "Damit wird dem Socket eine IP-Adresse und ein Port zugewiesen.",
      "Die Adresse wird lokal auf dem Server festgelegt."
    ],
    "answerJa": [
      "サーバは bind(descriptor, localaddr, addrlen) 関数を使用する。",
      "この関数によりソケットにIPアドレスとポート番号が割り当てられる。",
      "指定するアドレスはサーバ上のローカルアドレスである。"
    ],
    "explanationDe": [
      "Bevor ein Server Verbindungen akzeptieren kann, muss er dem Socket mitteilen, unter welcher IP-Adresse und welchem Port er erreichbar sein soll.",
      "Dazu dient die Funktion `bind()`, die wie folgt aufgerufen wird: `bind(descriptor, localaddr, addrlen)`.",
      "Der `descriptor` ist das Socket, das mit einer Adresse verknüpft werden soll. `localaddr` enthält die gewünschte IP-Adresse und den Port – zum Beispiel 0.0.0.0:8080, um auf allen Interfaces zu lauschen.",
      "Der Aufruf von `bind()` ist notwendig, damit der Betriebssystem-Kernel weiß, an welche Netzwerkadresse eingehende Verbindungen weitergeleitet werden sollen.",
      "Ohne `bind()` kann das Socket nicht eindeutig identifiziert werden und ist daher nicht für eingehende Verbindungen geeignet.",
      "Ein Vergleich: Bei einem Webserver wie Apache wird standardmäßig Port 80 verwendet – mit `bind()` wird dieser Port an den Serverprozess gebunden.",
      "In vielen modernen Anwendungen kann `bind()` auch mit einer Platzhalteradresse wie `INADDR_ANY` arbeiten, sodass der Server alle Netzwerkschnittstellen überwacht."
    ],
    "explanationJa": [
      "サーバが接続を受け入れる前に、どのIPアドレスとポート番号で待ち受けるかをOSに知らせる必要があります。",
      "この処理には `bind()` 関数が使われ、書式は `bind(descriptor, localaddr, addrlen)` です。",
      "`descriptor` は対象のソケット識別子、`localaddr` には待ち受け用のIPアドレスとポート番号（例：0.0.0.0:8080 など）を含めます。",
      "`bind()` を実行することで、OSはこのソケットがどのネットワークアドレスで通信を待つべきかを理解し、正しく接続要求をルーティングできます。",
      "`bind()` を行わなければ、ソケットは特定のアドレスに紐づかず、外部からの接続を受け取ることができません。",
      "例えばApacheなどのWebサーバでは、通常ポート80を使用しますが、このポートをサーバアプリに関連付けるのが `bind()` の役割です。",
      "また、複数のネットワークインタフェースを持つサーバでは、`INADDR_ANY` のようなワイルドカードアドレスを使うことで、すべてのネットワークからの接続を待ち受けることができます。"
    ],
    "originalSlideText": "❑ Festlegen des Ports und der IP-Adresse des Sockets\n❑ bind(descriptor, localddr, addrlen)",
    "explanationImage": "",
    "questionImage": ""
  },
  {
    "id": 8,
    "questionDe": "(s12) Wie wird der Server-Socket in den passiven Modus geschaltet?",
    "questionJa": "サーバソケットはどのようにしてパッシブモード（接続待ち状態）に設定されるか？",
    "answerDe": [
      "Mit der Funktion listen(descriptor, queuesize) wird der Socket in den passiven Modus geschaltet.",
      "Der Server kann dann auf eingehende Verbindungen warten.",
      "queuesize legt fest, wie viele Verbindungen gleichzeitig in der Warteschlange stehen dürfen."
    ],
    "answerJa": [
      "listen(descriptor, queuesize) 関数を使ってソケットをパッシブモードに設定する。",
      "これによりサーバは外部からの接続を待ち受けられるようになる。",
      "queuesize は接続待ちのキューの最大数を指定する。"
    ],
    "explanationDe": [
      "Nachdem ein Server-Socket mit einer Adresse gebunden wurde, muss er in den passiven Modus geschaltet werden, um eingehende Verbindungsanfragen akzeptieren zu können.",
      "Dies geschieht mit der Funktion `listen(descriptor, queuesize)`. Sie signalisiert dem Betriebssystem, dass dieses Socket nun auf neue Verbindungen warten soll.",
      "`descriptor` ist der Dateideskriptor des gebundenen Sockets, und `queuesize` bestimmt, wie viele Verbindungsanfragen das System in einer Warteschlange halten darf, bevor neue Anfragen abgewiesen werden.",
      "Ein Socket im passiven Modus ist vergleichbar mit einem „offenen Ohr“ – es hört kontinuierlich auf eingehende Anfragen, aber beantwortet sie noch nicht direkt.",
      "Beispiel: Ein Webserver ruft `listen(server_fd, 10)` auf, um bis zu 10 gleichzeitige TCP-Anfragen zwischenzuspeichern, während er nacheinander Verbindungen bearbeitet.",
      "Dieser Modus ist erforderlich für TCP-Server, da die Verbindung vom Client initiiert wird und der Server auf Verbindungsanfragen vorbereitet sein muss.",
      "Im Gegensatz zu UDP-Sockets, die direkt Nachrichten empfangen können, erfordert TCP immer diesen expliziten Schritt des Lauschens (`listen()`), bevor Verbindungen angenommen werden können."
    ],
    "explanationJa": [
      "サーバソケットにIPアドレスとポートを `bind()` で割り当てた後、実際に外部からの接続要求を受け入れる準備をするには、そのソケットをパッシブモードに設定する必要があります。",
      "そのために使用されるのが `listen(descriptor, queuesize)` 関数です。この関数を呼び出すと、ソケットは接続待ち（受動的）状態になり、クライアントからの接続要求を受け付けるようになります。",
      "`descriptor` は対象のソケットを指定し、`queuesize` では、未処理の接続要求を何件までキューに保持できるかを指定します。",
      "たとえば `listen(server_fd, 10)` とすることで、最大10件の接続要求を同時に待機させることができます。",
      "この状態のソケットはまだ通信そのものは行っておらず、接続要求を受け取る準備ができている状態です。",
      "UDPソケットが即座にメッセージを受け取れるのとは異なり、TCPソケットでは `listen()` を使って接続を待つ手順が必須です。",
      "この機能は、Webサーバやメールサーバなど、複数のクライアントからの接続を同時に受ける必要があるサーバアプリケーションでは特に重要です。"
    ],
    "originalSlideText": "❑ Schaltet den Socket in den passiven Modus in dem auf \neingehende Verbindungen gelauscht wird\n❑ listen(descriptor, queuesize)",
    "explanationImage": "",
    "questionImage": ""
  },
  {
    "id": 9,
    "questionDe": "(s13) Was passiert beim Aufruf der Funktion accept() im Server?",
    "questionJa": "サーバで accept() 関数を呼び出すと何が起こるか？",
    "answerDe": [
      "Die Funktion accept(descriptor, caddress, caddresslen) wird aufgerufen, um eine eingehende Verbindung anzunehmen.",
      "Dabei wird ein neuer Socket erzeugt, der zur Kommunikation mit dem Client dient.",
      "Der ursprüngliche Socket bleibt weiterhin im Lauschmodus."
    ],
    "answerJa": [
      "accept(descriptor, caddress, caddresslen) 関数は、外部からの接続要求を受け入れるために呼び出される。",
      "この関数によりクライアントとの通信専用の新しいソケットが生成される。",
      "元のソケットは引き続き接続待ち（リスン）状態にとどまる。"
    ],
    "explanationDe": [
      "Nachdem ein Server-Socket mit `listen()` in den passiven Modus versetzt wurde, kann der Server mit `accept()` eine eingehende Verbindung annehmen.",
      "Die Funktion `accept(descriptor, caddress, caddresslen)` wartet, bis ein Client eine Verbindung anfragt, und erzeugt dann einen neuen Socket, über den die Kommunikation mit genau diesem Client erfolgt.",
      "Das ursprüngliche Socket – das sogenannte Listen-Socket – bleibt bestehen und kann weitere Verbindungen akzeptieren.",
      "Der Rückgabewert von `accept()` ist ein neuer Deskriptor für das Client-spezifische Socket. Dieser wird in der Regel in einem separaten Thread oder Prozess verarbeitet.",
      "Beispiel: Ein Webserver akzeptiert eine Verbindung mit `accept()` und startet einen Worker-Thread, der den HTTP-Request verarbeitet und beantwortet.",
      "Im Gegensatz zu UDP, wo alle Daten über denselben Socket empfangen werden, bekommt bei TCP jeder Client eine eigene dedizierte Verbindung – genau das realisiert `accept()`.",
      "Diese Trennung ermöglicht parallele Bearbeitung mehrerer Clients, was für die Skalierbarkeit von Serveranwendungen entscheidend ist."
    ],
    "explanationJa": [
      "サーバが `listen()` によって接続待ち状態になっているとき、`accept()` 関数を使って実際に接続要求を受け入れます。",
      "`accept(descriptor, caddress, caddresslen)` は、クライアントからの接続要求が来るまで待機し、それを受け入れると、新たにクライアント専用のソケットを生成して返します。",
      "このとき、もともとのソケット（リッスンソケット）は引き続き接続待ちの状態を維持し、次の接続要求に備えます。",
      "返される新しいソケット識別子は、受け入れたクライアントとの通信専用に使われます。通常はこのソケットを専用スレッドやプロセスに渡して処理を行います。",
      "例えばWebサーバでは、`accept()` で接続を受け入れたら、それに応じたスレッドを起動してHTTPリクエストを処理します。",
      "UDPと異なり、TCPではクライアントごとに独立した接続（ソケット）が割り当てられ、これが `accept()` によって実現されます。",
      "この構造により、複数のクライアントと同時並行で通信を行えるようになり、サーバアプリケーションの拡張性が確保されます。"
    ],
    "originalSlideText": "❑ Verbindungsannahme\n❑ Es wird ein neuer Socket erzeugt, der zur Kommunikation \nmit dem Client dient → ursprüngliche Socket lauscht weiter \nauf Verbindungen\n❑ newsock = accept(descriptor, caddress, caddresslen)",
    "explanationImage": "",
    "questionImage": ""
  },
  {
    "id": 10,
    "questionDe": "(s14) Wie verarbeitet der Server Anfragen und sendet Antworten?",
    "questionJa": "サーバはどのようにリクエストを処理し、レスポンスを返すのか？",
    "answerDe": [
      "Der Server liest die Anfrage mit einer Leseoperation (z. B. recv).",
      "Danach sendet er eine Antwort mit einer Schreiboperation (z. B. send).",
      "Dies erfolgt über den mit accept() erzeugten Socket."
    ],
    "answerJa": [
      "サーバは recv などの読み取り操作でリクエストを受信する。",
      "その後、send などの書き込み操作でレスポンスを送信する。",
      "これらは accept() によって生成されたクライアント用ソケットを通じて行う。"
    ],
    "explanationDe": [
      "Nach dem erfolgreichen Aufruf von `accept()` besitzt der Server einen dedizierten Socket für die Kommunikation mit einem bestimmten Client.",
      "Über diesen Socket kann der Server mit einer Leseoperation – typischerweise `recv()` – die eingehenden Daten des Clients empfangen, etwa einen HTTP-Request oder eine FTP-Anfrage.",
      "Anschließend verarbeitet der Server die empfangene Nachricht entsprechend der verwendeten Anwendung (z. B. Webserver, Mailserver) und generiert eine passende Antwort.",
      "Diese Antwort wird mit einer Schreiboperation – z. B. `send()` – zurück an den Client über denselben Socket geschickt.",
      "Die Trennung von Verbindungsannahme (`accept()`) und Datenverarbeitung ermöglicht eine saubere Strukturierung des Servercodes, oft mithilfe von Threads oder Event-Loops.",
      "Beispiel: Ein einfacher Echo-Server liest eine Textnachricht vom Client und schickt exakt dieselbe Nachricht zurück – dies geschieht über dieselbe Verbindung.",
      "Diese Form der bidirektionalen Kommunikation ist ein zentrales Merkmal von TCP-basierten Server-Client-Anwendungen, im Gegensatz zu z. B. einfachen Anfrage-Antwort-Mustern in HTTP über UDP."
    ],
    "explanationJa": [
      "`accept()` 関数で接続を受け入れた後、サーバはそのクライアント専用のソケットを通じてリクエストの処理を行います。",
      "リクエストは `recv()` などの読み取り関数で受信されます。たとえば、HTTPリクエストやFTPコマンドなどが対象です。",
      "サーバは受け取った内容を解析し、要求に応じた処理（ファイルの提供、データベースアクセスなど）を行います。",
      "その結果として得られたレスポンスを `send()` 関数などでクライアントに返信します。",
      "この一連の流れは、通信の確立、読み取り、処理、応答という構造になっており、多くのサーバはこの構造に従っています。",
      "たとえばエコーサーバでは、クライアントから受け取った文字列をそのまま `send()` で送り返すというシンプルな処理が行われます。",
      "このように、双方向通信ができるTCPを活用することで、安定かつ柔軟なサーバ・クライアント型アプリケーションの実装が可能になります。"
    ],
    "originalSlideText": "❑ Requests lesen und mit einem Response antworten",
    "explanationImage": "",
    "questionImage": ""
  },
  {
  "id": 11,
  "questionDe": "(s15) Was sind die Hauptunterschiede zwischen TCP- und UDP-Kommunikation?",
  "questionJa": "TCP通信とUDP通信の主な違いは何か？",
  "answerDe": [
    "UDP benötigt keinen Verbindungsaufbau.",
    "Die Funktion sendto() überträgt direkt Nachricht und Zieladresse.",
    "Empfang erfolgt mit recvfrom().",
    "TCP hingegen erfordert Verbindungsaufbau und nutzt connect(), send() und recv()."
  ],
  "answerJa": [
    "UDPは接続を確立する必要がない。",
    "sendto() 関数でメッセージと宛先アドレスを直接指定して送信する。",
    "recvfrom() 関数で受信を行う。",
    "一方、TCPでは通信前に接続確立が必要で、connect()・send()・recv() を用いる。"
  ],
  "explanationDe": [
    "TCP (Transmission Control Protocol) ist ein verbindungsorientiertes Protokoll. Das bedeutet, dass vor der Datenübertragung eine Verbindung zwischen Client und Server aufgebaut wird, was durch den sogenannten Three-Way-Handshake erfolgt.",
    "UDP (User Datagram Protocol) hingegen ist verbindungslos. Daten werden direkt gesendet, ohne vorherige Absprache oder Bestätigung vom Empfänger.",
    "Bei TCP kommen Funktionen wie `connect()`, `send()` und `recv()` zum Einsatz. Bei UDP verwendet man `sendto()` zum Senden und `recvfrom()` zum Empfangen, wobei die Adressinformationen direkt bei jedem Aufruf angegeben werden müssen.",
    "Ein Vorteil von UDP ist die geringe Latenz: Es ist schneller, da kein Verbindungsaufbau nötig ist. Dafür bietet es aber keine Garantie, dass Daten ankommen, korrekt sind oder in der richtigen Reihenfolge empfangen werden.",
    "TCP bietet hingegen zuverlässige, geordnete und fehlergeprüfte Kommunikation – ideal für Anwendungen wie Web, E-Mail oder Dateiübertragungen.",
    "UDP eignet sich für Anwendungen, bei denen Geschwindigkeit wichtiger ist als Zuverlässigkeit, z. B. Echtzeitspiele, VoIP oder Video-Streaming.",
    "Zusammengefasst: TCP = sicher & zuverlässig, UDP = leichtgewichtig & schnell, aber unzuverlässig."
  ],
  "explanationJa": [
    "TCP（Transmission Control Protocol）は接続型のプロトコルであり、通信を始める前にサーバとクライアントの間で接続を確立する必要があります。これは3ウェイハンドシェイクと呼ばれる手順を経て行われます。",
    "一方でUDP（User Datagram Protocol）は接続不要のプロトコルであり、データは一方的に送信され、受信側からの確認を待たずに通信が行われます。",
    "TCPでは `connect()` で接続し、`send()` や `recv()` を使ってデータをやり取りしますが、UDPでは `sendto()` 関数で送信時に直接宛先アドレスを指定し、受信は `recvfrom()` 関数を使います。",
    "UDPの利点は遅延が非常に少ないことです。接続処理がないため即時通信が可能です。ただし、信頼性は保証されません。データが届かなかったり、順番が前後したり、破損する可能性があります。",
    "一方で、TCPは通信の信頼性を高めるために確認応答や順序制御、エラーチェックなどの機能が備わっており、HTTPやメール、ファイル転送などに適しています。",
    "UDPはリアルタイム性が求められるアプリ（例：オンラインゲーム、音声通話、動画ストリーミングなど）に向いています。",
    "まとめると、TCPは信頼性重視、UDPは速度重視であり、用途に応じて使い分けることが重要です。"
  ],
  "originalSlideText": "❑ Vorheriges Beispiel war für TCP-Sockets\n❑ UDP benötigt keinen Verbindungsaufbau!\n Der Funktion sendto werden die Nachricht und die notwenden \nZiel-Adressen direkt übergeben\n Empfänger lauscht mit recvfrom auf eingehende Nachrichten",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 12,
  "questionDe": "(s17) Was ist ein Anwendungsprotokoll (Application Layer Protocol) und warum ist es notwendig?",
  "questionJa": "アプリケーション層プロトコルとは何か？それはなぜ必要なのか？",
  "answerDe": [
    "Anwendungen, die Daten austauschen wollen, müssen die Art der Kommunikation festlegen.",
    "Ein Anwendungsprotokoll beschreibt: Syntax, Semantik, Rollenverteilung, Verbindungsaufbau, Fehlerbehandlung und Verbindungsabbau.",
    "Das Ergebnis dieser Definition ist ein Application Layer Protokoll."
  ],
  "answerJa": [
    "データをやり取りしたいアプリケーションは、通信方法を定義する必要がある。",
    "アプリケーションプロトコルは、メッセージの文法や意味、クライアント・サーバの役割、接続の開始と終了、エラー処理などを定義する。",
    "その結果としてアプリケーション層プロトコルが形成される。"
  ],
  "explanationDe": [
    "Ein Anwendungsprotokoll (Application Layer Protocol) legt fest, wie zwei Programme miteinander über das Netzwerk kommunizieren sollen.",
    "Es definiert sowohl die Struktur (Syntax) der ausgetauschten Nachrichten als auch ihre Bedeutung (Semantik).",
    "Außerdem beschreibt es, welche Rolle jede Partei übernimmt (z. B. Client oder Server), wie die Verbindung aufgebaut wird, wie Fehler erkannt und behandelt werden, und wann bzw. wie sie wieder geschlossen wird.",
    "Typische Beispiele für Anwendungsprotokolle sind HTTP (für Webseiten), SMTP (für E-Mail) oder FTP (für Dateitransfer).",
    "Diese Protokolle sorgen dafür, dass Software unterschiedlicher Anbieter dennoch miteinander kommunizieren kann – ein Webbrowser von Firma A kann so mit einem Webserver von Firma B sprechen.",
    "Ohne ein standardisiertes Protokoll würde jedes Programm eine eigene Kommunikationsweise nutzen – Interoperabilität wäre kaum möglich.",
    "Deshalb sind Anwendungsprotokolle unerlässlich für die funktionsfähige und sichere Kommunikation über das Internet."
  ],
  "explanationJa": [
    "アプリケーション層プロトコルとは、ネットワーク越しにアプリケーション同士がどのように通信すべきかを定めた取り決めです。",
    "ここでは、送受信するメッセージの形式（文法）や意味（セマンティクス）が定義されます。",
    "また、通信における役割分担（クライアントとサーバ）、接続の開始・終了方法、エラー処理の手順なども含まれます。",
    "たとえば、Webページ閲覧に使われるHTTP、メールのSMTP、ファイル転送のFTPなどが代表的なアプリケーション層プロトコルです。",
    "これらのプロトコルがあることで、異なるベンダーのソフトウェア同士でも通信が可能になります。たとえば、A社のブラウザとB社のWebサーバが問題なくやりとりできます。",
    "もしプロトコルが存在しなければ、各プログラムが独自の通信方式を取るため、相互運用性（インターオペラビリティ）が失われます。",
    "したがって、アプリケーション層プロトコルは、インターネット上での正常かつ安全な通信を支える基盤として不可欠です。"
  ],
  "originalSlideText": "❑ Anwendungen, die Daten austauschen wollen, müssen die Art \nund Weise der Kommunikation festlegen\n Syntax und Semantik der Nachrichten\n Client / Server Rollen und Verbindungsaufbau\n Fehlerbehandlung\n Verbindungsabbau\n❑ Ergebnis: Application Layer Protokoll",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 13,
  "questionDe": "(s18) Was unterscheidet private von standardisierten Anwendungsprotokollen?",
  "questionJa": "私的なアプリケーションプロトコルと標準化されたプロトコルは何が違うのか？",
  "answerDe": [
    "Private Protokolle müssen nicht dokumentiert sein – der Quellcode dient als Dokumentation.",
    "Sie sind für den internen Gebrauch gedacht, nicht für Drittanbieter.",
    "Standardisierte Protokolle sind öffentlich spezifiziert.",
    "Sie ermöglichen Dritten, kompatible Clients oder Server zu entwickeln.",
    "Die Spezifikation muss präzise und eindeutig sein, um Interoperabilität sicherzustellen."
  ],
  "answerJa": [
    "私的なプロトコルは文書化が不要で、ソースコードがそのまま仕様書となる。",
    "第三者による互換クライアントやサーバの開発は想定していない。",
    "標準化プロトコルは公開仕様として定義される。",
    "これにより他者が互換性のあるクライアントやサーバを作成できる。",
    "相互運用性を保証するため、明確かつ厳密な仕様が必要とされる。"
  ],
  "explanationDe": [
    "Anwendungsprotokolle lassen sich in zwei Kategorien unterteilen: private und standardisierte Protokolle.",
    "Private Protokolle werden für den internen Gebrauch entwickelt. Es gibt keine öffentliche Dokumentation – meist dient der Quellcode als einzige Referenz.",
    "Das bedeutet, dass Dritte die Funktionsweise schwer nachvollziehen oder nachbauen können, was in geschlossenen Systemen oft gewünscht ist.",
    "Beispiel: Ein Unternehmen entwickelt ein spezielles Protokoll für die Kommunikation zwischen zwei proprietären Anwendungen.",
    "Standardisierte Protokolle hingegen sind offen dokumentiert und oft von Organisationen wie IETF oder W3C spezifiziert (z. B. HTTP, SMTP, FTP).",
    "Solche Protokolle sind notwendig, damit Software unterschiedlicher Hersteller zuverlässig zusammenarbeitet.",
    "Ein gut spezifiziertes Protokoll sorgt für Interoperabilität – das heißt: ein Browser kann mit jedem Webserver kommunizieren, sofern beide dem gleichen Standard folgen."
  ],
  "explanationJa": [
    "アプリケーション層プロトコルには大きく分けて、私的なプロトコルと標準化されたプロトコルの2種類があります。",
    "私的なプロトコルは、開発者や企業の内部利用を前提としており、仕様はソースコード内で完結していることが多く、一般に公開されません。",
    "そのため、第三者がこのプロトコルに対応したソフトウェアを開発するのは困難です。これは、閉じた環境での制御やセキュリティ目的で意図的に採用されることもあります。",
    "例としては、ある企業が自社製品間のみで使うために作成したカスタムプロトコルなどが挙げられます。",
    "一方、標準化されたプロトコルは、誰でも参照できるように仕様が文書化されており、HTTP、SMTP、FTPなどが代表例です。",
    "このようなプロトコルは、異なる開発者・組織が作ったソフトウェア同士でも通信できるように設計されており、インターネットの相互接続性を支えています。",
    "そのため、仕様はあいまいさがなく、明確かつ厳密でなければなりません。"
  ],
  "originalSlideText": "❑ Privater Dienst: Anwendungsprotokoll muss nicht in einem \nformellen Dokument festgehalten werden\n „der Quellcode ist die Dokumentation“\n Dritte Parteien müssen / sollen keine passenden  Clients oder \nServer bauen\n❑ Standardisierter Dienst: Andere Parteien sollen in der Lage \nseien Clients oder eigene Server anhand einer öffentlichen \nSpezifikation zu bauen (z.B. HTTP, SMTP)\n Präzise und eindeutige Formulierungen um Interoperabilität zu \ngewährleisten",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 14,
  "questionDe": "(s19) Welche zwei Hauptaspekte umfasst ein Anwendungsprotokoll und was beschreiben sie?",
  "questionJa": "アプリケーションプロトコルにはどのような2つの主要な側面があり、それぞれ何を定義しているか？",
  "answerDe": [
    "Ein Anwendungsprotokoll besteht aus zwei Teilen: Data Representation und Data Transfer.",
    "Data Representation beschreibt, wie Nachrichten als Bytes dargestellt werden.",
    "Data Transfer beschreibt den Ablauf, die Struktur und den Inhalt der Kommunikation.",
    "Auch Fehlererkennung und -korrektur gehören zum Data Transfer.",
    "Komplexe Dienste trennen beide Teile oft in zwei Dokumente auf."
  ],
  "answerJa": [
    "アプリケーションプロトコルは2つの側面から成る：データ表現とデータ転送。",
    "データ表現は、メッセージをバイト列としてどのように表すかを定義する。",
    "データ転送は、通信の順序、構造、情報の意味などを定義する。",
    "エラー検出や訂正もデータ転送に含まれる。",
    "複雑なサービスでは、これらを別々の文書で定義することもある。"
  ],
  "explanationDe": [
    "Ein Anwendungsprotokoll lässt sich logisch in zwei Hauptbereiche unterteilen: Data Representation (Datenrepräsentation) und Data Transfer (Datenübertragung).",
    "Die Datenrepräsentation legt fest, wie Nachrichten als Folge von Bytes kodiert werden. Dabei geht es um ein plattformunabhängiges Format, das sicherstellt, dass ein System die Daten eines anderen Systems korrekt interpretieren kann – z. B. Zahlenformate (Big Endian vs. Little Endian), Zeichencodierungen (UTF-8 vs. ASCII), etc.",
    "Ein Beispiel ist das MIME-Format bei E-Mails, das definiert, wie Bilder oder Anhänge als Text dargestellt werden, damit sie universell gelesen werden können.",
    "Der Bereich Data Transfer beschreibt, wie Nachrichten ausgetauscht werden – in welcher Reihenfolge, welche Nachrichtentypen existieren, wie auf bestimmte Nachrichten zu reagieren ist und wie der Verbindungsstatus verwaltet wird.",
    "Dazu gehören auch Regeln zur Fehlererkennung (z. B. Checksummen) und Fehlerkorrektur (z. B. Wiederholungsstrategien).",
    "In vielen komplexen Protokollen wie HTTP oder FTP sind diese beiden Aspekte in getrennten Spezifikationen geregelt, etwa ein RFC für die Semantik und ein anderer für das Nachrichtenformat.",
    "Diese Trennung hilft, die Protokolle modular und wartbar zu halten, insbesondere wenn sich Datenformate weiterentwickeln, aber die Kommunikationslogik gleich bleibt."
  ],
  "explanationJa": [
    "アプリケーションプロトコルは大きく2つの側面に分けられます。それが「データ表現（Data Representation）」と「データ転送（Data Transfer）」です。",
    "データ表現では、送受信されるメッセージをバイト列としてどのように構成するかが定義されます。これは異なるコンピュータ同士でもデータが正しく解釈できるようにするための仕様です。例えば数値の符号化（ビッグエンディアン／リトルエンディアン）や文字コード（UTF-8、ASCIIなど）の違いを吸収するために必要です。",
    "たとえばEメールのMIME形式では、画像やファイル添付をテキストに変換して送信することで、互換性を保っています。",
    "一方、データ転送では、メッセージのやり取りの順序、種類、意味、応答の仕方、接続の開始と終了の流れなど、通信の運用面が定義されます。",
    "ここには、エラー検出（例：チェックサム）やエラー訂正（再送要求など）の仕組みも含まれます。",
    "HTTPやFTPのような複雑なプロトコルでは、これら2つの側面を別々の仕様書（RFC）で定義しており、内容が明確に分かれています。",
    "このように分離して設計することで、フォーマットだけ更新したい場合や通信方式だけ変えたい場合でも、他方を再設計せずに対応でき、保守性が高まります。"
  ],
  "originalSlideText": "❑ Zwei konzeptionell getrennte Teile des \nAnwendungsprotokolls:\n Data Representation\n• Beschreibt wie die zu übertragenden Nachrichten als Bytes \n\tdargestellt werden\n• Plattformunabhängig → Mittels dieser Beschreibung können die \n\tNachrichten auf jedem System gelesen werden\n Data Transfer\n• Beschreibt welche Nachrichten ausgetauscht werden, in welcher \n\tReihenfolge, und was die Nachrichten für Information beinhalten →\n\tSyntax und Semantik der Nachrichten\n• Fehlererkennung, Fehlerkorrektur\n❑ Komplizierte Dienste trennen dies strikt in zwei Dokument \nauf",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 15,
  "questionDe": "(s21) Welche Technologien bilden die Grundlage des WWW und welche Aufgaben erfüllen sie?",
  "questionJa": "WWW（ワールドワイドウェブ）を構成する基本技術には何があり、それぞれどのような役割を果たしているか？",
  "answerDe": [
    "HTML (HyperText Markup Language): beschreibt Inhalt und Layout einer Website.",
    "URL (Uniform Resource Locator): definiert Adressen von Web-Ressourcen.",
    "HTTP (Hypertext Transfer Protocol): regelt die Kommunikation zwischen Browser und Webserver."
  ],
  "answerJa": [
    "HTML（ハイパーテキストマークアップ言語）：ウェブサイトの内容とレイアウトを記述する。",
    "URL（統一資源位置指定子）：Web上のリソースのアドレスを定義する。",
    "HTTP（ハイパーテキスト転送プロトコル）：ブラウザとWebサーバ間の通信を管理する。"
  ],
  "explanationDe": [
    "Das World Wide Web (WWW) basiert auf drei zentralen Technologien, die gemeinsam das Browsen, Anzeigen und Interagieren mit Webinhalten ermöglichen.",
    "HTML (HyperText Markup Language) ist eine Auszeichnungssprache, die den strukturellen Aufbau und das Layout von Webseiten beschreibt. Sie ermöglicht die Darstellung von Texten, Bildern, Links und Multimedia.",
    "URL (Uniform Resource Locator) spezifiziert, wo sich ein bestimmtes Dokument oder eine Ressource im Internet befindet. Sie enthält unter anderem das Protokoll (z. B. http), den Servernamen und den Pfad zur Ressource.",
    "HTTP (Hypertext Transfer Protocol) ist das Kommunikationsprotokoll, das definiert, wie der Webbrowser Anfragen an den Webserver sendet und wie der Server darauf antwortet.",
    "Zusammen ermöglichen diese Technologien, dass ein Benutzer durch Eingabe einer URL im Browser HTML-Inhalte vom Server anfordern und anzeigen kann.",
    "Beispiel: Bei Eingabe von 'https://www.uni-leipzig.de/index.html' nutzt der Browser HTTP, um das HTML-Dokument über eine URL vom Webserver abzurufen.",
    "Ohne diese drei Komponenten wäre das WWW, wie wir es kennen – mit klickbaren Links, strukturierter Darstellung und serverbasierter Kommunikation – nicht möglich."
  ],
  "explanationJa": [
    "WWW（ワールドワイドウェブ）は、3つの主要技術に基づいて構築されています。それにより、ユーザーはブラウザを通じてWeb上の情報にアクセスし、表示し、やりとりすることができます。",
    "HTML（HyperText Markup Language）は、Webページの構造や見た目を定義するマークアップ言語であり、テキスト・画像・リンク・動画などの要素を記述します。",
    "URL（Uniform Resource Locator）は、インターネット上の特定のリソースの場所を示すアドレスで、プロトコル（httpなど）、ホスト名、パスなどを含みます。",
    "HTTP（Hypertext Transfer Protocol）は、WebブラウザとWebサーバ間の通信を制御するプロトコルで、リクエストとレスポンスの手順を規定します。",
    "これら3つの技術が連携することで、ユーザーがブラウザにURLを入力するだけで、HTMLページがWebサーバから取得され、画面に表示されるという一連の流れが実現されます。",
    "たとえば『https://www.uni-leipzig.de/index.html』を入力すると、ブラウザはHTTPでリクエストを送り、指定されたURLのHTMLファイルを取得して表示します。",
    "この3つの技術がなければ、私たちが日常的に利用するようなリンクでつながった、構造化されたWebの世界は存在し得ません。"
  ],
  "originalSlideText": "❑ HyperText Markup Language (HTML)\n Inhalt und Layout einer Website\n❑ Uniform Resource Locator (URL)\n Format und Bedeutung der Adressen von Websites\n❑ Hypertext Transfer Protokoll (HTTP)\n Kommunikation zwischen Browser und Web Server",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 16,
  "questionDe": "(s22) Was ist HTML und welche Funktionen erfüllt es im WWW?",
  "questionJa": "HTMLとは何か？WWWにおいてどのような役割を果たしているか？",
  "answerDe": [
    "HTML ist eine textuelle Beschreibung des Inhalts und Layouts einer Website.",
    "Es unterstützt Multimedia-Inhalte wie Bilder und Videos.",
    "HTML ist eine Markup-Sprache, die Texten bestimmte Eigenschaften und Darstellungen zuweist.",
    "Sie gibt allgemeine Richtlinien für die Darstellung vor.",
    "Browser können den Inhalt an die Displaygröße anpassen."
  ],
  "answerJa": [
    "HTMLはWebサイトの内容とレイアウトを記述するテキスト形式の言語である。",
    "画像や動画などのマルチメディアコンテンツにも対応している。",
    "テキストに意味や装飾を与えるマークアップ言語である。",
    "表示に関する一般的な指示を記述する。",
    "ブラウザは内容を画面サイズに応じて自動調整できる。"
  ],
  "explanationDe": [
    "HTML steht für HyperText Markup Language und ist die Standard-Auszeichnungssprache zur Erstellung von Webseiten.",
    "Es handelt sich um eine deklarative Sprache, die Inhalte (Texte, Bilder, Videos) strukturiert beschreibt und mit Layout-Anweisungen versieht.",
    "HTML verwendet sogenannte Tags wie <h1>, <p>, <img> usw., um Inhalte zu gliedern und deren Bedeutung für Browser klarzumachen.",
    "Im Gegensatz zu Programmiersprachen beschreibt HTML nicht, wie etwas ausgeführt werden soll, sondern was dargestellt werden soll.",
    "Beispiel: Ein <h1>-Tag markiert eine Hauptüberschrift, während <img src=\"bild.jpg\"> ein Bild einfügt.",
    "HTML ist so konzipiert, dass es unabhängig vom Ausgabegerät (z. B. PC, Smartphone) funktioniert. Browser können das Layout flexibel an die Displaygröße anpassen.",
    "Es ist auch die Grundlage für weitere Webtechnologien wie CSS (für das Design) und JavaScript (für Interaktivität)."
  ],
  "explanationJa": [
    "HTML（HyperText Markup Language）は、Webページを作成するための標準的なマークアップ言語です。",
    "この言語は、文章や画像・動画といったコンテンツの内容や構造、そしてレイアウトの基本的な指示を記述するために使われます。",
    "HTMLでは <h1>（見出し）、<p>（段落）、<img>（画像）などのタグを使って、内容の区切りや意味を明示します。",
    "プログラミング言語とは異なり、HTMLは「どう動かすか」ではなく「何を表示するか」を定義する宣言的な言語です。",
    "例えば、<h1>タグを使えばブラウザはそれを大見出しとして表示し、<img src=\"bild.jpg\"> で画像を読み込みます。",
    "また、HTMLはデバイスに依存せず、パソコンでもスマートフォンでもブラウザが自動的にレイアウトを調整して表示します。",
    "さらにHTMLは、CSS（デザインを定義）やJavaScript（動的な動作を記述）といった他のWeb技術の土台となっています。"
  ],
  "originalSlideText": "❑ Textuelle Beschreibung des Inhalt und Layouts einer \nWebsite\n Unterstützt Multimedia-Inhalte: Bilder, Videos, …\n Markup Sprache: Weist Texten und Daten bestimmten \nEigenschaften und Darstellungsformen zu\n• Allgemeine Richtlinien für die Darstellung\n• Browser können den Inhalt z.B. an die Displaygröße anpassen",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 17,
  "questionDe": "(s23) Was bedeutet es, dass HTML eine deklarative Sprache ist, und welche weiteren Merkmale besitzt sie?",
  "questionJa": "HTMLが宣言的な言語であるとはどういう意味か？また、他にどのような特徴があるか？",
  "answerDe": [
    "HTML ist deklarativ: Es beschreibt, was dargestellt werden soll, nicht wie.",
    "Es nutzt Hyperlinks (Anchor-Tags), um auf andere Dokumente oder Medien zu verweisen.",
    "HTML-Dokumente können auch Meta-Daten enthalten."
  ],
  "answerJa": [
    "HTMLは宣言的な言語であり、何を表示するかを記述するが、どのように表示するかは指定しない。",
    "他の文書やメディアファイルへの参照を行うためにハイパーリンク（アンカータグ）を使用する。",
    "また、HTML文書にはメタデータを含めることができる。"
  ],
  "explanationDe": [
    "HTML ist deklarativ, was bedeutet, dass es dem Browser mitteilt, welche Inhalte auf einer Seite erscheinen sollen – nicht aber, wie sie konkret auf dem Bildschirm gezeichnet werden sollen.",
    "Das Layout und die konkrete Darstellung (z. B. Farben, Abstände, Schriftarten) übernimmt meist CSS, während HTML nur die logische Struktur vorgibt.",
    "Ein typisches Beispiel: <p> signalisiert einen Absatz, aber nicht dessen exakte Position oder Farbe.",
    "Darüber hinaus unterstützt HTML sogenannte Hyperlinks – sogenannte Anchor-Tags (<a href=\"...\">), mit denen man auf andere Webseiten, Bilder oder Videos verweisen kann.",
    "Diese Verlinkungen sind das zentrale Element des Hypertext-Konzepts, das das Web so mächtig macht.",
    "HTML-Seiten können auch sogenannte Meta-Daten enthalten, z. B. Informationen über Zeichensatz, Autor, Schlüsselwörter oder Anweisungen für Suchmaschinen (über <meta>-Tags im <head>-Bereich).",
    "Diese Metadaten helfen sowohl dem Browser als auch Suchmaschinen, das Dokument richtig einzuordnen und darzustellen."
  ],
  "explanationJa": [
    "HTMLが『宣言的』な言語であるというのは、「何を表示するか」を記述するものであり、「どのように表示するか」は別の技術（主にCSS）に委ねるという意味です。",
    "たとえば、<p> タグは段落を示しますが、その段落の色や配置、フォントサイズなどの見た目はHTMLでは定義しません。",
    "実際のレイアウトやデザインはCSSにより制御されます。一方、HTMLは論理的な構造を記述する役割を持ちます。",
    "また、HTMLはハイパーリンクをサポートしており、<a href=\"...\"></a> のようなアンカータグを使って他のページやファイル、画像・動画などにリンクを貼ることができます。",
    "この『リンク』の仕組みこそが、Web（＝リンクされた情報の網）の基本構造を支える要素です。",
    "さらに、HTML文書には <meta> タグなどを使ってメタデータを埋め込むことができ、これは文書の文字エンコーディング、作成者、キーワード、検索エンジン向けの情報などを記述します。",
    "これらの情報は、Webページの適切な表示や検索結果の精度向上に役立ちます。"
  ],
  "originalSlideText": "❑ Textuelle Beschreibung des Inhalt und Layouts einer \nWebsite\n Deklarativ: Beschreibt was dargestellt werden soll und nicht wie\n Nutzt Hyperlinks (Anchor) um zu anderen Dokumenten zu \nverweisen → auch Medieninhalte können Links beinhalten\n Dokumente können Meta-Daten beinhalten",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 18,
  "questionDe": "(s24) Wie ist ein HTML-Dokument strukturiert und welche grundlegenden Elemente enthält es?",
  "questionJa": "HTML文書はどのように構造化されており、基本的な構成要素には何があるか？",
  "answerDe": [
    "HTML-Dokumente bestehen aus verschachtelten Tags.",
    "Ein Tag hat eine öffnende (<TAG NAME>) und eine schließende Form (</TAG NAME>).",
    "Der HEAD-Abschnitt enthält Meta-Informationen.",
    "Der BODY-Abschnitt enthält den eigentlichen Seiteninhalt.",
    "Anchor-Tags (<a href=\"...\">) enthalten Hyperlinks."
  ],
  "answerJa": [
    "HTML文書は入れ子状のタグで構成されている。",
    "タグには開始タグ（<TAG NAME>）と終了タグ（</TAG NAME>）がある。",
    "HEAD要素にはメタ情報が含まれる。",
    "BODY要素にはWebページの本体となる内容が含まれる。",
    "アンカータグ（<a href=\"...\">）はハイパーリンクを定義する。"
  ],
  "explanationDe": [
    "Ein HTML-Dokument besteht grundsätzlich aus einer hierarchischen Struktur von sogenannten Tags. Diese Tags definieren, welche Elemente auf der Webseite erscheinen und wie sie organisiert sind.",
    "Jedes HTML-Element wird mit einem öffnenden Tag (z. B. <p>) begonnen und mit einem schließenden Tag (z. B. </p>) beendet. Zwischen diesen beiden steht der Inhalt.",
    "Die gesamte HTML-Seite ist typischerweise von einem <html> ... </html> Rahmen umgeben. Innerhalb dieses Rahmens gibt es zwei Hauptteile: <head> und <body>.",
    "Der <head>-Abschnitt enthält Metainformationen wie Zeichencodierung, Titel der Seite, Verweise auf CSS oder Skripte, und Suchmaschinenanweisungen.",
    "Der <body>-Abschnitt enthält den sichtbaren Inhalt der Seite, etwa Überschriften, Absätze, Listen, Bilder, Tabellen oder Formulare.",
    "Hyperlinks werden mit <a href=\"...\">Text</a> realisiert. Diese Anchor-Tags sind zentral für die Verlinkung von Dokumenten im Web.",
    "Die verschachtelte Struktur erlaubt es, komplexe und logisch gegliederte Webseiten zu erstellen, die sowohl vom Browser als auch von Suchmaschinen gut interpretiert werden können."
  ],
  "explanationJa": [
    "HTML文書は、タグと呼ばれる構造要素を階層的に（入れ子状に）組み合わせて構成されます。これにより、文書の論理構造や表示内容が定義されます。",
    "各要素は開始タグ（例：<p>）と終了タグ（例：</p>）で囲まれており、その間に表示内容が記述されます。",
    "通常、HTML文書は <html> タグで全体が囲まれており、その中に <head> 要素と <body> 要素の2つの主要セクションが存在します。",
    "<head> 要素には、文字エンコードやページタイトル、スタイルシートやスクリプトのリンク、検索エンジン用メタデータなどが含まれます。",
    "<body> 要素には、ユーザーに表示される本文コンテンツ（見出し、段落、画像、リンク、フォームなど）が配置されます。",
    "ハイパーリンクは <a href=\"...\">リンクテキスト</a> というアンカータグで表され、他のページやファイルに移動する仕組みを提供します。",
    "このようなタグの入れ子構造により、HTMLは複雑で意味のあるWebページを作成することができ、ブラウザや検索エンジンがその内容を正確に解釈できるようになります。"
  ],
  "originalSlideText": "❑ HTML-Dokumente werden aus verschachtelten Tags \nzusammen gestellt:\n Öffnender Tag <TAG NAME> und schließender Tag </TAG \nNAME>\n❑ HEAD enthält Meta-Informationen und BODY den eigentlich \nSeiteninhalt\n❑ Anchor-Tags enthalten die Hyperlinks: <a href=„index.html“>",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 19,
  "questionDe": "(s25) Wie ist eine URL aufgebaut und welche Bestandteile enthält sie?",
  "questionJa": "URLはどのような構造をしており、どのような構成要素から成り立っているか？",
  "answerDe": [
    "Eine URL ist die Adresse eines Objekts im Internet.",
    "Allgemeines Format: protocol://computer_name:port/document_name?parameters",
    "Beispiel: http://www.uni-leipzig.de:80/index.html?stundenplan",
    "Einige Bestandteile sind optional – es gibt Standardwerte.",
    "Fehlen bestimmte Teile, werden Defaultwerte angenommen (z. B. Port 80 für HTTP)."
  ],
  "answerJa": [
    "URLはインターネット上のオブジェクトのアドレスである。",
    "一般的な形式：protocol://computer_name:port/document_name?parameters",
    "例：http://www.uni-leipzig.de:80/index.html?stundenplan",
    "一部の構成要素は省略可能で、既定の値が使われる。",
    "たとえば、ポート番号を省略した場合、HTTPなら80番が暗黙的に使われる。"
  ],
  "explanationDe": [
    "Eine URL (Uniform Resource Locator) dient dazu, eine bestimmte Ressource im Internet eindeutig zu identifizieren – z. B. ein HTML-Dokument, ein Bild oder eine Datei.",
    "Der allgemeine Aufbau ist: `protokoll://hostname:port/pfad?parameter`.",
    "Das Protokoll gibt an, wie auf die Ressource zugegriffen wird – z. B. http, https, ftp.",
    "Der Hostname (z. B. www.uni-leipzig.de) identifiziert den Zielserver.",
    "Der Port ist optional und spezifiziert, welcher Dienst angesprochen wird (z. B. 80 für HTTP, 443 für HTTPS).",
    "Der Pfad gibt an, welches konkrete Dokument oder Verzeichnis auf dem Server gemeint ist (z. B. /index.html).",
    "Parameter (z. B. ?stundenplan) ermöglichen zusätzliche Angaben, etwa bei Suchanfragen oder Formularübertragungen.",
    "Wenn keine Angabe gemacht wird, werden Standardwerte verwendet: für HTTP etwa Port 80, für HTTPS Port 443.",
    "Beispiel: Die URL http://www.uni-leipzig.de/index.html entspricht http://www.uni-leipzig.de:80/index.html mit dem vermuteten Port."
  ],
  "explanationJa": [
    "URL（Uniform Resource Locator）は、インターネット上の特定のリソース（Webページ、画像、ファイルなど）を一意に識別するためのアドレスです。",
    "基本構文は `プロトコル://ホスト名:ポート番号/パス?パラメータ` という形式です。",
    "プロトコル部分は通信方式を示し、例えば http（Web通信）や ftp（ファイル転送）などがあります。",
    "ホスト名はアクセス先サーバを指定し、例として www.uni-leipzig.de のようになります。",
    "ポート番号はオプションで、省略可能です。省略時はプロトコルに応じた既定値（httpなら80、httpsなら443）が使われます。",
    "パス（例：/index.html）はサーバ上のファイルやフォルダの場所を示します。",
    "最後のパラメータ（例：?stundenplan）は、検索語やフォームの入力内容など、追加の情報を指定するために使われます。",
    "URLに一部の要素が含まれていない場合でも、標準的な既定値が推測されて通信は成立します。",
    "たとえば、http://www.uni-leipzig.de は、http://www.uni-leipzig.de:80 と同じ意味になります。"
  ],
  "originalSlideText": "❑ Adresse eines Objekts im Internet\n❑ Allgemeines Format:\n protocol://computer_name:port/document_name?parameters\n Z.B. http://www.uni-leipzig.de:80/index.html?stundenplan\n❑ Bestandteile teilweise optional (implizite Default Werte)\n Z.B. www.uni-leipzig.de/index.html?stundenpan → Port 80 und \nProtokoll HTTP „vermutet“",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 20,
  "questionDe": "(s26) Wie interpretiert ein Browser die Bestandteile einer URL und wozu dienen sie?",
  "questionJa": "ブラウザはURLの各構成要素をどのように解釈し、それぞれはどのような役割を果たしているか？",
  "answerDe": [
    "Der Browser nutzt den computer_name und port, um den richtigen Server zu identifizieren.",
    "Das protocol bestimmt, mit welchem Protokoll kommuniziert wird (z. B. HTTP, HTTPS, FTP).",
    "document_name und parameters werden vom Server ausgewertet, um das Objekt zu bestimmen."
  ],
  "answerJa": [
    "ブラウザは computer_name（ホスト名）と port（ポート番号）を使って接続先サーバを特定する。",
    "protocol（プロトコル）は通信方法を決定する（例：HTTP、HTTPS、FTP）。",
    "document_name（文書名）と parameters（パラメータ）は、サーバ側で対象リソースの特定に用いられる。"
  ],
  "explanationDe": [
    "Wenn ein Benutzer eine URL im Browser eingibt, wird diese in ihre Bestandteile zerlegt, die jeweils unterschiedliche Aufgaben erfüllen.",
    "Der computer_name (z. B. www.uni-leipzig.de) und der port (z. B. 80 oder 443) geben an, mit welchem Server und welchem Dienst der Browser eine Verbindung aufbauen soll.",
    "Das protocol (z. B. http, https, ftp) bestimmt, welches Kommunikationsprotokoll verwendet wird, um Daten mit dem Server auszutauschen.",
    "Beispielsweise bedeutet 'https' eine verschlüsselte Verbindung über TLS, während 'ftp' den Zugriff auf Dateiressourcen erlaubt.",
    "Der document_name bezeichnet den Pfad zur gewünschten Datei auf dem Server – z. B. /index.html oder /bilder/logo.png.",
    "Die parameters enthalten zusätzliche Informationen, z. B. ?id=123 oder ?suchwort=netzwerk, die meist bei Suchanfragen oder Formularverarbeitungen verwendet werden.",
    "Der Browser erstellt auf Basis dieser Informationen eine passende Anfrage (z. B. HTTP-GET) und sendet sie an den Server. Dieser interpretiert die Angaben und liefert die entsprechende Ressource zurück."
  ],
  "explanationJa": [
    "ユーザーがURLをブラウザに入力すると、そのURLは複数の要素に分解され、それぞれが異なる役割を果たします。",
    "computer_name（例：www.uni-leipzig.de）と port（例：80 や 443）は、どのサーバのどのサービスと通信すべきかを示します。",
    "protocol（プロトコル）は、通信方法を指定するもので、http・https・ftp などがあり、それぞれ通信の方式や安全性が異なります。",
    "たとえば、https はTLSによる暗号化通信を行い、ftp はファイルの転送を目的としたプロトコルです。",
    "document_name は、サーバ上の特定のファイルやページのパス（例：/index.html や /img/logo.png）を示します。",
    "parameters（例：?id=123 や ?keyword=netzwerk）は追加情報で、検索結果やフォーム入力に使われることが多いです。",
    "ブラウザはこれらの情報を基にHTTPリクエストなどを生成し、サーバへ送信します。サーバはその内容を解釈し、対応するリソースを返します。"
  ],
  "originalSlideText": "❑ Browser nutzt computer_name und port um den richtigen \nServer zu identifizieren\n❑ protocol spezifiziert mit welchem Protokoll der Browser mit \ndem Server sprechen wird (z.B. HTTP, HTTPS, FTP)\n❑ document_name und parameters werden vom Server \nausgewertet und identifizieren das gewünschte Objekt",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 21,
  "questionDe": "(s27) Wie funktioniert die Kommunikation zwischen Browser und Webserver über HTTP?",
  "questionJa": "HTTPを使ったブラウザとWebサーバ間の通信はどのように行われるか？",
  "answerDe": [
    "Der Browser sendet einen HTTP-Request an den Server.",
    "Dieser besteht aus einem Header, einer Leerzeile und eventuell Daten.",
    "Der Server antwortet mit einem HTTP-Response.",
    "Auch dieser enthält einen Header, eine Leerzeile und die angeforderten Daten.",
    "HTTP-Header sind textbasiert und zeilenorientiert.",
    "Dateien werden binär übertragen.",
    "Download und Upload werden unterstützt."
  ],
  "answerJa": [
    "ブラウザはHTTPリクエストをサーバに送信する。",
    "リクエストはヘッダー、空行、必要に応じてデータで構成される。",
    "サーバはHTTPレスポンスで応答する。",
    "レスポンスもヘッダー、空行、要求されたデータから成る。",
    "HTTPヘッダーはテキスト形式で、行単位で記述される。",
    "ファイルはバイナリ形式で転送される。",
    "ダウンロードおよびアップロードが可能である。"
  ],
  "explanationDe": [
    "HTTP (Hypertext Transfer Protocol) ist das zentrale Protokoll für den Austausch von Daten zwischen einem Webbrowser (Client) und einem Webserver.",
    "Wenn ein Nutzer eine Website aufruft, erstellt der Browser einen sogenannten HTTP-Request – eine textbasierte Nachricht, die Informationen über die gewünschte Ressource enthält.",
    "Dieser Request besteht aus mehreren Zeilen: einem Start-Line (z. B. GET /index.html HTTP/1.1), mehreren Header-Zeilen (z. B. Host: www.uni-leipzig.de) und einer Leerzeile. Optional folgt ein Nachrichtenkörper (z. B. bei POST-Requests).",
    "Der Server verarbeitet diesen Request und antwortet mit einem HTTP-Response. Auch dieser ist textbasiert, enthält aber zusätzlich die angeforderten Inhalte wie HTML-Dokumente oder Bilder.",
    "Der Response beginnt mit einem Statuscode (z. B. 200 OK) und enthält ebenfalls Header-Felder, eine Leerzeile und dann den eigentlichen Inhalt (z. B. HTML).",
    "Dateien – etwa Bilder oder PDFs – werden dabei binär übertragen, auch wenn die Steuerinformationen textbasiert sind.",
    "HTTP unterstützt sowohl das Abrufen (Download) als auch das Hochladen (Upload) von Daten. Besonders bei Formularen und Dateiuploads kommt letzteres zum Einsatz."
  ],
  "explanationJa": [
    "HTTP（Hypertext Transfer Protocol）は、WebブラウザとWebサーバ間でデータをやり取りするための中心的な通信プロトコルです。",
    "ユーザーがWebページを開こうとすると、ブラウザはサーバに対してHTTPリクエストというテキスト形式の要求メッセージを送信します。",
    "このリクエストは複数行から成り、開始行（例：GET /index.html HTTP/1.1）、複数のヘッダー（例：Host: www.uni-leipzig.de）、空行、そして必要に応じてメッセージボディ（特にPOSTで）が含まれます。",
    "サーバはこのリクエストを処理し、HTTPレスポンスを返します。レスポンスもテキスト形式で始まり、ステータスコード（例：200 OK）、複数のヘッダー、空行、そして要求されたコンテンツ（HTMLや画像など）を含みます。",
    "ファイルなどの実データ部分はバイナリ形式で転送されますが、制御部分（ヘッダーなど）はテキストで表現されます。",
    "HTTPは、Webページや画像などを取得するためのダウンロード機能だけでなく、フォーム送信やファイルアップロードにも対応しています。",
    "この仕組みにより、Webは情報の表示だけでなく、双方向のデータのやりとりが可能になっています。"
  ],
  "originalSlideText": "❑ Kommunikation zwischen Browser und Web Server\n Browser sendet HTTP Request zum Server\n• HTTP Request Header, eine leere Zeile + eventuell Daten\n Server antworten mit einem HTTP Response\n• HTTP Response Header, eine leere Zeile + angeforderte Daten\n❑ Kontrollnachrichten (HTTP Header) bestehen aus Text\n Zeilenbasiert\n (Fast) jede Zeile ein Headerfeld: <Feldname>: <Feldwert>\n❑ Dateien werden binär übertragen\n❑ Download und Upload wird unterstützt",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 22,
  "questionDe": "(s28) Welche HTTP-Methoden gibt es und wozu werden sie verwendet?",
  "questionJa": "HTTPにはどのようなメソッドがあり、それぞれどのような目的で使用されるか？",
  "answerDe": [
    "GET: Abruf eines Dokuments.",
    "HEAD: Abruf von Statusinformationen ohne das Dokument selbst.",
    "POST: Übermittlung von Daten an den Server.",
    "PUT: Ersetzt Daten auf dem Server.",
    "Die Methode steht in der ersten Zeile des Request-Headers."
  ],
  "answerJa": [
    "GET：ドキュメントの取得。",
    "HEAD：ドキュメント本体なしで状態情報のみ取得。",
    "POST：データをサーバに送信する。",
    "PUT：サーバ上のデータを置き換える。",
    "これらのメソッドはリクエストヘッダーの最初の行に記述される。"
  ],
  "explanationDe": [
    "HTTP-Methoden sind Bestandteile eines HTTP-Requests und geben an, welche Aktion der Client vom Server erwartet.",
    "Die Methode wird in der ersten Zeile des HTTP-Request-Headers angegeben – z. B. `GET /index.html HTTP/1.1`.",
    "GET ist die am häufigsten genutzte Methode und dient dazu, ein Dokument (z. B. eine HTML-Seite) vom Server abzurufen.",
    "HEAD funktioniert ähnlich wie GET, aber der Server liefert nur die Header-Informationen zurück – nützlich für Caching oder Vorabprüfungen.",
    "POST wird verwendet, um Daten an den Server zu übermitteln, z. B. bei Formularen. Die Daten befinden sich im Body der Nachricht.",
    "PUT dient dazu, ein Objekt auf dem Server zu erstellen oder zu ersetzen – z. B. beim Hochladen einer Datei.",
    "Zusammen ermöglichen diese Methoden unterschiedliche Kommunikationsformen: lesend, prüfend, schreibend oder ersetzend – je nach Bedarf der Anwendung."
  ],
  "explanationJa": [
    "HTTPメソッドは、HTTPリクエストの中でクライアントがサーバに対して何を求めているのかを示す命令です。",
    "これらのメソッドは、リクエストヘッダーの最初の行に指定されます（例：`GET /index.html HTTP/1.1`）。",
    "最もよく使われるのが GET で、サーバからHTMLファイルなどのコンテンツを取得するために使われます。",
    "HEAD は GET に似ていますが、返されるのはヘッダー情報のみで、本文（HTMLなど）は含まれません。主にキャッシュ確認やリンク切れチェックに使われます。",
    "POST は、フォームの入力データやアップロードファイルなど、クライアントからサーバにデータを送る際に使用されます。",
    "PUT は、指定されたリソースを新たに作成したり、既存のものを置き換えたりする場合に使用されます（主にAPIやファイルアップロードで利用）。",
    "これらのメソッドを使い分けることで、HTTPは読み取り、状態確認、データ送信、更新といった多様な通信ニーズに対応しています。"
  ],
  "originalSlideText": "❑ Mehrere HTTP Request Methoden\n GET: Abruf eines Dokumentes\n HEAD: Abruf von Statusinformationen zu einem Dokument\n• Server liefert den gleichen HTTP Header wie bei GET, aber nicht \n\tdas eigentliche Dokument\n POST: Übermittlung von Daten zum Server\n PUT: Ersetzt Daten auf dem Server\n❑ Im Request Header in der ersten Zeile angegeben",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 23,
  "questionDe": "(s29) Was bedeutet der Statuscode im HTTP-Response und welche Beispiele gibt es?",
  "questionJa": "HTTPレスポンスに含まれるステータスコードとは何か？代表的な例とその意味は？",
  "answerDe": [
    "Die erste Zeile im HTTP-Response enthält einen Statuscode.",
    "Der Statuscode gibt Auskunft über den Erfolg oder Fehler der Anfrage.",
    "Beispiele:",
    "200: OK – Anfrage erfolgreich.",
    "400: Syntaxfehler in der Anfrage.",
    "404: Das angeforderte Dokument existiert nicht."
  ],
  "answerJa": [
    "HTTPレスポンスの最初の行にはステータスコードが含まれる。",
    "ステータスコードはリクエストが成功したかどうかを示す。",
    "例：",
    "200：OK（リクエスト成功）",
    "400：構文エラーのあるリクエスト",
    "404：指定されたドキュメントが存在しない"
  ],
  "explanationDe": [
    "Jede HTTP-Response beginnt mit einer Statuszeile, die den Status der Serverantwort beschreibt – insbesondere, ob die Anfrage erfolgreich war oder nicht.",
    "Diese Zeile enthält einen numerischen Statuscode sowie eine kurze Textbeschreibung, z. B. `HTTP/1.1 200 OK`.",
    "Ein `200 OK` bedeutet, dass die Anfrage korrekt war und der Server die angeforderte Ressource zurückliefert.",
    "Ein `400 Bad Request` weist darauf hin, dass die Anfrage des Clients ungültig war – zum Beispiel wegen eines Syntaxfehlers.",
    "Ein `404 Not Found` bedeutet, dass die angeforderte Ressource auf dem Server nicht existiert – typischerweise bei Tippfehlern oder veralteten Links.",
    "Statuscodes sind in Kategorien unterteilt: 1xx (Information), 2xx (Erfolg), 3xx (Weiterleitung), 4xx (Clientfehler), 5xx (Serverfehler).",
    "Diese Codes sind wichtig, damit der Client (z. B. Browser) weiß, wie er reagieren soll – z. B. Seite anzeigen, Fehler melden oder einen anderen Link versuchen."
  ],
  "explanationJa": [
    "HTTPレスポンスは必ずステータス行（Status Line）で始まり、サーバがリクエストにどう応答したかを数値と短い説明文で示します。",
    "この行には、HTTPバージョン、ステータスコード、ステータスメッセージが含まれます（例：`HTTP/1.1 200 OK`）。",
    "`200 OK` はリクエストが成功し、要求されたリソースが正しく返されたことを意味します。",
    "`400 Bad Request` はクライアントからのリクエストに文法エラーがあったことを示します。",
    "`404 Not Found` は要求されたドキュメントがサーバ上に存在しない場合に返され、リンク切れやURLのミスが原因です。",
    "ステータスコードは100番台（情報）、200番台（成功）、300番台（リダイレクト）、400番台（クライアントエラー）、500番台（サーバエラー）に分類されます。",
    "これらのコードは、ブラウザなどのクライアントが次の動作を判断するために非常に重要です（例：再試行、エラーメッセージの表示、他のURLへの誘導など）。"
  ],
  "originalSlideText": "❑ Erste Zeile im HTTP Response Header ist ein Statuscode →\nInformationen über den Erfolg der Anfrage\n❑ Beispiele:\n 200: OK\n 400: Syntax-Fehler in der Anfrage\n 404: Dokument existiert nicht",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 24,
  "questionDe": "(s30) Wie funktioniert Caching im HTTP und welche Rolle spielt das Last-Modified-Feld?",
  "questionJa": "HTTPにおけるキャッシングの仕組みとは何か？Last-Modifiedヘッダーはどのような役割を果たすか？",
  "answerDe": [
    "Caching erfolgt lokal über GET- und HEAD-Anfragen.",
    "Viele Objekte wie Bilder, CSS oder JS werden bei Webseitenbesuchen mehrfach benötigt.",
    "Mit dem Last-Modified-Feld im HTTP-Header kann geprüft werden, ob sich ein Objekt geändert hat.",
    "Bei HEAD-Anfragen genügt es, nur den Header zu übertragen – nicht das ganze Objekt."
  ],
  "answerJa": [
    "キャッシングは、GETやHEADリクエストを通じてローカルで行われる。",
    "Webサイトでは、画像・CSS・JavaScriptなどのオブジェクトが何度も使われる。",
    "HTTPヘッダーのLast-Modifiedフィールドで、オブジェクトの更新有無を確認できる。",
    "HEADリクエストでは、オブジェクト本体を送らずにヘッダーだけを取得することができる。"
  ],
  "explanationDe": [
    "Beim Besuch einer Webseite lädt der Browser viele Ressourcen wie Bilder, Stylesheets (CSS), JavaScript-Dateien usw.",
    "Diese Objekte ändern sich selten, werden aber bei jedem Seitenaufruf erneut benötigt.",
    "HTTP ermöglicht sogenanntes Caching, d. h. das lokale Zwischenspeichern von Ressourcen auf dem Gerät des Nutzers.",
    "Dazu kann der Browser per HEAD-Anfrage prüfen, ob sich eine Ressource seit dem letzten Abruf verändert hat – ohne die komplette Datei nochmals herunterzuladen.",
    "Das Feld `Last-Modified` im HTTP-Header gibt das Datum der letzten Änderung an.",
    "Wenn dieses Datum identisch mit dem bereits gespeicherten ist, kann die gecachte Version weiterverwendet werden.",
    "Das spart Bandbreite, beschleunigt die Ladezeit und reduziert Serverbelastung – eine zentrale Technik für effizientes Web-Browsing."
  ],
  "explanationJa": [
    "Webページを閲覧する際、ブラウザは画像、スタイルシート（CSS）、JavaScriptファイルなど、多数のリソースを取得します。",
    "これらのリソースは頻繁には変更されないため、毎回サーバからダウンロードすると非効率です。",
    "そこでHTTPではキャッシングという仕組みを導入し、これらのリソースを一時的にローカル（ブラウザやOSのキャッシュ）に保存します。",
    "次回アクセス時に、ブラウザはまずHEADリクエストを使って、対象リソースが更新されたかどうかを確認します。",
    "このときに使われるのがHTTPレスポンスヘッダーの `Last-Modified` フィールドで、リソースの最終更新日時を示します。",
    "もしその日時が以前取得したものと同じであれば、保存済みのキャッシュをそのまま利用できます。",
    "これにより、通信量の削減、表示速度の向上、サーバ負荷の軽減といった効果が得られ、効率的なWeb閲覧が可能になります。"
  ],
  "originalSlideText": "❑ Lokales Caching mittels GET, HEAD und dem Last-\nModified Header Feld\n❑ Viele Objekte beim Besuch einer Website immer wieder \nbenötigt: Bilder, Sounds, CSS, JS, … → selten geändert\n❑ Einmal geladen (mit GET) kann mittels HEAD und dem \nempfangenen HTTP Reponse Header der Zeitpunkt der \nletzten Bearbeitung bestimmt werden \n Pro Objekt muss nur der HTTP Response Header übertragen \nwerden, NICHT das ganze Objekt",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 25,
  "questionDe": "(s31) Welche Komponenten gehören zur Architektur eines Webbrowsers und welche Aufgaben erfüllen sie?",
  "questionJa": "Webブラウザのアーキテクチャにはどのような構成要素があり、それぞれどのような役割を持つか？",
  "answerDe": [
    "Die Folie enthält keine Details, sondern verweist nur auf 'Browser-Architektur'.",
    "Typische Komponenten sind: Benutzeroberfläche, Rendering-Engine, Netzwerkschicht, JavaScript-Interpreter, Datenpersistenz."
  ],
  "answerJa": [
    "スライドには詳細な説明はなく、『ブラウザのアーキテクチャ』とだけ記載されている。",
    "一般的な構成要素には、ユーザーインターフェース、レンダリングエンジン、ネットワーク層、JavaScript実行環境、データ保存機能などがある。"
  ],
  "explanationDe": [
    "Obwohl die Folie keine Inhalte zeigt, ist die Architektur eines Webbrowsers ein zentraler Bestandteil der Webtechnologien.",
    "Ein typischer Browser besteht aus mehreren Modulen:",
    "1. Die Benutzeroberfläche (UI): zeigt die Adresseingabe, Tabs und Schaltflächen an.",
    "2. Die Rendering-Engine: interpretiert HTML, CSS und wandelt sie in sichtbare Inhalte um (z. B. Blink oder Gecko).",
    "3. Die Netzwerkschicht: kümmert sich um das Senden und Empfangen von HTTP-Anfragen und -Antworten.",
    "4. Der JavaScript-Interpreter: führt Skripte aus, die auf der Webseite enthalten sind (z. B. V8 in Chrome).",
    "5. Speicherverwaltung: sorgt für lokale Speicherung von Cookies, Cache, Verlauf und Einstellungen."
  ],
  "explanationJa": [
    "このスライド自体には詳細な内容はありませんが、WebブラウザのアーキテクチャはWeb技術において重要なトピックです。",
    "一般的なWebブラウザは以下のような複数のモジュールで構成されています：",
    "1. ユーザーインターフェース（UI）：アドレスバー、タブ、ボタンなどの表示や操作部分を担当します。",
    "2. レンダリングエンジン：HTMLやCSSを解釈して、画面にWebページを描画します（例：Blink、Geckoなど）。",
    "3. ネットワーク層：HTTPリクエスト・レスポンスの送受信を処理します。",
    "4. JavaScript実行エンジン：Webページ内に記述されたJavaScriptコードを実行します（例：ChromeのV8）。",
    "5. ストレージ管理：Cookie、キャッシュ、閲覧履歴、ユーザー設定などを保存・管理します。"
  ],
  "originalSlideText": "Browser-Architektur",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 26,
  "questionDe": "(s32) Warum ist der Dateiaustausch im Internet kompliziert und welche Probleme löst FTP?",
  "questionJa": "なぜインターネット上でのファイル交換は複雑なのか？そしてFTPはどのような問題を解決するのか？",
  "answerDe": [
    "Computer im Internet sind sehr heterogen: verschiedene Architekturen und Betriebssysteme.",
    "Unterschiedliche Interpretation von Dateiendungen und Zeilenenden in Textdateien.",
    "FTP behandelt diese Unterschiede und ermöglicht den Austausch beliebiger Daten zwischen verschiedenen Computern."
  ],
  "answerJa": [
    "インターネット上のコンピュータは異なるアーキテクチャやOSを持ち、多様である。",
    "テキストファイルの拡張子や改行コードなどの扱いが異なる。",
    "FTPはこうした違いを吸収し、任意のコンピュータ間でのデータ交換を可能にする。"
  ],
  "explanationDe": [
    "Der Dateiaustausch über das Internet ist schwierig, weil Computer sehr verschieden sind: Sie verwenden unterschiedliche Betriebssysteme (z. B. Windows, Linux, macOS), unterschiedliche Dateisysteme und Zeichencodierungen.",
    "Besonders bei Textdateien treten Probleme auf: Unix-Systeme verwenden `\\n` als Zeilenumbruch, Windows dagegen `\\r\\n`. Auch die Art, wie Dateiendungen interpretiert oder verarbeitet werden, ist unterschiedlich.",
    "Zudem unterscheiden sich die internen Datenformate – was auf einem System korrekt dargestellt wird, kann auf einem anderen System unlesbar oder fehlerhaft sein.",
    "FTP (File Transfer Protocol) wurde entwickelt, um diese Heterogenität zu überbrücken.",
    "Es stellt Funktionen bereit, mit denen beliebige Dateien – egal ob Text, Binärdaten, Bilder oder Programme – zwischen unterschiedlichen Plattformen ausgetauscht werden können.",
    "Dabei übernimmt FTP Aufgaben wie die korrekte Interpretation von Zeilenenden, Steuerzeichen oder Dateiattributen.",
    "So wird sichergestellt, dass eine Datei, die auf einem System erstellt wurde, auch auf einem völlig anderen System korrekt ankommt und nutzbar ist."
  ],
  "explanationJa": [
    "インターネットを介してファイルを交換するのが難しいのは、コンピュータがそれぞれ異なる環境（OSやファイルシステム、文字コードなど）で動作しているためです。",
    "特にテキストファイルでは、UNIX系は `\\n` を改行に使い、Windowsでは `\\r\\n` を使うなど、互換性のない点が多くあります。",
    "また、ファイルの拡張子の扱いや、データの内部構造の違いによって、ある環境で正常なファイルが、別の環境では正しく読めないこともあります。",
    "こうした違いを吸収し、異なるシステム間での安定したファイル交換を実現するために設計されたのがFTP（File Transfer Protocol）です。",
    "FTPは、テキストファイル・画像・実行ファイルなど、あらゆる種類のファイルを転送でき、通信時に必要なデータ変換も自動で行います。",
    "たとえば、改行コードの変換や、制御文字・ファイル属性の解釈といった処理を行い、他のOSでも正しく使える状態でファイルを届けます。",
    "その結果、Linuxで作ったファイルをWindowsで問題なく開いたり、異なる言語・文化圏のシステム間でも安定した通信が可能になります。"
  ],
  "originalSlideText": "❑ Computer im „Internet“ sind sehr heterogen, da mehrere\n Rechnerarchitekturen\n Betriebssysteme\n Interpretation von Dateiendungen (\\n vs. \\r\\n)\n Darstellungen von Zeilenenden in Textdateien\n …\n❑ Dateiaustausch im Internet ist komplex → FTP behandelt \nall diese Probleme und ermöglicht den Austausch von \nbeliebigen Daten zwischen beliebigen Computern",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 27,
  "questionDe": "(s33) Welche Funktionen bietet FTP zur Unterstützung des Dateiaustauschs im Internet?",
  "questionJa": "FTPはインターネット上でのファイル交換を支援するためにどのような機能を提供しているか？",
  "answerDe": [
    "Austausch beliebiger Dateien.",
    "Unterstützung für Upload und Download.",
    "Authentifizierung und Rechteverwaltung.",
    "Verzeichnisnavigation.",
    "Textbasierte Kontrollnachrichten.",
    "Versteckt Unterschiede zwischen Betriebssystemen und Technologien."
  ],
  "answerJa": [
    "あらゆる種類のファイルを送受信可能。",
    "アップロードとダウンロードの両方をサポート。",
    "ユーザ認証とアクセス権の管理。",
    "ディレクトリの移動や操作が可能。",
    "制御メッセージはテキスト形式。",
    "OSや技術の違いを抽象化・吸収してくれる。"
  ],
  "explanationDe": [
    "FTP (File Transfer Protocol) ist ein bewährtes Protokoll zum Austausch von Dateien zwischen Computern im Internet – unabhängig von Betriebssystem und Dateityp.",
    "Es ermöglicht sowohl das Hochladen (Upload) als auch das Herunterladen (Download) von Dateien.",
    "Ein wichtiger Bestandteil ist die Authentifizierung: Benutzer müssen sich oft mit Benutzernamen und Passwort anmelden, bevor sie auf Inhalte zugreifen dürfen.",
    "Zudem erlaubt FTP die Navigation innerhalb von Verzeichnissen auf dem Server, z. B. mit Befehlen wie `cd`, `ls`, `mkdir`.",
    "Die Kommunikation zwischen Client und Server erfolgt über textbasierte Steuerbefehle, was eine einfache Interpretation durch Menschen und Programme ermöglicht.",
    "Ein weiterer Vorteil: FTP abstrahiert die Unterschiede zwischen Betriebssystemen, indem es intern einheitliche Datenformate verwendet und systemabhängige Besonderheiten behandelt.",
    "Dadurch können z. B. Dateien von einem Linux-Server problemlos auf einen Windows-Client übertragen werden – inklusive richtiger Zeilenenden und Dateiattribute."
  ],
  "explanationJa": [
    "FTP（File Transfer Protocol）は、異なるOSやファイル形式に関係なく、インターネット上でファイルをやりとりするための標準的なプロトコルです。",
    "このプロトコルでは、ファイルのアップロード（サーバに送信）とダウンロード（サーバから取得）の両方を行うことができます。",
    "ユーザ認証の仕組みがあり、ユーザー名やパスワードを用いてアクセス制御が可能です。",
    "また、FTPクライアントを使ってサーバ上のディレクトリ構造をたどり、移動（cd）、一覧表示（ls）、ディレクトリ作成（mkdir）なども可能です。",
    "制御のためのコマンドや応答はすべてテキストベースで、人間にも読みやすく、スクリプトでも扱いやすい設計になっています。",
    "FTPは、OSごとの違い（例：改行コード、ファイル名の扱い、権限設定など）を内部的に吸収してくれるため、異なるシステム間でも安全にファイル転送が行えます。",
    "たとえばLinuxで作成したファイルをWindowsに転送する場合でも、必要な変換をFTPが自動的に処理してくれます。"
  ],
  "originalSlideText": "❑ Eigenschaften von FTP\n Beliebige Dateien austauschen\n Upload und Download\n Authentifizierung und Rechteverwaltung\n Verzeichnisse\n Kontrollnachrichten sind Text-basiert\n Versteckt die Heterogenität der verschiedenen \nBetriebssysteme und Technologien",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 28,
  "questionDe": "(s34) Welche zwei Verbindungen nutzt FTP und welche Aufgaben erfüllen sie?",
  "questionJa": "FTPは2つの通信チャネルを使用するが、それぞれどのような役割を持っているか？",
  "answerDe": [
    "FTP verwendet zwei Verbindungen: Control Connection und Data Connection.",
    "Control Connection: für Authentifizierung, Datei-Listing und Befehle wie Upload/Download.",
    "Data Connection: für den tatsächlichen Datenaustausch.",
    "Die Control Connection wird vom Client zum Server aufgebaut.",
    "Der Client öffnet einen Listening-Socket für die Data Connection.",
    "Der Port für die Data Connection wird dem Server über die Control Connection mitgeteilt."
  ],
  "answerJa": [
    "FTPは制御用とデータ転送用の2つの接続を使用する：Control ConnectionとData Connection。",
    "Control Connectionは認証、ディレクトリ一覧、アップロード／ダウンロードの命令に使われる。",
    "Data Connectionは実際のファイルデータの送受信に使われる。",
    "Control Connectionはクライアントからサーバへ接続される。",
    "クライアントはData Connection用のリスニングソケットを開く。",
    "そのポート番号はControl Connectionを通じてサーバに通知される。"
  ],
  "explanationDe": [
    "FTP nutzt ein Zwei-Kanal-Modell, um Steuerinformationen und Nutzdaten voneinander zu trennen.",
    "Die erste Verbindung ist die sogenannte Control Connection. Sie wird vom Client zum Server aufgebaut und bleibt während der gesamten FTP-Sitzung aktiv.",
    "Über die Control Connection laufen Befehle wie `USER`, `PASS`, `LIST`, `RETR`, `STOR` sowie Statusnachrichten – alle textbasiert.",
    "Die zweite Verbindung ist die Data Connection. Sie wird für jeden Dateiübertrag einzeln geöffnet und dient ausschließlich dem Austausch von Nutzdaten wie Dateien oder Verzeichniseinträgen.",
    "Im sogenannten aktiven FTP-Modus öffnet der Client einen Socket (Listening-Port), auf den der Server sich zur Datenübertragung verbindet.",
    "Der Client übermittelt dem Server über die Control Connection, an welcher IP-Adresse und welchem Port die Data Connection aufgebaut werden soll.",
    "Diese Trennung verbessert die Steuerbarkeit und ermöglicht parallele oder getrennte Behandlung von Steuerung und Übertragung – eine Struktur, die sich bis heute bewährt hat."
  ],
  "explanationJa": [
    "FTP（File Transfer Protocol）は、制御用とデータ転送用の2種類の接続を使用する「2チャネル構成」を持っています。",
    "1つ目は Control Connection（制御接続）で、これはセッション中ずっと維持され、認証（USER、PASS）やコマンド（LIST、RETR、STORなど）、状態メッセージの送受信に使われます。",
    "2つ目は Data Connection（データ接続）で、こちらは実際のファイルデータやディレクトリ情報の転送にのみ使用されます。",
    "データ転送のたびにこのData Connectionが新しく確立されます。",
    "アクティブモードの場合、クライアントがリスニング用のソケット（ポート）を開き、サーバがそこに接続してデータを送信します。",
    "どのポートで待ち受けるかは、Control Connectionを使ってクライアントからサーバへ通知されます。",
    "このように、制御とデータを明確に分離することで、通信の安定性や柔軟性が向上し、FTPの信頼性ある動作が実現されています。"
  ],
  "originalSlideText": "❑ FTP nutzt zwei Kommunikationskanäle\n1. Control Connection\n• Authentifizierung\n• Anforderung eines File Listing\n• Anforderung eines Upload / Download\n• Client kontaktiert Server\n2. Data Connection\n• Genutzt für den wirklichen Austausch von Daten\n• Eigentliche FTP-Client öffnet einen Listening-Socket zu dem der \nFTP-Server sich verbindet\n• FTP-Client teilt Server über Control Connection den offenen Port \nmit",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 29,
  "questionDe": "(s35) Welche weiteren Details oder Abläufe sind im FTP-Protokoll zu beachten?",
  "questionJa": "FTPプロトコルにおけるその他の重要な詳細や処理の流れには何があるか？",
  "answerDe": [
    "Die Folie enthält keine neuen Inhalte, verweist jedoch auf Fortsetzung der vorherigen Themen.",
    "Wichtig ist: FTP nutzt separate Kanäle für Steuerung und Daten.",
    "Der Verbindungsaufbau und die Portkommunikation sind abhängig vom Modus (aktiv/passiv)."
  ],
  "answerJa": [
    "このスライドに新たな内容は記載されていないが、前スライドの補足と見られる。",
    "重要な点は、FTPが制御用とデータ用の2つのチャネルを分けて使っていることである。",
    "接続の確立やポートの使い方は、アクティブモードかパッシブモードかによって異なる。"
  ],
  "explanationDe": [
    "Obwohl die Folie keine expliziten neuen Informationen enthält, ist es wichtig, die vollständige Funktionsweise von FTP zu verstehen.",
    "FTP kann in zwei Betriebsmodi verwendet werden: aktiv und passiv. Im aktiven Modus öffnet der Client einen Port für die Data Connection, im passiven Modus öffnet der Server den Port.",
    "Der passive Modus wird häufig bevorzugt, da Firewalls auf Client-Seite eingehende Verbindungen blockieren könnten.",
    "Sowohl Control als auch Data Connection nutzen TCP als Transportprotokoll und erfordern daher eine zuverlässige Verbindung.",
    "Die Kommunikation erfolgt über klar definierte Textbefehle (z. B. USER, PASS, RETR, STOR), was die Protokollierung und Fehleranalyse erleichtert.",
    "Außerdem ist zu beachten, dass viele FTP-Server Authentifizierung und Rechteverwaltung strikt umsetzen – etwa für den anonymen Zugriff vs. benutzerspezifischen Zugriff.",
    "Moderne Varianten wie FTPS oder SFTP (nicht klassisch FTP) bieten zusätzliche Sicherheit, sollten aber nicht mit dem klassischen FTP verwechselt werden."
  ],
  "explanationJa": [
    "このスライドには新しい記述はありませんが、FTPの動作をより正確に理解するには、モードの違いやセキュリティの観点も重要です。",
    "FTPにはアクティブモードとパッシブモードの2種類があり、アクティブモードではクライアントがポートを開いてサーバが接続してくる一方、パッシブモードではサーバがポートを開き、クライアントが接続します。",
    "ファイアウォールの制限を受けにくいことから、パッシブモードが推奨されることが多いです。",
    "Control Connection・Data Connectionともに信頼性のあるTCPを使用しており、エラーの発生を最小限に抑えます。",
    "通信は `USER`, `PASS`, `RETR`, `STOR` などのテキスト形式のコマンドを通じて行われ、ログの記録やデバッグがしやすくなっています。",
    "また、多くのFTPサーバでは、匿名アクセスかユーザー認証ありアクセスかによって操作権限が厳格に管理されています。",
    "なお、FTPSやSFTPなどのセキュアなファイル転送方式は、FTPとは別プロトコルであり、用途や実装も異なるため混同しないよう注意が必要です。"
  ],
  "originalSlideText": "File Transfer Protocol (4)",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 30,
  "questionDe": "(s36) Welche Protokolle ermöglichen den E-Mail-Dienst im Internet und welche Aufgaben erfüllen sie?",
  "questionJa": "インターネット上のEメールサービスを構成するプロトコルには何があり、それぞれどのような役割を果たすか？",
  "answerDe": [
    "SMTP (Simple Mail Transfer Protocol): Überträgt E-Mails über das Internet zur Mailbox des Empfängers.",
    "POP3 / IMAP: Ermöglichen den Fernzugriff auf die Mailbox des Nutzers.",
    "RFC2822 und MIME: Definieren die Darstellung und Kodierung von E-Mails (inkl. Binärdaten)."
  ],
  "answerJa": [
    "SMTP（Simple Mail Transfer Protocol）：メールを送信し、受信者のメールボックスへ届ける。",
    "POP3 / IMAP：ユーザが自分のメールボックスにリモートアクセスするためのプロトコル。",
    "RFC2822とMIME：メールの表現形式とエンコード（特にバイナリデータの処理）を定義する。"
  ],
  "explanationDe": [
    "E-Mail-Dienste im Internet basieren auf mehreren standardisierten Protokollen, die unterschiedliche Aufgaben übernehmen.",
    "SMTP (Simple Mail Transfer Protocol) dient dem Versand von E-Mails von einem Client an den Mailserver sowie zwischen Mailservern. Es regelt den Transport der Nachrichten, jedoch nicht deren Abruf durch den Empfänger.",
    "Zum Lesen von E-Mails kommen POP3 (Post Office Protocol v3) und IMAP (Internet Message Access Protocol) zum Einsatz. POP3 lädt Mails lokal herunter, während IMAP serverbasierten Zugriff mit Synchronisierung erlaubt.",
    "Damit Nachrichten auch komplexe Inhalte wie Anhänge oder Bilder enthalten können, werden sie nach den Formaten RFC2822 und MIME (Multipurpose Internet Mail Extensions) kodiert.",
    "MIME erweitert den klassischen E-Mail-Standard, indem es ermöglicht, verschiedene Content-Typen (z. B. Text, HTML, Audio, Video) in einer Nachricht zu verpacken.",
    "Durch die Kombination dieser Protokolle kann eine E-Mail verfasst, über das Internet transportiert, beim Empfänger gespeichert und schließlich gelesen oder heruntergeladen werden.",
    "Ohne diese Arbeitsteilung und Standardisierung wäre die weltweite, interoperable Nutzung von E-Mail nicht möglich."
  ],
  "explanationJa": [
    "インターネットでEメールを利用するには、複数の標準プロトコルが連携して働いています。",
    "まず、SMTP（Simple Mail Transfer Protocol）はメールの送信に使われます。クライアントからサーバへ、またはサーバ同士でのメール転送を担当します。受信者が読むための仕組みではありません。",
    "メールを読むには、POP3またはIMAPという受信用プロトコルが使われます。POP3はメールをローカルにダウンロードして保存する方式、IMAPはサーバにメールを保持したまま読み書きする方式です。",
    "メール本文や添付ファイルの構成には、RFC2822とMIMEという規格が使われます。MIMEは、テキストだけでなく画像・動画・HTMLなど多様なコンテンツを含むメールを可能にします。",
    "これらのプロトコルにより、ユーザーはメールを作成・送信・保存・読み取りといった一連の操作をスムーズに行えるようになっています。",
    "たとえば、ユーザーが写真付きのメールを送る場合、SMTPで送信し、MIMEで写真をエンコードし、受信者はIMAPで読み取るといった形になります。",
    "このように役割分担された複数のプロトコルが協調することで、Eメールは異なるシステム間でも円滑に利用できるグローバルな通信手段となっています。"
  ],
  "originalSlideText": "❑ Ähnlich zu WWW gibt es mehrere Standards die im \nZusammenspiel den Dienst E-Mail ermöglichen\n Simple Mail Transfer Protocol (SMTP)\n• Transfer von E-Mails über das Internet zur Mailbox des \nEmpfängers\n POP3 / IMAP\n• Remote-Zugriff auf die Mailbox des Nutzers\n Email Representation Standards (RFC2822 und MIME)\n• Encodierung (Binärdarstellung) der Nachrichten",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 31,
  "questionDe": "(s37) Wie funktioniert der E-Mail-Versand und -Empfang technisch, und welche Komponenten sind beteiligt?",
  "questionJa": "Eメールの送信と受信は技術的にどのように行われ、どのような構成要素が関与しているか？",
  "answerDe": [
    "Nutzer hat eine Mailbox bei seinem ISP.",
    "Beim Versand: E-Mail-Client spricht SMTP mit dem Server des ISP.",
    "Der Server nutzt ebenfalls SMTP, um die Nachricht zum Server des Empfängers zu transportieren.",
    "Beim Empfang: Der E-Mail-Client verwendet POP3 oder IMAP zum Zugriff auf die Mailbox beim ISP."
  ],
  "answerJa": [
    "ユーザはISPにメールボックスを持つ。",
    "送信時：EメールクライアントがISPのサーバとSMTPで通信する。",
    "そのサーバはSMTPで受信者側のサーバへメールを転送する。",
    "受信時：クライアントはPOP3またはIMAPでISPのメールボックスにアクセスする。"
  ],
  "explanationDe": [
    "Beim E-Mail-Versand und -Empfang arbeiten mehrere Komponenten zusammen – darunter der E-Mail-Client, die Mailserver des Internetanbieters (ISP) sowie Protokolle wie SMTP, POP3 und IMAP.",
    "Zunächst besitzt der Nutzer eine Mailbox beim Internetdienstanbieter. Diese ist ein Speicherort für eingehende Nachrichten.",
    "Zum Senden schreibt der Nutzer eine Nachricht im E-Mail-Client (z. B. Outlook oder Thunderbird). Dieser kontaktiert per SMTP den Mailserver des eigenen ISPs.",
    "Der ISP-Server leitet die Nachricht über das Internet an den Mailserver des Empfängers weiter – ebenfalls über SMTP.",
    "Der Empfänger wiederum verwendet seinen eigenen E-Mail-Client, um mit POP3 (Download) oder IMAP (Online-Zugriff) auf seine Mailbox beim ISP zuzugreifen und die Nachricht zu lesen.",
    "Der Unterschied: POP3 lädt Nachrichten auf das Gerät herunter, während IMAP sie auf dem Server belässt und synchronisiert – ideal für mehrere Geräte.",
    "Diese Struktur erlaubt eine klare Trennung von Transport, Speicherung und Anzeige und macht E-Mail zu einem robusten und weltweit interoperablen Kommunikationsmittel."
  ],
  "explanationJa": [
    "Eメールの送受信には、Eメールクライアント、インターネットプロバイダ（ISP）のメールサーバ、および複数の通信プロトコル（SMTP、POP3、IMAP）が関与します。",
    "まず、ユーザーはISPにメールボックス（受信用の保管場所）を持っています。",
    "送信の際、ユーザーがEメールクライアント（例：OutlookやThunderbird）でメールを作成し、それをSMTPを使って自分のISPのメールサーバに送ります。",
    "ISPのメールサーバは、SMTPでインターネット経由にて相手のメールサーバにメールを転送します。",
    "受信者側では、自分のメールクライアントがPOP3またはIMAPというプロトコルを使って、ISPのメールサーバからメールを取得します。",
    "POP3はメールをローカルにダウンロードして保存する方式、IMAPはサーバ上にメールを保持しながら同期を行う方式で、複数端末の利用に適しています。",
    "このように、送信、保管、受信という各フェーズでプロトコルと役割が明確に分かれており、Eメールが信頼性の高い国際的な通信手段として機能する基盤となっています。"
  ],
  "originalSlideText": "❑ Nutzer besitzt Mailbox bei seinem ISP\n E-Mail-Versand: E-Mail Client des Nutzers spricht SMTP mit \nServer des ISP, dieser SMTP mit dem Server des Empfängers\n E-Mail lesen: E-Mail Client spricht POP3 oder IMAP mit dem \nServer des ISP",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 32,
  "questionDe": "(s38) Welche Eigenschaften hat SMTP und wie werden binäre Inhalte in E-Mails übertragen?",
  "questionJa": "SMTPにはどのような特徴があり、バイナリデータはどのようにEメールで送信されるのか？",
  "answerDe": [
    "SMTP kann nur Text übertragen – sowohl für Kontroll- als auch Nutzdaten.",
    "Servernachrichten beginnen mit einem numerischen Code.",
    "Binäre Inhalte werden im Body der E-Mail mit MIME encodiert."
  ],
  "answerJa": [
    "SMTPは制御メッセージも本文もテキストのみを扱う。",
    "サーバからのメッセージは数値コードで始まる。",
    "バイナリデータはMIMEを用いてEメール本文内でエンコードされる。"
  ],
  "explanationDe": [
    "SMTP (Simple Mail Transfer Protocol) ist auf die Übertragung von reinem Text ausgelegt. Das betrifft sowohl die Steuerbefehle zwischen Client und Server als auch den Inhalt der eigentlichen Nachricht.",
    "Serverantworten bestehen aus numerischen Statuscodes (z. B. 250 für OK, 550 für Fehler) und kurzen Klartext-Erklärungen.",
    "Da SMTP keine Binärdaten direkt übertragen kann, musste ein Mechanismus geschaffen werden, um z. B. Bilder, PDFs oder Anhänge als Teil einer E-Mail versenden zu können.",
    "Hier kommt MIME (Multipurpose Internet Mail Extensions) ins Spiel. MIME erlaubt es, binäre Daten in Textdarstellung (z. B. Base64) umzuwandeln und im Nachrichtentext zu verpacken.",
    "Diese kodierten Daten werden dann zusammen mit passenden MIME-Headern übertragen, damit der Empfänger weiß, wie sie zu dekodieren sind.",
    "Beispiel: Ein Bild wird als Base64-String in der E-Mail eingefügt und kann vom E-Mail-Client automatisch wieder in eine Bilddatei umgewandelt werden.",
    "MIME ist heute ein unverzichtbarer Bestandteil moderner E-Mail-Systeme, da nahezu alle E-Mails Anhänge oder Formatierungen enthalten."
  ],
  "explanationJa": [
    "SMTP（Simple Mail Transfer Protocol）は、元々テキスト情報の送信専用に設計されたプロトコルです。そのため、通信の制御メッセージも、メール本文の内容もすべてテキストでやり取りされます。",
    "サーバからの応答は数値ステータスコード（例：250 OK、550 エラーなど）と、簡単なメッセージから成ります。",
    "しかし、画像やPDF、文書ファイルなどのバイナリデータをそのまま送信することはできません。そのため、こうしたデータをメールで送るには変換が必要です。",
    "この目的のために用いられるのが MIME（Multipurpose Internet Mail Extensions）です。MIMEは、バイナリデータをBase64などの文字列形式にエンコードし、テキストとして本文に埋め込むことを可能にします。",
    "加えて、MIMEヘッダーによってデータの種類（画像・音声・ドキュメントなど）や処理方法を指定します。",
    "たとえば、画像ファイルをBase64文字列に変換して本文に含めることで、受信側のメールソフトがそれをデコードし、画像として再構成できます。",
    "このように、MIMEは現在のEメール運用に不可欠な技術となっており、添付ファイルやHTML形式のメールなど、複雑な内容を実現しています。"
  ],
  "originalSlideText": "❑ Kann nur Text übertragen: \nsowohl Kontroll-\nNachrichten als Nutzdaten\n❑ Server-Nachrichten \nbeginnen mit einem \nnumerischen Code\n❑ Beliebige Dateien mit \nMIME im Body der E-Mail \nencodiert",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 33,
  "questionDe": "(s39) Was ist das Domain Name System (DNS) und wie funktioniert die Namensauflösung?",
  "questionJa": "DNS（ドメインネームシステム）とは何か？名前解決はどのように行われるか？",
  "answerDe": [
    "DNS weist IP-Adressen menschenlesbare, hierarchische Namen zu – sogenannte Domains.",
    "Domains bestehen aus Labels, die durch Punkte getrennt sind (z. B. www.uni-leipzig.de).",
    "Die Namensauflösung wandelt Domains in IP-Adressen um.",
    "Domains werden von rechts nach links aufgelöst.",
    "Die Root-Zone ist durch einen Punkt (.) markiert.",
    "Jedem Label ist ein DNS-Server zugeordnet, der für das nächste Label zuständig ist."
  ],
  "answerJa": [
    "DNSはIPアドレスに対して人間が読める階層的な名前（ドメイン名）を対応づける仕組みである。",
    "ドメイン名はピリオドで区切られたラベルで構成される（例：www.uni-leipzig.de）。",
    "名前解決とはドメイン名をIPアドレスに変換する処理である。",
    "ドメイン名は右から左に順に解決される。",
    "最上位のルートゾーンは「.（ドット）」で表される。",
    "各ラベルには次の階層を担当するDNSサーバが割り当てられている。"
  ],
  "explanationDe": [
    "Das Domain Name System (DNS) ist ein hierarchisches, verteiltes System zur Übersetzung von Domainnamen (z. B. www.uni-leipzig.de) in numerische IP-Adressen (z. B. 139.18.1.1), die Computer verstehen.",
    "Da IP-Adressen schwer zu merken sind, können Nutzer statt einer Zahl einen Namen verwenden – ähnlich wie ein Telefonbuch für das Internet.",
    "Ein Domainname besteht aus mehreren Labels, die durch Punkte getrennt sind. Dabei wird von rechts (Root-Zone) nach links aufgelöst: zuerst die Top-Level-Domain (z. B. .de), dann Second-Level (uni-leipzig), dann Subdomains (informatik, www).",
    "Jeder Schritt in der Auflösung erfolgt über einen zuständigen DNS-Server, der die Adresse des nächsten Servers kennt – ein Prozess, der oft rekursiv oder iterativ abläuft.",
    "Beispiel: Um www.uni-leipzig.de aufzulösen, fragt der Resolver zunächst nach dem .de-Server, dann nach dem für uni-leipzig.de, dann nach www.uni-leipzig.de.",
    "Die oberste Ebene ist die sogenannte Root-Zone, die durch einen Punkt dargestellt wird. Sie verweist auf die zuständigen TLD-Server.",
    "Dieses hierarchische Modell sorgt für Skalierbarkeit und schnelle Verfügbarkeit weltweit – DNS ist eine der zentralen Komponenten des Internets."
  ],
  "explanationJa": [
    "DNS（Domain Name System）は、Webサイトなどのドメイン名を、コンピュータが通信に使う数値形式のIPアドレスに変換するための分散型・階層型のシステムです。",
    "IPアドレスは覚えにくいため、ユーザーは www.uni-leipzig.de のような覚えやすい名前を使い、DNSがそれを対応する数値に変換してくれます。",
    "ドメイン名は複数の「ラベル」によって構成され、それぞれはピリオド（.）で区切られます。名前解決は右から左へ行われます。",
    "例えば www.uni-leipzig.de であれば、まず .de（トップレベルドメイン）、次に uni-leipzig（セカンドレベル）、最後に www（サブドメイン）という順に解決されます。",
    "各階層ごとにDNSサーバが存在し、それぞれ次の階層のサーバ情報を保持しています。",
    "名前解決の最初のステップは「ルートゾーン（.）」で、これは全ドメイン解決の起点です。ここから順番に辿っていくことで、最終的に目的のIPアドレスが得られます。",
    "このように、DNSはインターネットにおける“電話帳”の役割を果たし、世界中のユーザーに対してスケーラブルかつ高速な名前解決を提供しています。"
  ],
  "originalSlideText": "❑ DNS weist IP Adressen lesbare, hierarchische Namen zu →\nDomains\n Einzelne Label durch „.“ voneinander getrennt\n Z.B. www.uni-leipzig.de\n❑ Namensauflösung: Verfahren um Domains zu IP-Adressen \numzuwandeln\n❑ Domains werden von rechts nach links aufgelöst\n Leere Domain „.“ ist die Root Zone, 1. Label die Top-Level \nDomain (TLD; z.B. de oder com)\n Jedem Label sind DNS-Server zugeordnet, die mitteilen \nkönnen, welche DNS-Server für das nächste (linke) Label \nzuständig sind",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 34,
  "questionDe": "(s40) Wie ist die Verwaltung des DNS organisiert und was bedeutet 'authoritativer Server'?",
  "questionJa": "DNSの管理はどのように組織されており、『オーソリティティブサーバ（権威サーバ）』とは何を意味するか？",
  "answerDe": [
    "Die DNS-Verwaltung ist dezentral organisiert.",
    "Organisationen oder Personen beantragen Domains bei Registrierungsstellen (z. B. DENIC für .de).",
    "Man muss mindestens zwei DNS-Server bereitstellen.",
    "Domains können Subdomains erstellen und deren Verwaltung delegieren.",
    "Ein autoritativer Server ist für das linkeste Label (die konkrete Subdomain) zuständig."
  ],
  "answerJa": [
    "DNSの管理は分散型に構成されている。",
    "組織や個人は、登録機関（例：.deの場合はDENIC）にドメインを申請する。",
    "少なくとも2台のDNSサーバを用意する必要がある。",
    "取得したドメインの下にサブドメインを作成し、他者にその管理を委任することができる。",
    "『オーソリティティブサーバ』とは、最左端のラベル（具体的なサブドメイン）に対して権限を持つサーバのことである。"
  ],
  "explanationDe": [
    "Die Verwaltung des Domain Name Systems (DNS) ist nicht zentralisiert, sondern dezentral organisiert. Das bedeutet, dass viele Organisationen weltweit für verschiedene Namensbereiche verantwortlich sind.",
    "Wenn eine Organisation oder Einzelperson eine Domain registrieren möchte, tut sie das bei einer zuständigen Registrierungsstelle. Für .de-Domains ist beispielsweise DENIC (Deutschland) zuständig.",
    "Die Registrierungsstelle verlangt in der Regel mindestens zwei DNS-Server, die die Namensauflösung für die gewünschte Domain zuverlässig bereitstellen.",
    "Nach der Registrierung kann der Domaininhaber beliebig viele Subdomains einrichten, z. B. `mail.informatik.uni-leipzig.de`, und deren Verwaltung an Dritte übergeben.",
    "Jeder DNS-Server ist für einen bestimmten Teilbaum der Namenshierarchie zuständig. Der autoritative Server ist derjenige, der die offizielle, gültige Antwort für eine bestimmte Domain geben darf.",
    "Beispiel: Der DNS-Server von `informatik.uni-leipzig.de` ist autoritativ für diese Subdomain und enthält deren endgültige IP-Zuordnung.",
    "Dieses Modell ermöglicht flexible Delegation, Redundanz und weltweite Skalierbarkeit des DNS."
  ],
  "explanationJa": [
    "DNS（ドメインネームシステム）の管理は中央集権的ではなく、分散型の仕組みで構築されています。つまり、世界中の多数の組織がそれぞれ異なるドメイン階層の管理を担当しています。",
    "たとえば『.de』ドメインを取得したい場合、ドイツの管理団体であるDENICに申請する必要があります。",
    "登録の際には、最低でも2台のDNSサーバを用意することが求められます。これは可用性と信頼性の確保のためです。",
    "取得したドメインの下には自由にサブドメイン（例：informatik.uni-leipzig.de）を作成でき、それらの管理権限を別の組織に委任することも可能です。",
    "各DNSサーバには、その管理対象とするドメインがあり、その最上位のラベル（最も左の要素）に対して正式な情報を提供できるものが『オーソリティティブサーバ（権威DNSサーバ）』です。",
    "例えば、`informatik.uni-leipzig.de` の最終的なIPアドレス情報を持っているのが、そのオーソリティティブサーバとなります。",
    "このようにDNSは階層的かつ柔軟に委任管理されており、世界中のインターネットユーザーに安定した名前解決サービスを提供しています。"
  ],
  "originalSlideText": "❑ DNS-Verwaltung ist dezentral\n Unternehmen / natürliche Person bewirbt sich für eine \nbestimmte Domain, z.B. uni-leipzig.de, bei der zuständigen \nRegistrierungsstelle, z.B. DENIC für *.de\n• Muss mindestens zwei DNS-Server bereitstellen, die die \nNamensauflösung für *.uni-leipzig.de durchführen\n Uni Leipzig kann wiederum weitere Sub-Domains erstellen und \ndiesen anderen zur Verwaltung überlassen\n• Z.B. *.informatik.uni-leipzig.de\n❑ Der DNS-Server, der schlussendlich für das linkeste Label \nzuständig ist wird als authoritative bezeichnet",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 35,
  "questionDe": "(s41) Wie läuft die iterative Namensauflösung im DNS ab, und was passiert bei einem Beispiel wie rvs.informatik.uni-leipzig.de?",
  "questionJa": "DNSにおける反復的（イテレーティブ）な名前解決の流れはどのようになっており、例えば rvs.informatik.uni-leipzig.de の場合には何が起こるか？",
  "answerDe": [
    "Die Namensauflösung verläuft schrittweise von der Root-Zone bis zum Ziel.",
    "Beispiel rvs.informatik.uni-leipzig.de:",
    "1. DNS-Resolver fragt Root-Server nach .de.",
    "2. .de-Server verweist auf Server für uni-leipzig.de.",
    "3. uni-leipzig.de-Server verweist auf informatik.uni-leipzig.de.",
    "4. So weiter bis zur Zieladresse.",
    "DNS-Einträge werden dabei im Router oder beim ISP zwischengespeichert (Caching)."
  ],
  "answerJa": [
    "名前解決はルートゾーンから段階的に行われる。",
    "例：rvs.informatik.uni-leipzig.de の場合：",
    "1. DNSリゾルバがルートサーバに .de の問い合わせをする。",
    "2. .de サーバは uni-leipzig.de のサーバを教える。",
    "3. uni-leipzig.de サーバは informatik.uni-leipzig.de の情報を返す。",
    "4. このようにして最終的に目的のアドレスが得られる。",
    "これらの情報はルーターやISPでキャッシュされることもある。"
  ],
  "explanationDe": [
    "Im DNS erfolgt die Namensauflösung häufig iterativ – das bedeutet, dass der Resolver die Informationen Schritt für Schritt bei verschiedenen Servern einholt.",
    "Beim Beispiel `rvs.informatik.uni-leipzig.de` beginnt der Resolver bei einem Root-DNS-Server.",
    "Dieser kennt nicht die genaue Zieladresse, aber er verweist auf einen Server, der für die Top-Level-Domain `.de` zuständig ist.",
    "Der `.de`-Server verweist dann weiter auf einen Server für `uni-leipzig.de`, der wiederum auf `informatik.uni-leipzig.de` und schließlich auf `rvs.informatik.uni-leipzig.de` verweist.",
    "Der Resolver sammelt diese Informationen nacheinander ein – jeder Server kennt nur den nächsten Schritt im Namensbaum.",
    "Sobald die IP-Adresse des endgültigen Ziels bekannt ist, wird sie zurückgegeben und vom Resolver (z. B. im Betriebssystem oder Router) gespeichert.",
    "Dieses Caching verbessert die Geschwindigkeit bei wiederholten Zugriffen erheblich, da viele dieser Zwischenschritte eingespart werden können."
  ],
  "explanationJa": [
    "DNSにおける名前解決は、イテレーティブ（反復的）に行われることが多く、リゾルバが各階層ごとのDNSサーバに順番に問い合わせをします。",
    "例えば `rvs.informatik.uni-leipzig.de` の名前解決を行う場合、まず最初にDNSリゾルバはルートDNSサーバに問い合わせを行います。",
    "ルートサーバは、トップレベルドメイン（TLD）である `.de` を担当するDNSサーバのアドレスを返します。",
    "次に、`.de` サーバが `uni-leipzig.de` のサーバを、さらにそのサーバが `informatik.uni-leipzig.de` の情報を返し、最終的に `rvs` にたどり着きます。",
    "各DNSサーバはその階層の情報だけを持っており、次に問い合わせるべきサーバを案内する仕組みになっています。",
    "名前が完全に解決されてIPアドレスが得られたら、それはリゾルバやルーター、ISPのDNSキャッシュに保存され、再度の問い合わせが高速になります。",
    "この仕組みにより、DNSは階層的かつ効率的に大量の名前解決を処理できる構造になっています。"
  ],
  "originalSlideText": "❑ Namesauflösung verläuft iterativ\n❑ Beispiel rvs.informatik.uni-leipzig.de\n1. DNS Resolver fragt zunächst die DNS-Server der Root Zone \nwer für die TLD „de“ zuständig ist\n2. DNS Server von „de“ werden nach „uni-leipzig.de“ gefragt\n3. DNS Server von „uni-leipzig.de“ werden nach DNS-Server für \n„informatik.uni-leipzig.de“ gefragt\n4. …\n❑ DNS-Einträge werden gecached: im Router, beim ISP",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 36,
  "questionDe": "(s42) Können DNS-Server auch für Subdomains verantwortlich sein, und wie flexibel ist die Verwaltung?",
  "questionJa": "DNSサーバはサブドメインにも対応できるか？また、その管理はどの程度柔軟に行えるか？",
  "answerDe": [
    "Ja, DNS-Server können auch für Subdomains zuständig sein.",
    "Die Zuständigkeit kann flexibel konfiguriert werden."
  ],
  "answerJa": [
    "はい、DNSサーバはサブドメインの管理にも対応している。",
    "その管理権限は柔軟に設定可能である。"
  ],
  "explanationDe": [
    "Im Domain Name System ist es möglich, die Zuständigkeit für verschiedene Teile eines Domainnamens sehr granular zu delegieren.",
    "Das bedeutet: Eine Organisation, die eine Domain wie `uni-leipzig.de` besitzt, kann die Verantwortung für eine Subdomain wie `informatik.uni-leipzig.de` an eine andere Abteilung oder sogar ein anderes Unternehmen übertragen.",
    "Technisch geschieht das, indem im DNS-Eintrag für `uni-leipzig.de` auf andere DNS-Server verwiesen wird, die für die Subdomain zuständig sind.",
    "Diese DNS-Server werden dann als autoritativ für ihre Subdomain betrachtet und können selbstständig neue Subdomains einführen oder bestehende verwalten.",
    "Diese flexible Konfiguration ermöglicht z. B. Universitäten, Fakultäten oder Unternehmen, eigenständig Subbereiche zu verwalten, ohne zentrale Kontrolle aufzugeben.",
    "So bleibt die Skalierbarkeit erhalten und gleichzeitig die administrative Verantwortung klar verteilt.",
    "Insgesamt ist dies ein Schlüsselelement für die Skalierbarkeit und Dezentralisierung des DNS-Systems."
  ],
  "explanationJa": [
    "DNSでは、ドメイン名の構成要素ごとに管理権限を細かく分割して委譲することができます。",
    "たとえば、`uni-leipzig.de` というドメインを保有している大学が、その下位にある `informatik.uni-leipzig.de` の管理を情報学部に任せることが可能です。",
    "技術的には、親ドメインのDNSサーバに設定を追加し、特定のサブドメインに対して別のDNSサーバを指定することで実現されます。",
    "指定されたDNSサーバは、そのサブドメインのオーソリティティブサーバ（権威DNS）として機能し、さらにその下に新たなサブドメインを作成したり管理したりできます。",
    "このような仕組みにより、組織ごとに管理権限を柔軟に分けることができ、運用の自由度が高まります。",
    "同時に、DNS全体としてのスケーラビリティ（拡張性）と分散管理の原則も維持されます。",
    "このような柔軟な管理構造は、DNSが世界規模で安定して機能している大きな要因の一つです。"
  ],
  "originalSlideText": "❑ DNS-Server können auch \nfür Subdomains einer \nDomain zuständig sein\n Flexibel konfigurierbar",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 37,
  "questionDe": "(s43) Welche Arten von DNS-Einträgen gibt es und wozu dienen sie?",
  "questionJa": "DNSにはどのような種類のレコード（エントリ）があり、それぞれどのような目的で使われるか？",
  "answerDe": [
    "A-Records: enthalten IPv4-Adressen.",
    "AAAA-Records: enthalten IPv6-Adressen.",
    "MX-Records: geben den Mailserver einer Domain an.",
    "CNAME: Alias für eine andere Domain."
  ],
  "answerJa": [
    "Aレコード：IPv4アドレスを格納する。",
    "AAAAレコード：IPv6アドレスを格納する。",
    "MXレコード：ドメインのメールサーバを指定する。",
    "CNAME：他のドメイン名への別名（エイリアス）を設定する。"
  ],
  "explanationDe": [
    "Im DNS gibt es verschiedene Arten von Resource Records (RR), die unterschiedliche Informationen über eine Domain bereitstellen.",
    "A-Records (Address Records) verknüpfen einen Domainnamen mit einer IPv4-Adresse, z. B. `www.example.com → 192.0.2.1`.",
    "AAAA-Records sind das Äquivalent für IPv6-Adressen, z. B. `www.example.com → 2001:db8::1`.",
    "MX-Records (Mail Exchange) geben an, welcher Mailserver für eine Domain zuständig ist, z. B. `mail.example.com` für `example.com`.",
    "CNAME-Records (Canonical Name) definieren einen Aliasnamen für eine andere Domain. Beispiel: `shop.example.com → www.example.com`.",
    "Dies ist nützlich für Domainweiterleitungen, Lastverteilung oder das Hosten mehrerer Dienste unter verschiedenen Namen.",
    "Die Kombination dieser Eintragstypen ermöglicht eine flexible und leistungsfähige Verwaltung von Domains und deren Diensten im Internet."
  ],
  "explanationJa": [
    "DNSには『リソースレコード（Resource Record）』と呼ばれる複数の種類のエントリがあり、ドメインに関するさまざまな情報を提供します。",
    "Aレコードは、ドメイン名にIPv4アドレスを対応づけるもので、たとえば `www.example.com → 192.0.2.1` のような関係を示します。",
    "AAAAレコードはAレコードのIPv6版で、`www.example.com → 2001:db8::1` のような形式になります。",
    "MXレコードは、そのドメインのメールの配送先（メールサーバ）を指定するもので、例：`example.com` に対して `mail.example.com`。",
    "CNAMEレコードは『エイリアス』を定義するもので、あるドメイン名を別のドメイン名に紐づけます。例：`shop.example.com → www.example.com`。",
    "CNAMEは、ドメインの転送設定、負荷分散、または複数のサービス名の運用に役立ちます。",
    "これらのエントリタイプを組み合わせることで、インターネット上のドメインとサービスを柔軟かつ効率的に管理できます。"
  ],
  "originalSlideText": "❑ Es gibt verschiedene Arten von DNS-Einträgen\n❑ A-Records: IP4 Adressen\n❑ AAAA-Records: IPv6 Adressen\n❑ MX-Records: Domain des SMTP-Servers der Domain\n❑ CNAME: Alias",
  "explanationImage": "",
  "questionImage": ""
},
{
  "id": 38,
  "questionDe": "(s44) Welche grundlegenden Technologien ermöglichen WWW, FTP, E-Mail und DNS und welche Aufgaben erfüllen sie?",
  "questionJa": "WWW、FTP、Eメール、DNSを実現している基本技術には何があり、それぞれどのような役割を果たしているか？",
  "answerDe": [
    "WWW verwendet mindestens: HTTP, HTML und URL.",
    "FTP ermöglicht den Datenaustausch in heterogenen Netzen.",
    "E-Mail basiert auf: SMTP, IMAP/POP3 und MIME.",
    "DNS erlaubt die Zuordnung lesbarer Namen zu IP-Adressen."
  ],
  "answerJa": [
    "WWWでは最低限、HTTP・HTML・URLが使用される。",
    "FTPは異種ネットワーク間でのデータ交換を可能にする。",
    "EメールにはSMTP、IMAP/POP3、MIMEが必要である。",
    "DNSは、人間が読める名前とIPアドレスを対応づける。"
  ],
  "explanationDe": [
    "Moderne Internetanwendungen wie WWW, E-Mail oder Dateiübertragung basieren auf einer Vielzahl an spezialisierten Protokollen.",
    "Für das World Wide Web (WWW) werden typischerweise drei Technologien verwendet: HTML zur Beschreibung von Inhalt und Struktur, URL zur Adressierung von Ressourcen und HTTP zur Übertragung dieser Inhalte.",
    "FTP dient dem Austausch von Dateien zwischen verschiedenen Computersystemen – es löst Probleme wie unterschiedliche Zeilenenden, Dateisysteme und Zeichencodierungen.",
    "Der E-Mail-Dienst setzt auf SMTP für das Versenden, auf POP3 oder IMAP für das Abrufen und auf MIME für die Formatierung und das Einbetten von Anhängen und Medieninhalten.",
    "DNS bildet die Grundlage für die menschenfreundliche Nutzung des Internets: Statt IP-Adressen kann man Domains wie www.uni-leipzig.de verwenden, die DNS dann in die passende Adresse übersetzt.",
    "Jede dieser Technologien erfüllt eine spezielle Rolle in der Gesamtstruktur des Internets, und erst ihr Zusammenspiel ermöglicht eine stabile und benutzerfreundliche Internetkommunikation.",
    "Diese modular aufgebaute Architektur macht das Internet erweiterbar, interoperabel und weltweit nutzbar – vom Browserfenster bis zum Mailserver."
  ],
  "explanationJa": [
    "現代のインターネットサービス（Web、メール、ファイル転送など）は、複数の専用プロトコルによって支えられています。",
    "WWW（World Wide Web）では、HTML（構造と内容の記述）、URL（アドレス指定）、HTTP（内容の送受信）という3つの技術が基本です。",
    "FTPは異なるシステム間のファイル交換を可能にし、改行コードやファイル形式の違いなども吸収してくれます。",
    "Eメールでは、SMTP（送信）、POP3またはIMAP（受信）、MIME（添付ファイルや形式の扱い）という3つの技術が連携します。",
    "DNSは、人間が覚えやすいドメイン名（例：www.uni-leipzig.de）をIPアドレスに変換する仕組みで、インターネットの利用を容易にしています。",
    "これらの技術はそれぞれ異なる役割を担いながらも相互に連携しており、インターネット全体が安定して使える環境を構築しています。",
    "このようなモジュール構造により、インターネットは拡張性・互換性・グローバル対応性を実現しています。"
  ],
  "originalSlideText": "❑ Für das WWW werden mindestens drei Technologien \ngenutzt: HTTP, HTML und URL\n❑ FTP dient dem Datenaustausch in heterogenen Netzen\n❑ Für E-Mail werden mindestens drei Technologien genutzt: \nSMTP, IMAP/POP3 und MIME\n❑ DNS ermöglicht die Zuweisung von lesbaren Namen zu IP-\nAdressen",
  "explanationImage": "",
  "questionImage": ""
}
]