{"version":3,"file":"js/3551.c860ffd7.js","mappings":"wLACOA,MAAM,kB,kCAAXC,EAAAA,EAAAA,IAyOM,MAzONC,EAyOMC,EAAA,KAAAA,EAAA,K,+oMCzOR,MAAMC,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O","sources":["webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_93_ex.vue","webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_93_ex.vue?041b"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">9(c) CUBIC vs. AIMD – Wachstumsverhalten & Reaktion auf Überlastung</h3>\r\n<!-- Thema: Was bedeutet RTT im TCP-Kontext und warum ist es wichtig? -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Was bedeutet RTT (Round-Trip Time) im TCP-Kontext und warum ist sie entscheidend für das Verhalten des cwnd?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    TCP通信におけるRTT（往復遅延時間）とは何を意味し、どのような役割を果たしているのか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mt-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      RTT (Round-Trip Time) bezeichnet die Zeit, die ein TCP-Paket benötigt, um vom Sender zum Empfänger und wieder zurück zu gelangen.\r\n      Sie umfasst also die Hin- und Rücklaufzeit inklusive Bestätigung (ACK).\r\n    </p>\r\n    <p>\r\n      Im TCP-Verkehr bestimmt die RTT, wie schnell ein Sender neue Daten senden darf –  \r\n      denn das Senden ist an den Erhalt von ACKs gekoppelt.\r\n    </p>\r\n    <p>\r\n      Eine längere RTT bedeutet, dass ACKs langsamer zurückkommen, was die Wachstumsrate des Congestion Window (cwnd) bei klassischen Algorithmen wie Reno verlangsamt.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      RTT（Round-Trip Time／往復遅延時間）とは、TCP で送信されたパケットが宛先に届き、  \r\n      その応答（ACK）が返ってくるまでにかかる**往復時間**を指します。\r\n    </p>\r\n    <p>\r\n      このRTTの長さは、TCPの送信タイミングに大きな影響を与えます。なぜなら、TCPはACKを受け取ることで次のデータを送るからです。\r\n    </p>\r\n    <p>\r\n      RTTが長ければACKも遅くなり、その分ウィンドウ（cwnd）の成長も遅くなるため、スループットに影響します。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- Thema: Warum ist RTT-Abhängigkeit ein Nachteil für TCP Reno in Hochlatenznetzwerken? -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum ist die RTT-Abhängigkeit bei TCP Reno ein Nachteil in Netzwerken mit hoher Latenz?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    なぜ TCP Reno において、RTTへの依存性は高遅延ネットワークでは不利となるのか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mt-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      TCP Reno erhöht sein Congestion Window (cwnd) pro empfangenem ACK linear – also einmal pro RTT.\r\n      Je größer die RTT, desto langsamer kommen die ACKs zurück, und desto langsamer wächst cwnd.\r\n    </p>\r\n    <p>\r\n      In Netzwerken mit hoher Bandbreite, aber langer RTT (sogenannte „Long Fat Networks“)  \r\n      führt das zu einer ineffizienten Ausnutzung der Kapazität.\r\n    </p>\r\n    <p>\r\n      Ein TCP-Flow mit kurzer RTT kann also deutlich schneller wachsen als einer mit langer RTT –  \r\n      was zu Ungleichheit und Nachteilen für lange Flows führt.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      TCP Reno は ACK を 1 RTT ごとに受信するたびに cwnd を 1 セグメントだけ増加させる設計のため、  \r\n      RTT が長い場合、その成長速度が著しく遅くなります。\r\n    </p>\r\n    <p>\r\n      特に、帯域は十分にあるが遅延が長いネットワーク（例：衛星回線や国際回線）では、  \r\n      Reno は帯域を効率的に使い切ることができません。\r\n    </p>\r\n    <p>\r\n      これにより、RTT の短いフローは速く成長し、長いフローは常に不利となり、**帯域の不公平な分配**につながります。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n\r\n<!-- Thema: Warum ist CUBIC weitgehend RTT-unabhängig und was ist der Vorteil davon? -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum ist CUBIC weitgehend unabhängig von der RTT und was ist der Vorteil dieses Designs?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    CUBIC は RTT に依存しないとはどういう意味か？  \r\n    それによりどのような利点が得られるのか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mt-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Anders als TCP Reno basiert CUBIC nicht auf der Anzahl der empfangenen ACKs, sondern auf einer Zeitfunktion.\r\n      Das Wachstum des cwnd erfolgt gemäß <code>W(t) = C(t−K)³ + W<sub>max</sub></code> – also unabhängig von der RTT.\r\n    </p>\r\n    <p>\r\n      Dadurch wächst CUBIC mit konstanter Geschwindigkeit über die Zeit, selbst wenn ACKs langsamer eintreffen.\r\n      Das ermöglicht einen faireren Wettbewerb zwischen Flows mit unterschiedlicher RTT.\r\n    </p>\r\n    <p>\r\n      Besonders in Hochlatenznetzwerken sorgt dieses Design für bessere Effizienz und Kapazitätsausnutzung.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      CUBIC は ACK の頻度ではなく「時間 t」に基づいてウィンドウを成長させる設計のため、  \r\n      RTT の大小に関係なく、**一定の速度でウィンドウが増加**します。\r\n    </p>\r\n    <p>\r\n      成長関数は <code>W(t) = C(t−K)³ + W<sub>max</sub></code> という三次関数であり、RTT を直接含みません。\r\n    </p>\r\n    <p>\r\n      この設計により、RTT の長い接続でも短い接続と公平に帯域を競合できるようになります。\r\n      特に、高遅延ネットワークにおけるパフォーマンス向上が期待できます。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- Thema: Warum ist AIMD in Netzwerken mit hoher Latenz ungeeignet? -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum ist das klassische AIMD-Verfahren in Netzwerken mit hoher RTT nicht effizient?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    高遅延ネットワークにおいて AIMD（加算増加・乗算減少）が適していないのはなぜか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mt-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      AIMD (Additive Increase, Multiplicative Decrease) <span style=\"color: red;\">erhöht das Congestion Window pro empfangenem ACK – also indirekt pro RTT.</span>\r\n      Das bedeutet: Je länger die RTT, desto langsamer wächst das Fenster.\r\n    </p>\r\n    <p>\r\n      In Hochlatenznetzwerken (z.&nbsp;B. Satellitenverbindungen) kann das zu extrem langsamen Wachstumsphasen führen,\r\n      da ACKs verzögert eintreffen.\r\n    </p>\r\n    <p>\r\n      Dadurch wird die verfügbare Bandbreite nicht effizient genutzt, <span style=\"color: red;\">insbesondere nach einem Paketverlust,  \r\n      da die Fensterwiederherstellung sehr lange dauert.</span>\r\n    </p>\r\n    <p>\r\n      Diese RTT-Abhängigkeit macht AIMD für moderne Netzwerke mit großer Latenz ungeeignet.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      AIMD（加算増加・乗算減少）アルゴリズムでは、<span style=\"color: red;\">ACK の受信ごとに cwnd（輻輳ウィンドウ）を少しずつ増加</span>させます。\r\n      これは、**RTT に比例して成長速度が決まる**ことを意味します。\r\n    </p>\r\n    <p>\r\n      高遅延ネットワーク（例：衛星通信）では ACK の応答が遅れるため、  \r\n      **ウィンドウの成長に非常に時間がかかってしまい、帯域を有効に使えません**。\r\n    </p>\r\n    <p style=\"color: red;\">\r\n      特にパケットロス後の回復にも時間がかかり、スループットが低下します。\r\n    </p>\r\n    <p>\r\n      このような理由から、AIMD は RTT の大きいネットワーク環境には不向きです。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- Thema: Warum ist CUBIC besonders gut für Netzwerke mit hoher Latenz und Bandbreite geeignet? -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum ist der TCP-Algorithmus CUBIC besonders geeignet für Long-Fat Networks?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    高遅延かつ高帯域なネットワークにおいて、CUBIC が特に有効とされるのはなぜか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mt-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      CUBIC verwendet eine zeitbasierte kubische Wachstumsfunktion, die unabhängig von der RTT arbeitet.\r\n      Das Fenster wächst mit der Zeit, nicht mit jedem einzelnen ACK.\r\n    </p>\r\n    <p>\r\n      Dadurch bleibt die Wachstumsrate auch bei hoher Latenz konstant, was besonders in sogenannten Long-Fat Networks wichtig ist.\r\n    </p>\r\n    <p>\r\n      Zusätzlich kann CUBIC durch seine konvexe Phase nach W<sub>max</sub> sehr schnell neue Bandbreite erschließen.\r\n      Die Stabilität nahe W<sub>max</sub> sorgt gleichzeitig für geringe Verlustraten.\r\n    </p>\r\n    <p>\r\n      Diese Eigenschaften machen CUBIC effizient und robust in modernen Hochleistungsnetzwerken.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      CUBIC は ACK の頻度ではなく「経過時間 t」に基づいてウィンドウを増加させる  \r\n      **時間ベースの三次関数成長モデル**を採用しています。\r\n    </p>\r\n    <p>\r\n      この設計により、RTT が長くても成長速度は影響を受けず、**常に一定の速度で成長できる**のが特長です。\r\n    </p>\r\n    <p>\r\n      また、過去の最大値 W<sub>max</sub> を越えるとウィンドウを急速に拡大（凸型成長）させるため、  \r\n      **広い帯域をすばやく使い切ることが可能**です。\r\n    </p>\r\n    <p>\r\n      このような特性により、CUBIC は高遅延・高帯域なネットワーク（いわゆる Long Fat Networks）において  \r\n      非常に高い効率と安定性を両立させます。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n</script>\r\n","import { render } from \"./chapter15_93_ex.vue?vue&type=template&id=6015121c\"\nconst script = {}\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_hoisted_1","_cache","script","__exports__","render"],"sourceRoot":""}