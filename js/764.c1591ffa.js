"use strict";(self["webpackChunkstudy_site"]=self["webpackChunkstudy_site"]||[]).push([[764],{764:function(e,r,n){n.r(r),n.d(r,{default:function(){return d}});var t=n(6768);const i={class:"container my-4"};function s(e,r){return(0,t.uX)(),(0,t.CE)("div",i,r[0]||(r[0]=[(0,t.Fv)('<h3 class="mb-4">10(e) TCP BBR – Vier Zustände (States) und ihre Funktionen</h3><div class="border rounded p-3 bg-light mb-4"><p><strong>Aufgabe:</strong><br> Nennen und erklären Sie die vier Phasen (States) von TCP BBR. (8P)<br> Was ist das Ziel jeder Phase? </p><hr><p><strong>問題:</strong><br> TCP BBR における 4つのフェーズ（状態）を挙げ、それぞれの目的を説明せよ。（8点） </p></div><div class="row"><div class="col-md-6"><h5>Antwort (Deutsch)</h5><ol><li><strong>Startup:</strong> BBR <span style="color:red;">erhöht die Sende­rate exponentiell</span>, <span style="color:red;">um schnell eine erste Schätzung für die Bottleneck-Bandbreite (BtlBw) zu erhalten.</span><br><em>Ziel:</em> <span style="color:red;">Möglichst schnell den maximal nutzbaren Durchsatz erkennen</span>. </li><li><strong>Drain:</strong> Nach dem Startup <span style="color:red;">reduziert BBR die Sende­rate</span>, <span style="color:red;">um überflüssige Warteschlangen im Netzwerk abzubauen</span>.<br><em>Ziel:</em> <span style="color:red;">Puffer leeren und Latenz minimieren.</span></li><li><strong>ProbeBW (Probe Bandwidth):</strong> BBR <span style="color:red;">variiert die Sende­rate zyklisch (schneller/langsamer), um freie Bandbreite zu erkennen.</span><br><em>Ziel:</em> <span style="color:red;">Änderungen der verfügbaren Bandbreite rechtzeitig erfassen.</span></li><li><strong>ProbeRTT:</strong> BBR <span style="color:red;">reduziert temporär die Sende­menge, um den minimalen RTT-Wert (RT<sub>prop</sub>) neu zu messen.</span><br><em>Ziel:</em> Die Netzwerklatenz korrekt modellieren. </li></ol><p><em>Quelle: Folien 48–50</em></p></div><div class="col-md-6"><h5>解答（日本語）</h5><ol><li><strong>Startup：</strong> BBR は最初に送信レートを指数的に増加させ、ボトルネック帯域幅（BtlBw）を素早く推定します。<br><em>目的：</em> 回線が許容する最大スループットを迅速に見つける。 </li><li><strong>Drain：</strong> Startup で生じた余分なキュー（バッファの詰まり）を解消するため、送信レートを一時的に抑えます。<br><em>目的：</em> キューによる遅延を取り除き、RTTを安定化させる。 </li><li><strong>ProbeBW（帯域調査）：</strong> 定期的に送信レートを上げ下げすることで、利用可能な帯域の変化を検出します。<br><em>目的：</em> 他のフローとの競合で変化する帯域を適切に再利用する。 </li><li><strong>ProbeRTT：</strong> 一時的に送信量を大幅に減らして、最小の RTT（RT<sub>prop</sub>）を正確に再測定します。<br><em>目的：</em> ネットワークの遅延特性を更新し、過剰送信を防ぐ。 </li></ol><p><em>出典：スライド p.48〜50</em></p></div></div><div class="row mt-4"><div class="col-md-6"><h5>Erklärung (Deutsch)</h5><p> BBR arbeitet nicht mit klassischen Zuständen wie „Slow Start“ oder „Congestion Avoidance“, sondern definiert vier eigene Betriebszustände, die gemeinsam ein Modell der Netzwerkauslastung aufbauen und ständig aktualisieren. </p><ul><li><strong>Startup</strong> ist vergleichbar mit einem sehr schnellen „Slow Start“, aber ohne auf Verluste zu warten. BBR tastet sich schnell an die geschätzte Bandbreite heran. </li><li><strong>Drain</strong> folgt direkt auf Startup, weil bei zu schnellem Senden häufig Puffer im Netzwerk überfüllt werden. In Drain reduziert BBR die Sende­rate gezielt, um die Latenz zu stabilisieren. </li><li><strong>ProbeBW</strong> ist der Normalzustand von BBR. Hier wird die Sende­rate leicht variiert, um zu testen, ob mehr Bandbreite verfügbar ist. Dieser Zustand sorgt auch für faire Bandbreitennutzung gegenüber neuen Flows. </li><li><strong>ProbeRTT</strong> wird regelmäßig aktiviert, um RT<sub>prop</sub> zu aktualisieren. Dafür sendet BBR z.B. nur vier kleine Pakete, um die reine Verzögerung zu messen. </li></ul></div><div class="col-md-6"><h5>解説（日本語）</h5><p> BBR は従来の TCP Reno/CUBIC に見られる「スロースタート」「輻輳回避」などの状態を使わず、独自の4つの状態を定義しています。これらはすべて「ネットワーク状態のモデル化と更新」に基づいて動作しています。 </p><ul><li><strong>Startup</strong> は送信レートを急速に増やし、どの程度まで送信できるかを探る段階です。非常に速く帯域の上限に到達できますが、過剰に送ってしまうリスクもあります。 </li><li><strong>Drain</strong> は Startup でできた「過剰な送信分＝キュー詰まり」を解消するフェーズです。ここでは意図的に送信量を抑えて、ネットワーク内のRTTや遅延を正常値に戻します。 </li><li><strong>ProbeBW</strong> は通常動作の状態です。BBR はここで送信レートを上下に微調整し、「まだ帯域に余裕があるか？」「他の通信フローが増えたか？」をチェックします。 </li><li><strong>ProbeRTT</strong> では、一時的に送信をほぼ止めて、小さなパケットだけを送り、RTTの最小値（RT<sub>prop</sub>）を正確に測定します。これにより、モデルの更新と誤差修正が可能になります。 </li></ul></div></div>',4)]))}var l=n(1241);const a={},o=(0,l.A)(a,[["render",s]]);var d=o}}]);
//# sourceMappingURL=764.c1591ffa.js.map