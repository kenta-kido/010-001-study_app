"use strict";(self["webpackChunkstudy_site"]=self["webpackChunkstudy_site"]||[]).push([[5104],{226:function(a,e,t){t.r(e),t.d(e,{default:function(){return b}});var n=t(6768),d=t(144),i=t.p+"img/Figure_0308.e7e3d694.png",s=t.p+"img/Figure_0309.b33be3f5.png",r=t.p+"img/Figure_0310.4f8dab41.png";const l={class:"container my-4"},v={class:"text-center mb-4"},o=["src"],f={class:"text-center mb-4"},g=["src"],u={class:"text-center mb-4"},c=["src"];var h={__name:"chapter15_31_ex",setup(a){return(a,e)=>((0,n.uX)(),(0,n.CE)("div",l,[e[3]||(e[3]=(0,n.Fv)('<h3 class="mb-4" data-v-256f8346>6. Link-State Routing – Vertiefungsthemen</h3><div class="border rounded p-3 bg-light mb-4" data-v-256f8346><p data-v-256f8346><strong data-v-256f8346>Thema 6-1:</strong><br data-v-256f8346> Wie entsteht aus Dijkstra ein Forwarding Table? </p><hr data-v-256f8346><p data-v-256f8346><strong data-v-256f8346>テーマ 6-1:</strong><br data-v-256f8346> Dijkstraアルゴリズムから転送表（Forwarding Table）はどのように作られるか？ </p></div><div data-v-256f8346><div class="row" data-v-256f8346><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>Erklärung (Deutsch)</h5><p data-v-256f8346> Dijkstra berechnet die kürzesten Wege zu allen Zielen. <br data-v-256f8346><span style="color:red;" data-v-256f8346>Für den Forwarding Table braucht man aber nur die nächste Station (Next Hop).</span><br data-v-256f8346>Daher verfolgt man vom Ziel aus rückwärts den Pfad zum Startknoten und notiert den ersten Link. </p><p data-v-256f8346> Für jeden Zielknoten wird also ermittelt, über welchen Nachbarn das erste Paket gehen muss. So entsteht die <strong data-v-256f8346>Next-Hop-Tabelle</strong>, die im Router als Forwarding Table gespeichert wird. </p></div><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>解説（日本語）</h5><p data-v-256f8346> Dijkstraアルゴリズムでは、自ノードからすべての宛先ノードまでの最短経路を計算します。 <br data-v-256f8346><span style="color:red;" data-v-256f8346>ただし、実際のパケット転送に必要なのは、「次に送るべき隣接ノード（next hop）」だけです。</span></p><p data-v-256f8346> そのため、最短経路を各宛先から逆方向にたどり、出発点（自ノード）に戻る経路上の最初のリンクを記録します。 <br data-v-256f8346>これにより、各宛先に対してどの隣接ノードに送るべきかがわかり、<strong data-v-256f8346>転送表（Forwarding Table）</strong>が作成されます。 </p></div></div></div><div class="border rounded p-3 bg-light mb-4" data-v-256f8346><p data-v-256f8346><strong data-v-256f8346>Thema 6-2:</strong><br data-v-256f8346> Wie wählt man bei mehreren gleichwertigen Pfaden? </p></div><div data-v-256f8346><hr data-v-256f8346><p data-v-256f8346><strong data-v-256f8346>テーマ 6-2:</strong><br data-v-256f8346> 同じコストの複数経路がある場合、どのように選択されるのか？ </p><div class="row" data-v-256f8346><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>Erklärung (Deutsch)</h5><p data-v-256f8346> Wenn zwei oder mehr Pfade die gleiche Kosten haben, spricht man von einem „Tie“. Der Dijkstra-Algorithmus selbst trifft dann eine Wahl nach Implementierung: alphabetische Reihenfolge, Portnummer oder Zufall. </p><p data-v-256f8346> Diese Wahl beeinflusst den Traffic-Fluss und kann bei kleinen Änderungen große Effekte haben. Manche Systeme nutzen Load Balancing oder Equal-Cost Multipath (ECMP), um mehrere Pfade gleichzeitig zu nutzen. </p></div><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>解説（日本語）</h5><p data-v-256f8346> 同じコストの複数の経路が存在する場合、これを「タイ（tie）」と呼びます。 Dijkstraアルゴリズム自体は、その中から1つを選択しますが、選び方は実装に依存します。たとえば、名前順・ポート番号順・ランダムなどです。 </p><p data-v-256f8346> この選択は通信経路に大きな影響を与える可能性があり、場合によってはEqual-Cost Multipath（ECMP）や 負荷分散を用いて複数の経路を同時に使用する方法もあります。 </p></div></div></div><div class="border rounded p-3 bg-light mb-4" data-v-256f8346><p data-v-256f8346><strong data-v-256f8346>Thema 6-3:</strong><br data-v-256f8346> Wie effizient ist Dijkstra und wie kann man ihn verbessern? </p></div><div data-v-256f8346><hr data-v-256f8346><p data-v-256f8346><strong data-v-256f8346>テーマ 6-3:</strong><br data-v-256f8346> Dijkstraアルゴリズムの計算効率とその改善方法について </p><div class="row" data-v-256f8346><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>Erklärung (Deutsch)</h5><p data-v-256f8346> Die naive Implementierung von Dijkstra hat <span style="color:red;" data-v-256f8346>eine Komplexität von O(n<sup data-v-256f8346>2</sup>)</span>. Bei vielen Knoten wird das langsam. Nutzt man <span style="color:red;" data-v-256f8346>einen Min-Heap (Priority Queue)</span>, kann man <span style="color:red;" data-v-256f8346>die Laufzeit auf O(n log<sub data-v-256f8346>n</sub> + E log<sub data-v-256f8346>n</sub>) senken</span>. </p><p data-v-256f8346> Moderne Implementierungen (z. B. in OSPF) verwenden binäre Heaps oder Fibonacci-Heaps, um Performance bei großen Netzen zu verbessern. </p></div><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>解説（日本語）</h5><p data-v-256f8346> Dijkstraアルゴリズムの単純な実装では、すべてのノードに対して距離を比較するため、 <span style="color:red;" data-v-256f8346>計算量はO(n<sup data-v-256f8346>2</sup>)</span>となり、大規模ネットワークでは遅くなります。 </p><p data-v-256f8346> これを改善するために、<span style="color:red;" data-v-256f8346>優先度付きキュー（Min-Heapなど）</span>を使って 最小コストのノードを効率的に取り出すことで、<span style="color:red;" data-v-256f8346>O(n log<sub data-v-256f8346>n</sub> + E log<sub data-v-256f8346>n</sub>)に高速化</span>できます。 </p><p data-v-256f8346> 実際のOSPFなどでは、バイナリヒープやフィボナッチヒープを使用して処理性能を高めています。 </p></div></div></div><div class="border rounded p-3 bg-light mb-4" data-v-256f8346><p data-v-256f8346><strong data-v-256f8346>Thema 6-4:</strong><br data-v-256f8346> Was ist das Oscillation-Problem bei dynamischen Metriken? </p></div><div data-v-256f8346><hr data-v-256f8346><p data-v-256f8346><strong data-v-256f8346>テーマ 6-4:</strong><br data-v-256f8346> 動的メトリックにおけるOscillation（経路の揺れ）問題とは？ </p><div class="row" data-v-256f8346><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>Erklärung (Deutsch)</h5><p data-v-256f8346><span style="color:red;" data-v-256f8346>Wenn sich Metriken wie Delay oder Load schnell ändern</span>, können Router sich gegenseitig beeinflussen und <span style="color:red;" data-v-256f8346>ständig die Routen wechseln</span>. <br data-v-256f8346>Dies nennt man <span style="color:red;" data-v-256f8346>Oscillation</span>. </p><p data-v-256f8346> Beispiel: Zwei Router wechseln immer wieder zwischen zwei Wegen, weil jeder denkt, der andere Weg sei kürzer. Die Routen „springen“ ständig hin und her. </p><p data-v-256f8346> Lösung: </p><ul style="color:red;" data-v-256f8346><li data-v-256f8346>Hysterese: kleine Änderungen werden ignoriert, um unnötige Umschaltungen zu vermeiden</li><li data-v-256f8346>Schwellenwerte: Routenwechsel nur, wenn ein bestimmter Wert überschritten wird</li><li data-v-256f8346>Stabilitätsfilter: bevorzugt stabile Routen gegenüber kurzfristigen Schwankungen</li></ul></div><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>解説（日本語）</h5><p data-v-256f8346><span style="color:red;" data-v-256f8346>遅延やトラフィック量などのメトリックが頻繁に変動する環境</span>では、 ルーターが経路を頻繁に切り替えすぎて不安定になることがあります。これを「Oscillation（経路の揺れ）」と呼びます。 </p><p data-v-256f8346> 例えば、2台のルーターが「A経由の方が速い」「いやB経由の方が速い」と交互に判断を変えることで、 経路が何度も切り替わり、パケットの安定した転送ができなくなります。 </p><p data-v-256f8346> 解決策： </p><ul style="color:red;" data-v-256f8346><li data-v-256f8346>ヒステリシス：小さな変化を無視して無駄な切り替えを避ける</li><li data-v-256f8346>しきい値：ある値を超えた場合のみルートを切り替える</li><li data-v-256f8346>安定性フィルター：短期的な変動よりも安定した経路を優先する</li></ul></div></div></div><div class="border rounded p-3 bg-light mb-4" data-v-256f8346><p data-v-256f8346><strong data-v-256f8346>Thema 6-4 (Ergänzung):</strong><br data-v-256f8346> Wie entsteht Routing-Oscillation durch lastabhängige Linkkosten? </p><hr data-v-256f8346><p data-v-256f8346><strong data-v-256f8346>テーマ 6-4（補足）:</strong><br data-v-256f8346> 輻輳や負荷に応じたリンクコストにより経路が「振動」してしまうのはなぜか？ </p></div>',10)),(0,n.Lk)("div",v,[(0,n.Lk)("img",{src:(0,d.R1)(i),alt:"Initial routing state (Figure 5.5a)",class:"img-fluid rounded border"},null,8,o),e[0]||(e[0]=(0,n.Lk)("p",{class:"text-muted mt-2"},"Figure 5.5(a): 初期状態 – 全ルーターが反時計回り経路を選択",-1))]),e[4]||(e[4]=(0,n.Fv)('<div class="row mb-4" data-v-256f8346><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>Erklärung (Deutsch)</h5><p data-v-256f8346> Wenn Linkkosten vom Datenverkehr abhängen, können Router bei jeder Ausführung des LS-Algorithmus andere Routen wählen. Das führt zu einem <strong data-v-256f8346>instabilen Routing-Verhalten</strong>. </p><p data-v-256f8346> Im Beispiel sendet jeder Knoten Verkehr zu w. Anfangs ist der Weg gegen den Uhrzeigersinn (counterclockwise) am günstigsten. </p><p data-v-256f8346> Doch nachdem y den Algorithmus erneut ausführt, erkennt es, dass der <strong data-v-256f8346>Uhrzeigersinn-Pfad</strong> kürzer geworden ist (da dort aktuell weniger Last ist). Es wechselt die Route – und bald folgen x und z. </p><p data-v-256f8346> Doch beim nächsten Durchlauf ist der neue Weg überlastet, der vorherige Weg wieder günstiger. Alle Router schalten zurück – und der Zyklus beginnt erneut: eine <strong data-v-256f8346>Routing-Oszillation</strong>. </p></div><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>解説（日本語）</h5><p data-v-256f8346> リンクのコストがそのリンクを流れる<strong data-v-256f8346>トラフィック量に応じて変化</strong>する場合、 経路が「変動」して安定しないことがあります。これが Oscillation（振動）問題です。 </p><p data-v-256f8346> 図5.5(a)では、全ノードが w に向けてパケットを反時計回り経路で送っています。 </p><p data-v-256f8346> ところが、次のアルゴリズム実行時に y が時計回り経路の方がコストが小さいと判断し、 それを選びます。やがて x, z もそれに追随します。 </p><p data-v-256f8346> しかし、今度はそちらのルートが混雑し、もとのルートの方が空いてくるため、 結果的にまた反時計回りに戻ってしまいます。これが経路の「振動」です。 </p></div></div>',1)),(0,n.Lk)("div",f,[(0,n.Lk)("img",{src:(0,d.R1)(s),alt:"Routing oscillation - clockwise and counterclockwise shift",class:"img-fluid rounded border"},null,8,g),e[1]||(e[1]=(0,n.Lk)("p",{class:"text-muted mt-2"},"Figure 5.5(b)–(c): 経路の切り替え：時計回り → 反時計回りへ",-1))]),e[5]||(e[5]=(0,n.Fv)('<div class="row mb-4" data-v-256f8346><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>Erklärung: Gegenmaßnahmen (Deutsch)</h5><p data-v-256f8346> Um solche Oszillationen zu vermeiden, kann man Folgendes tun: </p><ul data-v-256f8346><li data-v-256f8346><span style="color:red;" data-v-256f8346>Linkkosten sollten nicht vom aktuellen Traffic abhängen</span></li><li data-v-256f8346>Nicht alle Router sollten gleichzeitig den LS-Algorithmus starten</li><li data-v-256f8346>Man kann <span style="color:red;" data-v-256f8346>zufällige Verzögerungen beim Senden von Link-State-Advertisments einführen</span></li></ul><p data-v-256f8346> Diese Maßnahmen helfen, das Phänomen der Selbst-Synchronisation zu vermeiden, das durch gleichzeitige Entscheidungen aller Router entsteht. </p></div><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>解説：対策（日本語）</h5><p data-v-256f8346> このような経路振動を防ぐには、以下のような工夫が有効です： </p><ul data-v-256f8346><li data-v-256f8346><span style="color:red;" data-v-256f8346>リンクのコストをトラフィック量に依存させない</span></li><li data-v-256f8346>すべてのルーターが同時にLSアルゴリズムを実行しない</li><li data-v-256f8346><span style="color:red;" data-v-256f8346>各ルーターがリンク状態情報の送信タイミングをランダム</span>にする</li></ul><p data-v-256f8346> 特に「自己同期（self-synchronization）」の問題を避けるためには、 各ルーターがランダムなタイミングで動作するように設計するのが効果的です。 </p></div></div>',1)),(0,n.Lk)("div",u,[(0,n.Lk)("img",{src:(0,d.R1)(r),alt:"Final state - randomization helps prevent oscillation",class:"img-fluid rounded border"},null,8,c),e[2]||(e[2]=(0,n.Lk)("p",{class:"text-muted mt-2"},"Figure 5.5(d): 全ルーターが再び時計回り経路を選択 – 振動の繰り返し",-1))]),e[6]||(e[6]=(0,n.Fv)('<div class="border rounded p-3 bg-light mb-4" data-v-256f8346><p data-v-256f8346><strong data-v-256f8346>Thema 6-4 (Vertiefung):</strong><br data-v-256f8346> Wie lassen sich Routing-Oszillationen im LS-Algorithmus vermeiden? </p><hr data-v-256f8346><p data-v-256f8346><strong data-v-256f8346>テーマ 6-4（発展）:</strong><br data-v-256f8346> Link-Stateルーティングで経路振動を防ぐにはどうすればよいか？ </p></div><div class="row mb-4" data-v-256f8346><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>Erklärung (Deutsch)</h5><p data-v-256f8346> Routing-Oszillationen entstehen häufig, wenn Linkkosten von aktueller Last abhängen und alle Router gleichzeitig den LS-Algorithmus ausführen. Das führt zu synchronen, instabilen Pfadwechseln. </p><p data-v-256f8346> Es gibt mehrere Gegenmaßnahmen: </p><ul data-v-256f8346><li data-v-256f8346><strong style="color:red;" data-v-256f8346>Feste Linkkosten:</strong> Man sollte Metriken wählen, die nicht direkt vom aktuellen Datenverkehr abhängen.</li><li data-v-256f8346><strong style="color:red;" data-v-256f8346>Asynchrone Ausführung:</strong> Router sollten den LS-Algorithmus nicht exakt zur selben Zeit ausführen.</li><li data-v-256f8346><strong style="color:red;" data-v-256f8346>Zufällige Verzögerung:</strong> Jeder Router kann die Aussendung seiner Link-State-Advertisments leicht verzögern (z.B. durch zufällige Timer).</li></ul><p data-v-256f8346> Diese Maßnahmen verhindern <strong data-v-256f8346>Selbstsynchronisation</strong>, ein bekanntes Phänomen, bei dem sich Router unbeabsichtigt im Takt angleichen und damit alle gleichzeitig reagieren – was Oszillation erst auslöst. </p></div><div class="col-md-6" data-v-256f8346><h5 data-v-256f8346>解説（日本語）</h5><p data-v-256f8346> 経路振動（Oscillation）は、リンクコストがトラフィックに応じて変化したり、すべてのルーターが同時に経路計算を実行したりすることで発生します。 </p><p data-v-256f8346> これを防ぐための対策には、以下のようなものがあります： </p><ul data-v-256f8346><li data-v-256f8346><strong data-v-256f8346>静的なリンクコストを使用：</strong> 通信量に応じてリンクコストが変わる設計は避け、一定のメトリック（距離や帯域など）を使う。</li><li data-v-256f8346><strong data-v-256f8346>非同期での実行：</strong> 全ルーターが同時にアルゴリズムを走らせるのではなく、タイミングをずらす。</li><li data-v-256f8346><strong data-v-256f8346>リンク状態広告の送信タイミングにランダム性を持たせる：</strong> これにより「自己同期」が起きにくくなります。</li></ul><p data-v-256f8346> 自己同期とは、各ルーターが偶然にも同じ周期でLSAを送るようになり、 ネットワーク全体で一斉にルーティングの更新が走ってしまう現象です。 このようなタイミングの一致が経路の振動を引き起こすため、ランダムな遅延を加えることで予防できます。 </p></div></div>',2))]))}},p=t(1241);const m=(0,p.A)(h,[["__scopeId","data-v-256f8346"]]);var b=m}}]);
//# sourceMappingURL=5104.22f3212e.js.map