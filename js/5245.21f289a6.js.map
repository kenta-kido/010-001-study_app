{"version":3,"file":"js/5245.21f289a6.js","mappings":"gRACEA,EAAAA,EAAAA,IA0KM,MA1KNC,EA0KMC,EAAA,KAAAA,EAAA,K,+0PCrKR,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_12.vue","webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_12.vue?6b3b"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">1(b) Medienzugriff – Kollisionen bei Ethernet</h3>\r\n\r\n    <!-- 問題文（Deutsch + 日本語） -->\r\n    <div class=\"border rounded p-3 bg-light mb-4\">\r\n      <p><strong>Aufgabe:</strong><br />\r\n        A und B wollen gleichzeitig IP Datagramme über Ethernet senden. Wie werden Kollisionen vermieden bzw was passiert?\r\n      </p>\r\n      <hr />\r\n      <p><strong>問題:</strong><br />\r\n        A と B が同時に Ethernet 上で IP データグラムを送信しようとする場合、衝突はどのように回避されるのか？または、何が起こるのか？\r\n      </p>\r\n    </div>\r\n\r\n    <!-- 解答：ドイツ語 & 日本語 横並び -->\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6\">\r\n        <h5>Antwort (Deutsch)</h5>\r\n        <p>\r\n          In klassischen (halbduplexen) Ethernet-Netzen wird das CSMA/CD-Verfahren (Carrier Sense Multiple Access with Collision Detection) verwendet:\r\n        </p>\r\n        <ul>\r\n          <li>Jeder Host „lauscht“ zunächst auf das Medium, ob es frei ist.</li>\r\n          <li>Wenn es frei ist, beginnt der Host mit der Übertragung.</li>\r\n          <li>Kommt es dennoch zu einer Kollision, erkennen die Sender das und senden ein sogenanntes „Jamming Signal“.</li>\r\n          <li>Danach warten sie eine zufällige Zeit (Backoff) und versuchen es erneut.</li>\r\n        </ul>\r\n        <p>\r\n          Bei modernen Switched-Ethernet-Netzen mit Vollduplexbetrieb gibt es keine Kollisionen mehr, da jeder Host eine direkte Verbindung zum Switch hat.\r\n        </p>\r\n      </div>\r\n\r\n      <div class=\"col-md-6\">\r\n        <h5>解答（日本語）</h5>\r\n        <p>\r\n          古典的な（半二重の）Ethernet では、CSMA/CD（搬送波感知多重アクセス／衝突検出）方式が使用されます：\r\n        </p>\r\n        <ul>\r\n          <li>各ホストは、まず通信媒体が空いているかを確認します。</li>\r\n          <li>空いていれば送信を開始します。</li>\r\n          <li>もし衝突が発生した場合、送信者はそれを検出して「ジャミング信号」を送信します。</li>\r\n          <li>その後、一定のランダムな時間（バックオフ）を待って再送信を試みます。</li>\r\n        </ul>\r\n        <p>\r\n          一方、現代のスイッチを用いたフルデュプレックス Ethernet では、ホストはスイッチと直接接続されているため、衝突は発生しません。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 中タイトル -->\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-12\">\r\n    <p class=\"fw-bold fs-5\" style=\"color: #004085;\">\r\n      Ethernetにおける衝突の仕組みとCSMA/CDの背景 〜バストポロジーからハブ接続まで\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- 解説ブロック -->\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      In der Anfangszeit von Ethernet (z.B. 10BASE5, 10BASE2) wurde häufig eine sogenannte <strong>Bus-Topologie</strong> verwendet:\r\n      Alle Geräte waren direkt an ein einziges Koaxialkabel angeschlossen – also an ein <strong>gemeinsam genutztes Übertragungsmedium</strong>.\r\n    </p>\r\n    <p>\r\n      Später wurden <strong>Hubs</strong> verwendet, um eine sternförmige physische Verkabelung zu ermöglichen.\r\n      Logisch gesehen verhielten sich Hubs jedoch wie ein Bus: <strong>Alle Ports teilen sich denselben Übertragungsweg</strong>.\r\n      Auch bei Hubs konnte es daher zu <strong>Kollisionen</strong> kommen.\r\n    </p>\r\n    <p>\r\n      Um diese zu erkennen und zu steuern, wurde in gemeinsam genutzten Medien das Verfahren <strong>CSMA/CD</strong> (Carrier Sense Multiple Access with Collision Detection) eingesetzt.\r\n      Es besteht aus:\r\n    </p>\r\n      <ul>\r\n        <li><strong>Carrier Sense:</strong> Erst prüfen, ob das Medium frei ist.</li>\r\n        <li><strong>Multiple Access:</strong> Jeder darf senden.</li>\r\n        <li><strong>Collision Detection:</strong> bedeutet, dass das sendende Gerät prüft, ob während der Übertragung eine Kollision passiert. Wenn eine Kollision erkannt wird, stoppt das Gerät die Übertragung, sendet ein sogenanntes Jamming-Signal und wartet eine zufällige Zeit, bevor es erneut versucht zu senden.</li>\r\n      </ul>\r\n    <p>\r\nEin Jamming-Signal ist ein spezielles Signal, das gesendet wird, um anderen Geräten im Netzwerk mitzuteilen, dass eine Kollision aufgetreten ist.\r\n    <br/>\r\n    Allerdings brechen nur die Geräte, die an der Kollision beteiligt waren, ihre Übertragung ab – andere Geräte müssen ihre Übertragung nicht stoppen.\r\n    </p>\r\n    <p>\r\n      Heute verwendet man Switches, bei denen jedes Gerät einen eigenen dedizierten Kanal besitzt – <strong>CSMA/CD ist hier nicht mehr notwendig</strong>.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      初期のEthernet（例：10BASE5、10BASE2）では、<strong>バストポロジー</strong>（1本の同軸ケーブルを複数機器で共有する方式）が主流でした。\r\n      全機器が<strong>1つの通信路を共用</strong>するため、2台が同時に送信すると<strong>衝突（コリジョン）</strong>が発生しました。\r\n    </p>\r\n    <p>\r\n      後に登場した<strong>ハブ</strong>は、物理的にはスター型配線を可能にしましたが、<strong>論理的にはバスと同様</strong>で、\r\n      全ポートが1つの共有信号線を使うため、やはり<strong>衝突が起こり得る構成</strong>でした。\r\n    </p>\r\n    <p>\r\n      これらの共有型Ethernetでは、衝突の検出と制御のために<strong>CSMA/CD方式</strong>が用いられていました：\r\n    </p>\r\n      <ul>\r\n        <li><strong>搬送波感知（Carrier Sense）：</strong> 通信前に回線が空いているか確認</li>\r\n        <li><strong>多重アクセス（Multiple Access）：</strong> 誰でも送信可能</li>\r\n        <li><strong>衝突検出（Collision Detection）：</strong> 送信している機器が通信中に衝突が起きたかを確認することです。衝突が検出された場合、機器は送信を中止し、「ジャミング信号」と呼ばれる通知を送り、その後ランダムな時間だけ待ってから再送信を試みます。</li>\r\n      </ul>\r\n    <p>\r\nジャミング信号（Jamming-Signal）とは、衝突が起きたことをネットワーク上の他の機器に知らせるために送られる特別な信号です。\r\n    <br/>\r\nただし、送信を中止するのは衝突に関与していた機器であり、他の機器は送信を止める必要はありません。\r\n    </p>\r\n    <p>\r\n      現在は各機器が<strong>スイッチ</strong>で直接接続され、ポートごとに独立した通信路が確保されているため、<strong>CSMA/CDは不要</strong>です。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n\r\n<!-- 中タイトル -->\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-12\">\r\n    <p class=\"fw-bold fs-5\" style=\"color: #004085;\">\r\n      衝突後の待機処理と指数的バックオフ（Wartezeit nach Kollision und Exponential Backoff）\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- 解説ブロック -->\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Nach einer <strong>Kollision</strong> im Ethernet-Netzwerk beobachten die betroffenen Geräte zunächst, ob der Kanal wieder frei ist.\r\n      Ist dies der Fall, wird nicht sofort erneut gesendet, sondern:\r\n    </p>\r\n    <ul>\r\n      <li>Jedes beteiligte Gerät wählt eine <strong>zufällige Wartezeit</strong> aus einem Intervall [0,d].</li>\r\n      <li>Während dieser Zeit bleibt das Gerät still und wartet.</li>\r\n      <li>Ist der Kanal währenddessen frei geblieben, startet das Gerät nach Ablauf der Zeit erneut die Übertragung.</li>\r\n      <li>Kommt es erneut zu einer Kollision, <strong>wird das Intervall verdoppelt</strong>: [0,2d], [0,4d], [0,8d] usw.</li>\r\n      <li>Dadurch sinkt die Wahrscheinlichkeit weiterer Kollisionen mit jedem Versuch.</li>\r\n      <li>Der Wert <strong>d</strong> (minimale Zeiteinheit) ist im Ethernet-Standard definiert.</li>\r\n    </ul>\r\n    <p>\r\n      Dieses Verfahren wird als <strong>Exponential Backoff</strong> bezeichnet und ist ein Kernelement von CSMA/CD.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      Ethernetで<strong>衝突</strong>が発生した後、衝突した機器はまず<strong>通信路が空いているか</strong>を監視します。\r\n      空いていればすぐには再送信せず、以下の処理が行われます：\r\n    </p>\r\n    <ul>\r\n      <li>各機器は<strong>[0, d]の範囲でランダムな待機時間</strong>を選びます。</li>\r\n      <li>その間、再送信を控え、他機器とタイミングが重ならないようにします。</li>\r\n      <li>待機中に通信路が再び使用されていなければ、<strong>待機時間終了後に再送信</strong>を行います。</li>\r\n      <li>もし再び衝突が発生した場合、<strong>次の待機範囲が倍に拡大</strong>されます： [0, 2d] → [0, 4d] → [0, 8d] …</li>\r\n      <li>このようにして再送タイミングが徐々にずらされ、<strong>衝突の再発を防ぐ仕組み</strong>になっています。</li>\r\n      <li>この「d」は標準規格で定義されており、Ethernetの仕様に従って管理されます。</li>\r\n    </ul>\r\n    <p>\r\n      この方式は<strong>指数的バックオフ（Exponential Backoff）</strong>と呼ばれ、CSMA/CDの中核を成す機能です。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// No JS logic needed\r\n</script>\r\n\r\n<style scoped>\r\n.border {\r\n  border: 1px solid #ccc;\r\n}\r\n.bg-light {\r\n  background-color: #f8f9fa;\r\n}\r\n</style>\r\n","import script from \"./chapter15_12.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./chapter15_12.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./chapter15_12.vue?vue&type=style&index=0&id=26dc8bfb&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-26dc8bfb\"]])\n\nexport default __exports__"],"names":["_createElementBlock","_hoisted_1","_cache","__exports__"],"sourceRoot":""}