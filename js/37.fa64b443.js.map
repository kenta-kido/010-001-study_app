{"version":3,"file":"js/37.fa64b443.js","mappings":"4QACEA,EAAAA,EAAAA,IAuJM,MAvJNC,EAuJMC,EAAA,KAAAA,EAAA,K,sgNClJR,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_34.vue","webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_34.vue?5a0d"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">3(d) Vergleich: Dijkstra vs. Distance-Vector</h3>\r\n\r\n    <!-- 問題文（Deutsch + 日本語） -->\r\n    <div class=\"border rounded p-3 bg-light mb-4\">\r\n      <p><strong>Aufgabe:</strong><br />\r\n        Vergleichen Sie den Dijkstra-Algorithmus mit dem Distance-Vector-Routing-Algorithmus hinsichtlich der Art der Berechnung der Distanzen.\r\n      </p>\r\n      <hr />\r\n      <p><strong>問題:</strong><br />\r\n        Dijkstra アルゴリズムと Distance-Vector ルーティング アルゴリズムの距離計算方法の違いを比較せよ。\r\n      </p>\r\n    </div>\r\n\r\n    <!-- 解答：ドイツ語 & 日本語 横並び -->\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6\">\r\n        <h5>Antwort (Deutsch)</h5>\r\n        <p><strong>Dijkstra (Link-State):</strong></p>\r\n        <ul>\r\n          <li>Jeder Router kennt <span style=\"color: red;\">die vollständige Netzwerktopologie und alle Link-Kosten.</span></li>\r\n          <li>Der Algorithmus <span style=\"color: red;\">startet am Quellknoten</span> und baut schrittweise den kürzesten Pfadbaum auf.</li>\r\n          <li>In jedem Schritt wird der Knoten mit der derzeit geringsten bekannten Distanz gewählt (greedy-Verfahren).</li>\r\n          <li>Alle Distanzen werden zentral im Router selbst berechnet (globales Wissen).</li>\r\n          <li>Erfordert Konsistenz zwischen allen Routern – z.B. durch regelmäßige Link-State-Updates.</li>\r\n        </ul>\r\n        <p><strong>Distance-Vector:</strong></p>\r\n        <ul>\r\n          <li>Jeder Router kennt <span style=\"color: red;\">nur direkte Nachbarn und deren gemeldete Distanzen.</span></li>\r\n          <li>In regelmäßigen Intervallen <span style=\"color: red;\">tauschen Nachbarn ihre Distanzvektoren aus</span>.</li>\r\n          <li>Jeder Router berechnet D(y) = min(c(x, v) + Dv(y)) für alle Nachbarn v (Bellman-Ford-Prinzip).</li>\r\n          <li>Konvergenz erfolgt schrittweise – bei Änderungen kann es lange dauern (z.B. Count-to-Infinity).</li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div class=\"col-md-6\">\r\n        <h5>解答（日本語）</h5>\r\n        <p><strong>Dijkstra（リンク状態型）:</strong></p>\r\n        <ul>\r\n          <li><span style=\"color: red;\">各ルーターはネットワーク全体の構成（トポロジー）と全リンクのコストを把握</span>しています。</li>\r\n          <li>アルゴリズムは<span style=\"color: red;\">出発ノード</span>から始まり、最短距離のノードを順に選んでいく貪欲法で動作します。</li>\r\n          <li>各ステップで、既知ノードに隣接するノードの距離を更新し、最も短いノードを確定させます。</li>\r\n          <li>計算は各ルーターが独立して実行し、自身の転送テーブルを作ります。</li>\r\n          <li>トポロジーが変化した場合は、全ルーターにLink-State情報を再配布する必要があります。</li>\r\n        </ul>\r\n        <p><strong>Distance Vector（距離ベクトル型）:</strong></p>\r\n        <ul>\r\n          <li><span style=\"color: red;\">各ルーターは自分の隣接ノードからのみ情報を受け取り、ネットワーク全体の構造は知りません</span>。</li>\r\n          <li>定期的に<span style=\"color: red;\">隣接ノードと経路情報（距離ベクトル）を交換</span>します。</li>\r\n          <li>各ノードは Bellman-Ford の式：D(y) = min(c(x,v) + Dv(y)) を使って距離を計算します。</li>\r\n          <li>計算はネットワーク全体に分散して行われ、収束には時間がかかることがあります。</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n\r\n<!-- 解説 -->\r\n<div class=\"row mt-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Beim Link-State-Routing sendet jeder Router Informationen über seine direkten Verbindungen an alle anderen Router im Netz.\r\n      So entsteht eine vollständige Karte („Topologie“) der Netzstruktur.\r\n      Jeder Router kennt also nicht nur seine Nachbarn, sondern das gesamte Netzwerk.\r\n      Auch die Kosten (z.B. Verzögerung, Bandbreite) aller Links sind bekannt.\r\n      Diese globale Sicht ermöglicht die Anwendung des Dijkstra-Algorithmus.\r\n      Jeder Router nutzt dieselbe Information, um unabhängig die besten Pfade zu berechnen.\r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      Link-State方式では、すべてのルーターが自分の隣接ノードとの接続情報をネットワーク全体に通知します。\r\n      それにより、各ルーターがネットワーク全体の構造（トポロジー）を把握できます。\r\n      さらに、すべてのリンクコスト（遅延や帯域など）も各ルーターが把握しています。\r\n      この「全体の見取り図」があることで、Dijkstraアルゴリズムが使えるのです。\r\n      どのルーターも同じ情報を使って、最短経路を自分で計算します。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- 解説 -->\r\n<div class=\"row mt-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Jeder Router besitzt die vollständige Link-State-Datenbank und berechnet daraus lokal die besten Wege.\r\n      Dabei kommt der Dijkstra-Algorithmus zum Einsatz.\r\n      Jeder Router führt diese Berechnung unabhängig aus – ohne Absprache mit anderen.\r\n      Das Ergebnis ist eine Tabelle, die für jedes Ziel angibt, über welchen Nachbarn gesendet werden soll („Forwarding Table“).\r\n      So kann jeder Router eigenständig Pakete weiterleiten.\r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      すべてのルーターは、同じネットワーク情報（Link-Stateデータベース）をもとに、自分で経路を計算します。\r\n      そのときにDijkstraアルゴリズムを使って、全宛先への最短経路を導き出します。\r\n      この計算は他のルーターとは連携せず、自律的に行われます。\r\n      そして「この宛先にはこの隣接ノードを使う」という情報をまとめた表（転送表）を作ります。\r\n      これにより、各ルーターは独立して正しい転送を行うことができます。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- 解説 -->\r\n<div class=\"row mt-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Wenn sich ein Link ändert (z.B. durch Ausfall oder neue Verbindung), informiert der betroffene Router sofort alle anderen.\r\n      Dazu sendet er eine Link-State-Advertisement (LSA) aus.\r\n      Alle Router aktualisieren daraufhin ihre Datenbank und starten die Pfadberechnung neu.\r\n      So bleibt das Routing trotz Änderungen korrekt.\r\n      Diese sofortige Weitergabe von Änderungen macht Link-State sehr reaktionsschnell – aber auch komplex.\r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      ネットワーク内のリンクに変化（故障や新規接続など）があった場合、そのルーターはLink-State Advertisement（LSA）を全体に通知します。\r\n      通知を受け取った他のルーターは、データベースを更新し、再び最短経路を計算し直します。\r\n      これにより、ネットワークの変化に素早く対応できます。\r\n      ただし、全体への通知や再計算が必要になるため、処理は複雑になります。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- 解説 -->\r\n<div class=\"row mt-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Im Distance-Vector-Routing kennt ein Router nur seine direkten Nachbarn und deren Entfernungen zu Zielen.\r\n      Es findet kein Austausch der gesamten Netzstruktur statt.\r\n      Jeder Router vertraut darauf, dass sein Nachbar „weiß“, wie man zu einem Ziel gelangt.\r\n      So entsteht eine verteilte, schrittweise Annäherung an den besten Pfad.\r\n      Das Verfahren ist einfach, benötigt aber Zeit, um sich zu stabilisieren.\r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      Distance Vector 方式では、ルーターは自分の隣接ノードとの接続状況しか知りません。\r\n      ネットワーク全体の構成（トポロジー）を知ることはありません。\r\n      各ルーターは「隣のノードが目的地に行ける」と信じて、経路を決定します。\r\n      このように、経路情報はネットワーク中を段階的に伝わっていきます。\r\n      シンプルですが、収束には時間がかかることがあります。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// Keine Logik erforderlich\r\n</script>\r\n\r\n<style scoped>\r\n.border {\r\n  border: 1px solid #ccc;\r\n}\r\n.bg-light {\r\n  background-color: #f8f9fa;\r\n}\r\n</style>\r\n","import script from \"./chapter15_34.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./chapter15_34.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./chapter15_34.vue?vue&type=style&index=0&id=61301006&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-61301006\"]])\n\nexport default __exports__"],"names":["_createElementBlock","_hoisted_1","_cache","__exports__"],"sourceRoot":""}