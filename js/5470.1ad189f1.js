"use strict";(self["webpackChunkstudy_site"]=self["webpackChunkstudy_site"]||[]).push([[5470],{3235:function(e,n,t){t.r(n),t.d(n,{default:function(){return p}});var s=t(6768),r=t(144),i=t.p+"img/Figure_0305.8fcd148e.png",l=t.p+"img/Figure_0306.af2dc752.png";const a={class:"container my-4"},u={class:"text-center mt-4"},d=["src"],c={class:"text-center mt-4"},k=["src"];var o={__name:"chapter15_36",setup(e){return(e,n)=>((0,s.uX)(),(0,s.CE)("div",a,[n[2]||(n[2]=(0,s.Lk)("h3",{class:"mb-4"},"3(f) Distance Vector – Beispielhafte Ausführung",-1)),n[3]||(n[3]=(0,s.Lk)("div",{class:"border rounded p-3 bg-light mb-4"},[(0,s.Lk)("p",null,[(0,s.Lk)("strong",null,"Aufgabe:"),(0,s.Lk)("br"),(0,s.eW)(" Analysieren Sie die Distance-Vector-Berechnung auf Basis des gegebenen Netzwerkgraphen und der DV-Tabellen. ")]),(0,s.Lk)("hr"),(0,s.Lk)("p",null,[(0,s.Lk)("strong",null,"問題:"),(0,s.Lk)("br"),(0,s.eW)(" 与えられたネットワークとDistance Vectorのテーブルに基づき、各ノードの経路計算がどのように進むかを分析しなさい。 ")])],-1)),(0,s.Lk)("div",u,[(0,s.Lk)("img",{src:(0,r.R1)(i),alt:"Network Topology for Distance Vector",class:"img-fluid rounded"},null,8,d),n[0]||(n[0]=(0,s.Lk)("p",{class:"text-muted mt-2"},"Abbildung: Netzwerkgraph mit drei Knoten",-1))]),(0,s.Lk)("div",c,[(0,s.Lk)("img",{src:(0,r.R1)(l),alt:"Distance Vector Table Progression",class:"img-fluid rounded"},null,8,k),n[1]||(n[1]=(0,s.Lk)("p",{class:"text-muted mt-2"},"Abbildung: Distance-Vector-Algorithmus in Aktion",-1))]),n[4]||(n[4]=(0,s.Lk)("div",{class:"row mt-4"},[(0,s.Lk)("div",{class:"col-md-6"},[(0,s.Lk)("h5",null,"Erklärung (Deutsch)"),(0,s.Lk)("p",null," Jeder Knoten initialisiert seine Tabelle: direkte Nachbarn mit bekannten Kosten, alle anderen mit ∞. Beispielsweise kennt x die Kosten zu y (2) und z (7), aber nicht die Kosten von y nach z. "),(0,s.Lk)("p",null," In der ersten Austauschphase senden sich die Knoten ihre Distanzvektoren zu. y sendet z.B. seine Werte an x, woraufhin x bemerkt, dass es z über y mit Kosten 2+1=3 erreichen kann – besser als direkt (7). "),(0,s.Lk)("p",null," In weiteren Runden werden Tabellen aktualisiert, bis keine Änderungen mehr auftreten. So konvergiert das System zu den kürzesten Pfaden. ")]),(0,s.Lk)("div",{class:"col-md-6"},[(0,s.Lk)("h5",null,"解説（日本語）"),(0,s.Lk)("p",null," 各ノードは初期状態で、隣接ノードへのコストのみを知っています（それ以外は∞）。たとえばxはyへ2、zへ7と設定します。 "),(0,s.Lk)("p",null," 最初の交換フェーズでは、各ノードが距離ベクトルを隣接ノードに送信します。たとえばyがxにベクトルを送ることで、 xはzへ直接7ではなく、yを経由して2+1=3で到達できると学習し、テーブルを更新します。 "),(0,s.Lk)("p",null," このように、情報交換とテーブル更新が繰り返され、最終的にすべてのノードが最短経路を学習して収束します。 ")])],-1))]))}},g=t(1241);const m=(0,g.A)(o,[["__scopeId","data-v-827a88ea"]]);var p=m}}]);
//# sourceMappingURL=5470.1ad189f1.js.map