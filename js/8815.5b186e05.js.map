{"version":3,"file":"js/8815.5b186e05.js","mappings":"gRACEA,EAAAA,EAAAA,IAgDM,MAhDNC,EAgDMC,EAAA,KAAAA,EAAA,K,i4DC3CR,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_12.vue","webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_12.vue?6b3b"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">1(b) Medienzugriff – Kollisionen bei Ethernet</h3>\r\n\r\n    <!-- 問題文（Deutsch + 日本語） -->\r\n    <div class=\"border rounded p-3 bg-light mb-4\">\r\n      <p><strong>Aufgabe:</strong><br />\r\n        A und B wollen gleichzeitig IP Datagramme über Ethernet senden. Wie werden Kollisionen vermieden bzw was passiert?\r\n      </p>\r\n      <hr />\r\n      <p><strong>問題:</strong><br />\r\n        A と B が同時に Ethernet 上で IP データグラムを送信しようとする場合、衝突はどのように回避されるのか？または、何が起こるのか？\r\n      </p>\r\n    </div>\r\n\r\n    <!-- 解答：ドイツ語 & 日本語 横並び -->\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6\">\r\n        <h5>Antwort (Deutsch)</h5>\r\n        <p>\r\n          In klassischen (halbduplexen) Ethernet-Netzen wird das CSMA/CD-Verfahren (Carrier Sense Multiple Access with Collision Detection) verwendet:\r\n        </p>\r\n        <ul>\r\n          <li>Jeder Host „lauscht“ zunächst auf das Medium, ob es frei ist.</li>\r\n          <li>Wenn es frei ist, beginnt der Host mit der Übertragung.</li>\r\n          <li>Kommt es dennoch zu einer Kollision, erkennen die Sender das und senden ein sogenanntes „Jamming Signal“.</li>\r\n          <li>Danach warten sie eine zufällige Zeit (Backoff) und versuchen es erneut.</li>\r\n        </ul>\r\n        <p>\r\n          Bei modernen Switched-Ethernet-Netzen mit Vollduplexbetrieb gibt es keine Kollisionen mehr, da jeder Host eine direkte Verbindung zum Switch hat.\r\n        </p>\r\n      </div>\r\n\r\n      <div class=\"col-md-6\">\r\n        <h5>解答（日本語）</h5>\r\n        <p>\r\n          古典的な（半二重の）Ethernet では、CSMA/CD（搬送波感知多重アクセス／衝突検出）方式が使用されます：\r\n        </p>\r\n        <ul>\r\n          <li>各ホストは、まず通信媒体が空いているかを確認します。</li>\r\n          <li>空いていれば送信を開始します。</li>\r\n          <li>もし衝突が発生した場合、送信者はそれを検出して「ジャミング信号」を送信します。</li>\r\n          <li>その後、一定のランダムな時間（バックオフ）を待って再送信を試みます。</li>\r\n        </ul>\r\n        <p>\r\n          一方、現代のスイッチを用いたフルデュプレックス Ethernet では、ホストはスイッチと直接接続されているため、衝突は発生しません。\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// No JS logic needed\r\n</script>\r\n\r\n<style scoped>\r\n.border {\r\n  border: 1px solid #ccc;\r\n}\r\n.bg-light {\r\n  background-color: #f8f9fa;\r\n}\r\n</style>\r\n","import script from \"./chapter15_12.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./chapter15_12.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./chapter15_12.vue?vue&type=style&index=0&id=339be5a5&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-339be5a5\"]])\n\nexport default __exports__"],"names":["_createElementBlock","_hoisted_1","_cache","__exports__"],"sourceRoot":""}