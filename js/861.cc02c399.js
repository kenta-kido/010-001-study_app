"use strict";(self["webpackChunkstudy_site"]=self["webpackChunkstudy_site"]||[]).push([[861],{861:function(e,a,t){t.r(a),t.d(a,{default:function(){return f}});var n=t(6768),d=t(7806);const i={class:"container my-4"};var r={__name:"chapter15_30",setup(e){return(e,a)=>((0,n.uX)(),(0,n.CE)("div",i,a[0]||(a[0]=[(0,n.Fv)('<h3 class="mb-4" data-v-739387f0>3(a) Dijkstra – Start und Initialisierung</h3><div class="border rounded p-3 bg-light mb-4" data-v-739387f0><p data-v-739387f0><strong data-v-739387f0>Aufgabe:</strong><br data-v-739387f0> Wie startet der Algorithmus und wie wird das Basiskantengewicht berechnet?<br data-v-739387f0> (Hinweis: Der Begriff „Basiskantengewicht“ war vermutlich nicht korrekt formuliert.) </p><hr data-v-739387f0><p data-v-739387f0><strong data-v-739387f0>問題:</strong><br data-v-739387f0> Dijkstraアルゴリズムはどのように開始され、初期の重み（基準エッジの重み？）はどのように決定されるか？<br data-v-739387f0> （※「Basiskantengewicht」は誤った表現だった可能性あり） </p></div><div class="row" data-v-739387f0><div class="col-md-6" data-v-739387f0><h5 data-v-739387f0>Antwort (Deutsch)</h5><p data-v-739387f0> Der Dijkstra-Algorithmus startet bei einem gegebenen Startknoten (z.B. A) und setzt dessen Distanz auf 0. Alle anderen Knoten erhalten zunächst den Wert ∞ (unendlich) als vorläufige Distanz. </p><p data-v-739387f0> Dann prüft man alle direkten Nachbarn des Startknotens. Die Kosten (Kanten­gewichte) zu diesen Nachbarn werden als vorläufige Distanzen gesetzt. Diese stammen direkt aus der gegebenen Topologie – es ist keine spezielle Berechnung notwendig. </p><p data-v-739387f0> Danach wird iterativ der Knoten mit der kleinsten bekannten Distanz ausgewählt und alle seine Nachbarn werden mithilfe der Formel<br data-v-739387f0><code data-v-739387f0>D(v) = min(D(v), D(w) + c(w,v))</code><br data-v-739387f0> aktualisiert („Relaxierung“). </p></div><div class="col-md-6" data-v-739387f0><h5 data-v-739387f0>解答（日本語）</h5><p data-v-739387f0> Dijkstra アルゴリズムは、出発ノード（例：A）から開始し、そのノードの距離を 0 に設定します。 他のすべてのノードの距離は初期状態として無限大（∞）とされます。 </p><p data-v-739387f0> 次に、開始ノードに直接接続された隣接ノードを確認し、そのリンクのコストを初期距離として設定します。 この時点でのコストは既知のもので、計算というよりも与えられた値の代入です。 </p><p data-v-739387f0> その後、未確定ノードの中から最小距離のノードを選び、そのノードの隣接ノードに対して <br data-v-739387f0><code data-v-739387f0>D(v) = min(D(v), D(w) + c(w,v))</code><br data-v-739387f0> を用いて距離を更新します（これを「緩和処理」またはリラクゼーションと呼びます）。 </p></div></div><div class="text-center my-4" data-v-739387f0><img src="'+d+'" alt="Dijkstra Beispielgraph" class="img-fluid rounded border" data-v-739387f0><p class="text-muted mt-2" data-v-739387f0>図 3.3 — Dijkstraアルゴリズムの初期ステップ</p></div><div class="row mt-4" data-v-739387f0><div class="col-md-6" data-v-739387f0><h5 data-v-739387f0>Erklärung (Deutsch)</h5><p data-v-739387f0> In Zeile 2–6 wird die Initialisierung vorgenommen: Nur der Startknoten ist im Set <code data-v-739387f0>N′</code>, alle anderen bekommen initiale Distanzwerte. In der ersten Runde werden nur direkte Nachbarn betrachtet. Die sogenannten „Kantengewichte“ sind hier einfach die gegebenen Verbindungskosten. </p></div><div class="col-md-6" data-v-739387f0><h5 data-v-739387f0>解説（日本語）</h5><p data-v-739387f0> アルゴリズムの2〜6行目では初期化を行い、スタートノードのみが探索済み集合に追加されます。 初期コストは、直接接続されているノードとのリンクコストに基づいて設定されます。 これが「初期エッジ重み」の意味で、特に式で導くのではなく、図から与えられる値です。 </p></div></div>',5)])))}},s=t(1241);const v=(0,s.A)(r,[["__scopeId","data-v-739387f0"]]);var f=v},7806:function(e,a,t){e.exports=t.p+"img/Figure_0303.1950f60d.png"}}]);
//# sourceMappingURL=861.cc02c399.js.map