{"version":3,"file":"js/1217.4ec15ed5.js","mappings":"wWACEA,EAAAA,EAAAA,IAsKM,MAtKNC,EAsKM,C,mpDApGRC,EAAAA,EAAAA,IAGM,MAHNC,EAGM,EAFJD,EAAAA,EAAAA,IAAqF,OAA/EE,KAAKC,EAAAA,EAAAA,IAAAC,GAAOC,IAAI,4BAA4BC,MAAM,4B,uBACxDN,EAAAA,EAAAA,IAA0G,KAAvGM,MAAM,mBAAkB,+EAA2E,M,q3FClExG,MAAMC,EAAc,EAEpB,O","sources":["webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_90_ex.vue","webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_90_ex.vue?6a01"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">TCP Überlastkontroll</h3>\r\n\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Was ist der Zweck von „Slow Start“ in TCP und wie funktioniert es?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    TCP における「Slow Start（スロー・スタート）」の目的と動作とは？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Slow Start ist der erste Zustand der TCP-Kongestionskontrolle.  \r\n      Es dient dazu, die Übertragungsrate vorsichtig zu erhöhen, um die verfügbare Bandbreite zu erkunden.\r\n    </p>\r\n    <p>\r\n      Beginnend mit einem cwnd von 1 oder 2 MSS wird das Fenster bei jedem ACK exponentiell vergrößert.  \r\n      Nach jedem RTT verdoppelt sich cwnd typischerweise.\r\n    </p>\r\n    <p>\r\n      Wenn cwnd den ssthresh erreicht, geht TCP in die Phase „Congestion Avoidance“ über und wächst nur noch linear.\r\n    </p>\r\n    <p>\r\n      Bei Paketverlusten reagiert TCP unterschiedlich je nach Variante:  \r\n    </p>\r\n    <ul>\r\n    <li>\r\n      TCP Tahoe setzt cwnd sofort auf 1 MSS zurück und beginnt wieder mit Slow Start.  \r\n    </li>\r\n    <li>\r\n      TCP Reno hingegen geht bei dreifachen Duplikat-ACKs in die Phase „Fast Recovery“ über, in der linear gewachsen wird – analog zur Congestion Avoidance.\r\n      </li>\r\n    </ul>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      Slow Start は TCP 輻輳制御の最初のフェーズであり、ネットワーク帯域を徐々に探索するため、送信速度を慎重に増加させます。\r\n    </p>\r\n    <p>\r\n      開始時の cwnd（輻輳ウィンドウ）は通常 1〜2 MSS で、ACK を受信するたびに指数関数的に増加し、RTT ごとにおよそ倍になります。\r\n    </p>\r\n    <p>\r\n      cwnd が ssthresh（しきい値）に達すると、TCP は Congestion Avoidance フェーズに移行し、以降の成長は線形になります。\r\n    </p>\r\n    <p>\r\n      パケット損失時の挙動は TCP の実装によって異なります：  \r\n    </p>\r\n    <ul>\r\n      <li>  \r\n      TCP Tahoe では cwnd を 1 MSS に戻して再び Slow Start に入り、指数的にやり直します。  \r\n      </li>\r\n      <li>  \r\n      一方 TCP Reno は 3 重複 ACK を検出した場合、Fast Recovery に入り、cwnd を半分に減らした後、Congestion Avoidance のように線形に増加を続けます。\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n\r\n<!-- Abbildung -->\r\n<div class=\"text-center mb-4\">\r\n  <img :src=\"image\" alt=\"Poisoned Reverse Beispiel\" class=\"img-fluid rounded border\" />\r\n  <p class=\"text-muted mt-2\">Abbildung: Beispiel – Linkkostenänderung und Anwendung von Poisoned Reverse</p>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Wie funktioniert „Congestion Avoidance“ im TCP-Protokoll?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    TCP における「Congestion Avoidance（輻輳回避）」の仕組みとは？\r\n  </p>\r\n</div>\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Nach der Slow-Start-Phase beginnt TCP mit „Congestion Avoidance“, um Netzwerküberlastung zu vermeiden.  \r\n      Die Erhöhung von cwnd erfolgt nur noch linear (z.&nbsp;B. 1 MSS pro RTT).\r\n    </p>\r\n    <p>\r\n      Ziel ist es, vorsichtig weiter zu wachsen, solange kein Verlustsignal auftritt.  \r\n      Dies vermeidet plötzliche Überlastung und sorgt für stabile Durchsatzleistung.\r\n    </p>\r\n    <p>\r\n      Bei Paketverlust wird der Schwellenwert <code>ssthresh</code> auf <code>cwnd / 2</code> gesetzt, um künftiges Wachstum zu bremsen.\r\n    </p>\r\n    <p>\r\n      In TCP Tahoe wird <code>cwnd</code> nach dem Verlust auf 1 MSS zurückgesetzt – ein vollständiger Neustart in Slow Start.  \r\n      TCP Reno hingegen reduziert <code>cwnd</code> ebenfalls, startet aber mit dem neuen <code>ssthresh</code> direkt in die Phase „Fast Recovery“.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      TCPは Slow Start の後、「Congestion Avoidance」フェーズに移行し、ネットワークの輻輳を回避することを目的とします。\r\n    </p>\r\n    <p>\r\n      このフェーズでは cwnd の増加が線形（1 RTT あたり約 1 MSS）となり、成長はより慎重になります。\r\n    </p>\r\n    <p>\r\n      パケット損失が発生した際には、<code>ssthresh</code> が現在の <code>cwnd / 2</code> に設定され、成長を抑える制限が設けられます。\r\n    </p>\r\n    <p>\r\n      TCP Tahoeでは、損失後に<code>cwnd</code>を1 MSSまでリセットし、Slow Start からやり直します。  \r\n      一方、TCP Renoは<code>ssthresh</code>を使って<code>cwnd</code>を減少させた後、Fast Recovery フェーズに入り、通信を完全に止めずに再開します。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Was ist „Fast Recovery“ in TCP und wann wird es verwendet?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    TCP における「Fast Recovery（高速回復）」は何か？ いつ使われるのか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Fast Recovery ist eine spezielle Reaktion in TCP Reno, die aktiviert wird, wenn drei duplizierte ACKs empfangen werden – ein Hinweis auf Paketverlust.\r\n    </p>\r\n    <p>\r\n      TCP halbiert in diesem Fall das aktuelle cwnd (cwnd = cwnd / 2), setzt ssthresh auf denselben Wert und erhöht cwnd sofort um 3 MSS,  \r\n      um den Verlust bereits teilweise zu kompensieren.\r\n    </p>\r\n    <p>\r\n      Nach dem Empfang eines neuen, nicht duplizierten ACKs verlässt TCP die Fast-Recovery-Phase und setzt das Wachstum linear im Stil von Congestion Avoidance fort.\r\n    </p>\r\n    <p>\r\n      Dies unterscheidet sich von TCP Tahoe, wo bei Verlust immer auf cwnd = 1 MSS zurückgesetzt und Slow Start erneut begonnen wird.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      Fast Recovery は TCP Reno における動作で、3つの重複ACKを受信した場合に発動されます。これはパケット損失の軽度な兆候とみなされます。\r\n    </p>\r\n    <p>\r\n      この場合 TCP は cwnd を現在値の半分（cwnd = cwnd / 2）に減少させ、ssthresh も同じ値に設定します。さらに 3 MSS を加算して速やかな再送を行います。\r\n    </p>\r\n    <p>\r\n      その後、新しい非重複ACKを受信すると Fast Recovery フェーズを終了し、Congestion Avoidance に入り線形成長（1 MSS / RTT）を再開します。\r\n    </p>\r\n    <p>\r\n      これは TCP Tahoe の挙動（常に cwnd = 1 MSS に戻って Slow Start に入る）とは対照的です。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport image from '@/assets/lecture/lecture03/Figure_0801.png'\r\n</script>\r\n","import script from \"./chapter15_90_ex.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./chapter15_90_ex.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","src","_unref","image","alt","class","__exports__"],"sourceRoot":""}