"use strict";(self["webpackChunkstudy_site"]=self["webpackChunkstudy_site"]||[]).push([[2085],{9237:function(e,a,n){n.r(a),n.d(a,{default:function(){return v}});var t=n(6768),d=n(144),r=n.p+"img/Figure_0304.4ca01289.png";const s={class:"container my-4"},i={class:"text-center mt-4"},c=["src"];var l={__name:"chapter15_35",setup(e){return(e,a)=>((0,t.uX)(),(0,t.CE)("div",s,[a[1]||(a[1]=(0,t.Lk)("h3",{class:"mb-4"},"3(e) Distance Vector – Algorithmus und Funktionsweise",-1)),a[2]||(a[2]=(0,t.Lk)("div",{class:"border rounded p-3 bg-light mb-4"},[(0,t.Lk)("p",null,[(0,t.Lk)("strong",null,"Aufgabe:"),(0,t.Lk)("br"),(0,t.eW)(" Erklären Sie den Ablauf des Distance-Vector-Algorithmus anhand der abgebildeten Pseudocode-Variante. ")]),(0,t.Lk)("hr"),(0,t.Lk)("p",null,[(0,t.Lk)("strong",null,"問題:"),(0,t.Lk)("br"),(0,t.eW)(" 図に示された擬似コードをもとに、Distance Vector アルゴリズムの処理の流れを説明しなさい。 ")])],-1)),(0,t.Lk)("div",i,[(0,t.Lk)("img",{src:(0,d.R1)(r),alt:"Distance Vector Algorithm",class:"img-fluid rounded"},null,8,c),a[0]||(a[0]=(0,t.Lk)("p",{class:"text-muted mt-2"},"Abbildung: Pseudocode des Distance-Vector-Algorithmus",-1))]),a[3]||(a[3]=(0,t.Fv)('<div class="row" data-v-1aa405dc><div class="col-md-6" data-v-1aa405dc><h5 data-v-1aa405dc>Antwort (Deutsch)</h5><p data-v-1aa405dc> Beim Distance-Vector-Algorithmus initialisiert jeder Knoten x seine Kosten zu allen Zielen y: direkte Nachbarn erhalten den Link-Wert, andere ∞. </p><p data-v-1aa405dc> Dann sendet x seinen aktuellen Distanzvektor an alle Nachbarn. Jeder Knoten wartet anschließend auf Änderungen – entweder an den Linkkosten oder durch neue Vektoren von Nachbarn. </p><p data-v-1aa405dc> Nach Erhalt eines Vektors berechnet x für jedes Ziel y die neue Distanz: min {c(x,v) + Dv(y)} über alle Nachbarn v. </p><p data-v-1aa405dc> Falls sich der Vektor von x ändert, wird er erneut an alle Nachbarn gesendet. Der Vorgang läuft fortlaufend. </p><p data-v-1aa405dc> Der Algorithmus endet praktisch erst dann, wenn sich keine Distanzvektoren mehr ändern – das heißt, alle Pfadkosten sind stabil. In diesem stabilen Zustand gibt es keine weiteren Aktualisierungen. </p></div><div class="col-md-6" data-v-1aa405dc><h5 data-v-1aa405dc>解答（日本語）</h5><p data-v-1aa405dc> Distance Vector アルゴリズムでは、各ノード x が他の全てのノード y への距離を初期化します。 近隣ノードには実際のリンクコスト、それ以外には無限大（∞）を設定します。 </p><p data-v-1aa405dc> 初期化後、x は自分の距離ベクトルを全隣接ノードに送信します。 各ノードはリンクコストの変化または隣接ノードからの新しい距離ベクトルを待機します。 </p><p data-v-1aa405dc> 新しいベクトルを受信した際には、各宛先 y に対して 「c(x,v) + Dv(y)」の最小値を計算して自身の D(x)(y) を更新します。 </p><p data-v-1aa405dc> ベクトルに変更があった場合のみ、全隣接ノードに再送信します。このプロセスは繰り返し続きます。 </p><p data-v-1aa405dc> アルゴリズムは、すべてのノードの距離ベクトルが変化しなくなり、ネットワーク全体で 距離情報が安定した時点で終了します。これは最短経路が全て確定した状態です。 </p></div></div>',1))]))}},u=n(1241);const o=(0,u.A)(l,[["__scopeId","data-v-1aa405dc"]]);var v=o}}]);
//# sourceMappingURL=2085.2e1b9426.js.map