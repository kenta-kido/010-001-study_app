"use strict";(self["webpackChunkstudy_site"]=self["webpackChunkstudy_site"]||[]).push([[7126],{7126:function(e,a,t){t.r(a),t.d(a,{default:function(){return d}});var n=t(6768);const s={class:"container my-4"};var i={__name:"chapter15_93",setup(e){return(e,a)=>((0,n.uX)(),(0,n.CE)("div",s,a[0]||(a[0]=[(0,n.Fv)('<h3 class="mb-4" data-v-b7146e9c>9(c) CUBIC vs. AIMD – Wachstumsverhalten &amp; Reaktion auf Überlastung</h3><div class="border rounded p-3 bg-light mb-4" data-v-b7146e9c><p data-v-b7146e9c><strong data-v-b7146e9c>Aufgabe:</strong><br data-v-b7146e9c> Vergleichen Sie das Wachstumsverhalten und die Reaktionsgeschwindigkeit von CUBIC mit AIMD.<br data-v-b7146e9c> Wie unterscheiden sich die beiden Ansätze im Verhalten bei Netzüberlastung und in der Erholungsphase? (4P) </p><hr data-v-b7146e9c><p data-v-b7146e9c><strong data-v-b7146e9c>問題:</strong><br data-v-b7146e9c> TCP CUBIC と AIMD のウィンドウサイズの増加傾向や反応速度を比較し、<br data-v-b7146e9c> 輻輳時の挙動および回復フェーズにおける違いを述べよ。（4点） </p></div><div class="row" data-v-b7146e9c><div class="col-md-6" data-v-b7146e9c><h5 data-v-b7146e9c>Antwort (Deutsch)</h5><ul data-v-b7146e9c><li data-v-b7146e9c><strong data-v-b7146e9c>AIMD:</strong> Fenster wächst linear (langsam) und halbiert sich bei Verlust.</li><li data-v-b7146e9c>Reagiert empfindlich auf Verluste, braucht lange zur Erholung.</li><li data-v-b7146e9c>Gut für Fairness, aber ineffizient in Hochgeschwindigkeitsnetzen.</li><li data-v-b7146e9c>Erholung basiert nur auf Empfangsrate.</li></ul><ul data-v-b7146e9c><li data-v-b7146e9c><strong data-v-b7146e9c>CUBIC:</strong> Wachstum ist nicht linear, sondern kubisch (t³).</li><li data-v-b7146e9c>Nach einem Verlust wächst cwnd zunächst langsam (nahe W<sub data-v-b7146e9c>max</sub>), dann schnell.</li><li data-v-b7146e9c>Erholung ist schneller, da die Zeitkomponente unabhängig von RTT ist.</li><li data-v-b7146e9c>Besser für hohe Bandbreiten und lange Latenz geeignet.</li></ul></div><div class="col-md-6" data-v-b7146e9c><h5 data-v-b7146e9c>解答（日本語）</h5><ul data-v-b7146e9c><li data-v-b7146e9c><strong data-v-b7146e9c>AIMD：</strong> 輻輳ウィンドウは線形（遅い）に増加し、損失時に半減する。</li><li data-v-b7146e9c><span style="color:red;" data-v-b7146e9c>損失に敏感</span>で、<span style="color:red;" data-v-b7146e9c>回復には時間</span>がかかる。</li><li data-v-b7146e9c><span style="color:red;" data-v-b7146e9c>公平性は高い</span>が、<span style="color:red;" data-v-b7146e9c>高帯域ネットワークでは非効率</span>。</li><li data-v-b7146e9c>回復速度はRTTに依存。</li></ul><ul data-v-b7146e9c><li data-v-b7146e9c><strong data-v-b7146e9c>CUBIC：</strong> 増加は線形ではなく三次関数的（t³）である。</li><li data-v-b7146e9c><span style="color:red;" data-v-b7146e9c>損失直後はゆるやかに、W<sub data-v-b7146e9c>max</sub>から離れると急速に成長</span>する。</li><li data-v-b7146e9c>RTT に依存せず、回復が速い。</li><li data-v-b7146e9c><span style="color:red;" data-v-b7146e9c>高帯域・高遅延ネットワークに最適化</span>されている。</li></ul></div></div><div class="row mt-4" data-v-b7146e9c><div class="col-md-6" data-v-b7146e9c><h5 data-v-b7146e9c>Erklärung (Deutsch)</h5><p data-v-b7146e9c> Der Begriff <strong data-v-b7146e9c>Reaktionsgeschwindigkeit</strong> beschreibt, wie schnell ein Protokoll auf Netzwerkereignisse wie Paketverluste oder Überlastungen reagiert. <br data-v-b7146e9c> Bei <strong data-v-b7146e9c>AIMD</strong> erfolgt die Reaktion auf Verluste sofort, indem das Fenster halbiert wird. Das anschließende Wachstum ist jedoch langsam (linear), was die Erholung verzögert.<br data-v-b7146e9c><strong data-v-b7146e9c>CUBIC</strong> hingegen nutzt eine kubische Funktion der Zeit, wodurch die Reaktion auf Verluste zunächst vorsichtig, dann aber deutlich schneller erfolgt – unabhängig von der RTT. Dies führt zu einer schnelleren Rückkehr zur maximalen Fenstergröße nach einer Überlastung. </p></div><div class="col-md-6" data-v-b7146e9c><h5 data-v-b7146e9c>解説（日本語）</h5><p data-v-b7146e9c><strong data-v-b7146e9c>Reaktionsgeschwindigkeit（反応速度）</strong>とは、ネットワークの混雑やパケット損失などのイベントに対して、プロトコルがどれだけ速く反応・適応するかを示す概念です。<br data-v-b7146e9c><strong data-v-b7146e9c>AIMD</strong>は、損失が発生すると即座にウィンドウを半分に減らしますが、その後の回復は線形的で遅いため、復旧には時間がかかります。<br data-v-b7146e9c> 一方で、<strong data-v-b7146e9c>CUBIC</strong>は時間に基づいた三次関数的な成長を行い、最初はゆっくりですが、時間が経つと急速にウィンドウを拡大します。この回復はRTTに依存しないため、より迅速に最大ウィンドウサイズへと戻ることができます。 </p></div></div>',4)])))}},c=t(1241);const r=(0,c.A)(i,[["__scopeId","data-v-b7146e9c"]]);var d=r}}]);
//# sourceMappingURL=7126.a43f0495.js.map