{"version":3,"file":"js/2018.24b9ee0a.js","mappings":"wLACOA,MAAM,kB,kCAAXC,EAAAA,EAAAA,IAuPM,MAvPNC,EAuPMC,EAAA,KAAAA,EAAA,K,y9PCvPR,MAAMC,EAAS,CAAC,EAKVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://study-site/./src/views/lecture/lecture04/chapter03/chapter03_32.vue","webpack://study-site/./src/views/lecture/lecture04/chapter03/chapter03_32.vue?3162"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">3.3.2 UDP Checksum</h3>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          The UDP checksum provides for error detection. That is, the checksum is used to determine whether bits within the UDP segment have been altered (for example, by noise in the links or while stored in a router) as it moved from source to destination.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          UDPチェックサムはエラー検出のために使用されます。つまり、UDPセグメント内のビットが、送信元から宛先に移動する過程（例えばリンク上のノイズやルータ内での保管中）で変更されていないかを判断するために使われます。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          UDP at the sender side performs the 1’s complement of the sum of all the 16-bit words in the segment, with any overflow encountered during the sum being wrapped around. This result is put in the checksum field of the UDP segment.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          送信側のUDPは、セグメント内のすべての16ビットワードを加算し、その1の補数を取ります。加算中にオーバーフローが発生した場合、その分は繰り返して加算されます。この結果がUDPセグメントのチェックサムフィールドに格納されます。\r\n        </p>\r\n      </div>\r\n    </div>\r\n    <!-- 元の3ワード -->\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-md-6\">\r\n        <p>Original 16-bit words:</p>\r\n        <pre class=\"pre-block\">\r\n0110011001100000\r\n0101010101010101\r\n1000111100001100\r\n        </pre>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">元の16ビットワード：</p>\r\n        <pre class=\"pre-block text-muted\">\r\n0110011001100000\r\n0101010101010101\r\n1000111100001100\r\n        </pre>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 最初の2つの加算 -->\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-md-6\">\r\n        <p>Sum of first two words:</p>\r\n        <pre class=\"pre-block\">\r\n  0110011001100000\r\n+ 0101010101010101\r\n────────────────────\r\n  1011101110110101\r\n        </pre>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">最初の2ワードの合計：</p>\r\n        <pre class=\"pre-block text-muted\">\r\n  0110011001100000\r\n+ 0101010101010101\r\n────────────────────\r\n  1011101110110101\r\n        </pre>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 3番目との加算 -->\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-md-6\">\r\n        <p>Add third word:</p>\r\n        <pre class=\"pre-block\">\r\n  1011101110110101\r\n+ 1000111100001100\r\n────────────────────\r\n  0100101011000010\r\n        </pre>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">3番目を加算：</p>\r\n        <pre class=\"pre-block text-muted\">\r\n  1011101110110101\r\n+ 1000111100001100\r\n────────────────────\r\n  0100101011000010\r\n        </pre>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 1の補数 -->\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-md-6\">\r\n        <p>1's Complement:</p>\r\n        <pre class=\"pre-block\">\r\nOriginal : 0100101011000010\r\n1's Comp : 1011010100111101\r\n        </pre>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">1の補数：</p>\r\n        <pre class=\"pre-block text-muted\">\r\n元の値  : 0100101011000010\r\n1の補数 : 1011010100111101\r\n        </pre>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          Note that this last addition had overflow, which was wrapped around. The 1's complement is obtained by converting all the 0s to 1s and all the 1s to 0s.\r\n        </p>\r\n        <p>\r\n          Thus, the 1’s complement of 01001010110000010 is:\r\n        </p>\r\n        <pre>10110101001111101</pre>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          この最後の加算にはオーバーフローがあり、それは繰り返して加算されました。1の補数は、すべての0を1に、1を0に変換することで得られます。\r\n        </p>\r\n        <p class=\"text-muted\">\r\n          したがって、01001010110000010 の1の補数は次のようになります：\r\n        </p>\r\n        <pre class=\"text-muted\">10110101001111101</pre>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- チェックサム確認 -->\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          At the receiver, all words (including checksum) are added.\r\n          If the result is <code>1111111111111111</code>, no error occurred.\r\n          Otherwise, an error is detected.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          受信側ではすべてのワード（チェックサム含む）を加算し、結果が <code>1111111111111111</code> であればエラーはありません。そうでなければ、エラーが検出されたと判断します。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n        <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          You may wonder why UDP provides a checksum in the first place, as many\r\n          link-layer protocols (including the popular Ethernet protocol) also provide error\r\n          checking.\r\n        </p>\r\n        <p>\r\n          The reason is that there is no guarantee that all the links between source\r\n          and destination provide error checking; that is, one of the links may use a link-layer\r\n          protocol that does not provide error checking.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          多くのリンク層プロトコル（人気のあるイーサネットなど）もエラーチェックを提供している中で、なぜUDPがわざわざチェックサムを提供しているのか疑問に思うかもしれません。\r\n        </p>\r\n        <p class=\"text-muted\">\r\n          その理由は、送信元から宛先までのすべてのリンクがエラーチェックを提供しているとは限らないからです。つまり、一部のリンクではエラーチェックを提供しないリンク層プロトコルが使われている可能性があります。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          Furthermore, even if segments are correctly transferred across a link, it’s possible\r\n          that bit errors could be introduced when a segment is stored in a router’s memory.\r\n          Given that neither link-by-link reliability nor in-memory error detection is guaranteed,\r\n          UDP must provide error detection at the transport layer, on an end-end basis, if the\r\n          end-end data transfer service is to provide error detection.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          さらに、リンクを通じてセグメントが正しく転送されたとしても、ルータのメモリにセグメントが格納される際にビットエラーが発生する可能性もあります。リンク単位の信頼性やメモリ内でのエラーチェックが保証されていないことを考えると、エンド間のデータ転送サービスでエラー検出を行いたい場合、UDPはトランスポート層でエラー検出を提供する必要があります。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          This is an example of the celebrated end-end principle in system design [Saltzer 1984],\r\n          which states that since certain functionality (error detection, in this case) must be\r\n          implemented on an end-end basis: “functions placed at the lower levels may be redundant\r\n          or of little value when compared to the cost of providing them at the higher level.”\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          これは、システム設計における有名なエンドエンド原則の一例です [Saltzer 1984]。この原則では、ある機能（この場合はエラー検出）はエンドエンドで実装する必要があるため、「下位層に配置された機能は、上位層で提供されるコストと比べて冗長であったり、ほとんど意味を持たなかったりする可能性がある」と述べられています。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          Because IP is supposed to run over just about any layer-2 protocol, it is useful\r\n          for the transport layer to provide error checking as a safety measure.\r\n        </p>\r\n        <p>\r\n          Although UDP provides error checking, it does not do anything to recover from an error.\r\n          Some implementations of UDP simply discard the damaged segment; others pass the damaged\r\n          segment to the application with a warning.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          IPは、あらゆる種類のレイヤ2プロトコルの上で動作することが前提とされているため、安全対策としてトランスポート層でエラーチェックを提供することは有用です。\r\n        </p>\r\n        <p class=\"text-muted\">\r\n          UDPはエラーチェックを提供しますが、エラーの修復処理は一切行いません。UDPの実装によっては、破損したセグメントを単に破棄するものもあれば、アプリケーションに警告付きで渡すものもあります。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          That wraps up our discussion of UDP. We will soon see that TCP offers reliable\r\n          data transfer to its applications as well as other services that UDP doesn’t offer.\r\n        </p>\r\n        <p>\r\n          Naturally, TCP is also more complex than UDP. Before discussing TCP, however,\r\n          it will be useful to step back and first discuss the underlying principles of reliable\r\n          data transfer.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          以上でUDPに関する説明は終了です。次に、TCPがアプリケーションに対して信頼性の高いデータ転送や、UDPにはない他のサービスを提供することを見ていきます。\r\n        </p>\r\n        <p class=\"text-muted\">\r\n          当然ながら、TCPはUDPよりも複雑です。しかしTCPの説明に入る前に、信頼性のあるデータ転送の基本原理を振り返っておくとよいでしょう。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.text-muted {\r\n  color: #6c757d;\r\n}\r\n.checksum-table {\r\n  font-family: monospace;\r\n  font-size: 1rem;\r\n  margin: 0 auto;\r\n}\r\n.checksum-table td {\r\n  padding: 2px 8px;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  border: none;\r\n}\r\n.pre-block {\r\n  font-family: 'Courier New', monospace;\r\n  background: #f9f9f9;\r\n  padding: 1rem;\r\n  border-radius: 6px;\r\n  white-space: pre;\r\n}\r\n\r\n</style>","import { render } from \"./chapter03_32.vue?vue&type=template&id=3b3403b4&scoped=true\"\nconst script = {}\n\nimport \"./chapter03_32.vue?vue&type=style&index=0&id=3b3403b4&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-3b3403b4\"]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_hoisted_1","_cache","script","__exports__","render"],"sourceRoot":""}