"use strict";(self["webpackChunkstudy_site"]=self["webpackChunkstudy_site"]||[]).push([[6723],{6723:function(d,a,r){r.r(a),r.d(a,{default:function(){return n}});var t=r(6768);const f={class:"container my-4"};function v(d,a){return(0,t.uX)(),(0,t.CE)("div",f,a[0]||(a[0]=[(0,t.Fv)('<h5 class="mb-4" data-v-ddf192f0>2-1 画面への表示</h5><div class="card mb-4 bg-primary bg-opacity-10 border-primary" data-v-ddf192f0><div class="card-header fw-bold text-primary" data-v-ddf192f0> ■ 基本の出力：print()で1行ずつ表示 </div><div class="card-body" data-v-ddf192f0><pre class="code-block" data-v-ddf192f0>print(&#39;こんにちは。&#39;)\nprint(&#39;はじめまして。&#39;)\n        </pre><p data-v-ddf192f0><strong data-v-ddf192f0>解説：</strong> print() は出力後に自動で改行されます。</p><div class="output-block mt-2" data-v-ddf192f0><pre data-v-ddf192f0>こんにちは。\nはじめまして。\n</pre></div></div></div><div class="card mb-4 bg-primary bg-opacity-10 border-primary" data-v-ddf192f0><div class="card-header fw-bold text-primary" data-v-ddf192f0> ■ 改行せずに続けて表示：end=&quot;&quot; の利用 </div><div class="card-body" data-v-ddf192f0><pre class="code-block" data-v-ddf192f0>print(&#39;こんにちは。&#39;, end=&#39;&#39;)\nprint(&#39;はじめまして。&#39;)\n        </pre><p data-v-ddf192f0><strong data-v-ddf192f0>解説：</strong> end=&#39;&#39; を指定すると、改行されずに表示が続きます。</p><div class="output-block mt-2" data-v-ddf192f0><pre data-v-ddf192f0>こんにちは。はじめまして。\n</pre></div></div></div><div class="card mb-4 bg-primary bg-opacity-10 border-primary" data-v-ddf192f0><div class="card-header fw-bold text-primary" data-v-ddf192f0> ■ 文字列内での改行：\\n を使う </div><div class="card-body" data-v-ddf192f0><pre class="code-block" data-v-ddf192f0>print(&#39;風\\n林\\n火\\n山&#39;)\n        </pre><p data-v-ddf192f0><strong data-v-ddf192f0>解説：</strong> \\n は文字列中での明示的な改行です。</p><div class="output-block mt-2" data-v-ddf192f0><pre data-v-ddf192f0>風\n林\n火\n山\n</pre></div></div></div><div class="card mb-4 bg-primary bg-opacity-10 border-primary" data-v-ddf192f0><div class="card-header fw-bold text-primary" data-v-ddf192f0> ■ 複数の print() を使って1行ずつ表示 </div><div class="card-body" data-v-ddf192f0><pre class="code-block" data-v-ddf192f0>print(&#39;風&#39;)\nprint(&#39;林&#39;)\nprint(&#39;火&#39;)\nprint(&#39;山&#39;)\n        </pre><p data-v-ddf192f0><strong data-v-ddf192f0>解説：</strong> 各 print() は個別に改行されて出力されます。</p><div class="output-block mt-2" data-v-ddf192f0><pre data-v-ddf192f0>風\n林\n火\n山\n</pre></div></div></div><div class="card mb-4 bg-primary bg-opacity-10 border-primary" data-v-ddf192f0><div class="card-header fw-bold text-primary" data-v-ddf192f0> ■ 改行だけを出力：空の print() </div><div class="card-body" data-v-ddf192f0><pre class="code-block" data-v-ddf192f0>print()\nprint(&#39;はじめまして。&#39;)\n        </pre><p data-v-ddf192f0><strong data-v-ddf192f0>解説：</strong> 空の print() は1行の空白行を出力します。</p><div class="output-block mt-2" data-v-ddf192f0><pre data-v-ddf192f0> \nはじめまして。\n</pre></div></div></div>',6)]))}var i=r(1241);const p={},s=(0,i.A)(p,[["render",v],["__scopeId","data-v-ddf192f0"]]);var n=s}}]);
//# sourceMappingURL=6723.32bc7788.js.map