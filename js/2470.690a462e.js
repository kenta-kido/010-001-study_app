"use strict";(self["webpackChunkstudy_site"]=self["webpackChunkstudy_site"]||[]).push([[2470],{2470:function(a,d,t){t.r(d),t.d(d,{default:function(){return r}});var e=t(6768);const n={class:"container my-4"};var s={__name:"chapter15_94",setup(a){return(a,d)=>((0,e.uX)(),(0,e.CE)("div",n,d[0]||(d[0]=[(0,e.Fv)('<h3 class="mb-4" data-v-088f2da5>9(d) Wachstumsverhalten von AIMD und CUBIC</h3><div class="border rounded p-3 bg-light mb-4" data-v-088f2da5><p data-v-088f2da5><strong data-v-088f2da5>Aufgabe:</strong><br data-v-088f2da5> Beschreiben Sie die Wachstumsfunktionen von AIMD und CUBIC.<br data-v-088f2da5> Wie verläuft das Wachstum der Congestion Window (cwnd) in beiden Ansätzen (linear vs. kubisch)?<br data-v-088f2da5> Was bedeutet das für die Performance in Netzwerken mit hoher Bandbreite und Latenz? (4P) </p><hr data-v-088f2da5><p data-v-088f2da5><strong data-v-088f2da5>問題:</strong><br data-v-088f2da5> AIMD と CUBIC の成長関数を比較せよ。<br data-v-088f2da5> 各方式における輻輳ウィンドウ（cwnd）の増加はどのような形か（線形 vs. 三次関数）？<br data-v-088f2da5> それは高帯域・高遅延ネットワークにおいて性能にどのような影響を与えるか？（4点） </p></div><div class="row" data-v-088f2da5><div class="col-md-6" data-v-088f2da5><h5 data-v-088f2da5>Antwort (Deutsch)</h5><p data-v-088f2da5><strong data-v-088f2da5>AIMD:</strong></p><ul data-v-088f2da5><li data-v-088f2da5>cwnd wächst linear pro RTT (Additive Increase)</li><li data-v-088f2da5>Verlust führt zu Multiplicative Decrease (z.B. Halbierung)</li><li data-v-088f2da5>Effizient bei kleinen bis mittleren Netzen</li></ul><p data-v-088f2da5><strong data-v-088f2da5>CUBIC:</strong></p><ul data-v-088f2da5><li data-v-088f2da5>cwnd wächst gemäß kubischer Funktion: <span data-v-088f2da5>W(t) = C(t−K)³ + W<sub data-v-088f2da5>max</sub></span></li><li data-v-088f2da5>Wachstum unabhängig von RTT → besser in Hochlatenznetzen</li><li data-v-088f2da5>Schnellere Erholung und bessere Auslastung bei großer Bandbreite</li></ul><p data-v-088f2da5><strong data-v-088f2da5>Fazit:</strong> CUBIC skaliert besser in Hochgeschwindigkeitsnetzen mit hoher Latenz als AIMD.</p></div><div class="col-md-6" data-v-088f2da5><h5 data-v-088f2da5>解答（日本語）</h5><p data-v-088f2da5><strong data-v-088f2da5>AIMD：</strong></p><ul data-v-088f2da5><li data-v-088f2da5>cwnd は RTT ごとに線形に増加（加算的増加）</li><li data-v-088f2da5>損失時に乗算的に減少（例：半分）</li><li data-v-088f2da5>中小規模のネットワークでは適している</li></ul><p data-v-088f2da5><strong data-v-088f2da5>CUBIC：</strong></p><ul data-v-088f2da5><li data-v-088f2da5>cwnd は三次関数に基づいて増加：<span data-v-088f2da5>W(t) = C(t−K)³ + W<sub data-v-088f2da5>max</sub></span></li><li data-v-088f2da5>RTT に依存せず、遅延の大きい環境でも効率よく増加</li><li data-v-088f2da5>高帯域のネットワークでの利用率が高く、回復も早い</li></ul><p data-v-088f2da5><strong data-v-088f2da5>結論：</strong> CUBIC は高帯域・高遅延ネットワークにおいて AIMD よりもスケーラビリティに優れている。</p></div></div>',3)])))}},i=t(1241);const v=(0,i.A)(s,[["__scopeId","data-v-088f2da5"]]);var r=v}}]);
//# sourceMappingURL=2470.690a462e.js.map