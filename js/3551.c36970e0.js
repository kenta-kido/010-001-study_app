"use strict";(self["webpackChunkstudy_site"]=self["webpackChunkstudy_site"]||[]).push([[3551],{3551:function(e,n,s){s.r(n),s.d(n,{default:function(){return h}});var t=s(6768);const r={class:"container my-4"};function i(e,n){return(0,t.uX)(),(0,t.CE)("div",r,n[0]||(n[0]=[(0,t.Fv)('<h3 class="mb-4">9(c) CUBIC vs. AIMD – Wachstumsverhalten &amp; Reaktion auf Überlastung</h3><div class="border rounded p-3 bg-light mb-4"><p><strong>Thema:</strong><br> Was bedeutet RTT (Round-Trip Time) im TCP-Kontext und warum ist sie entscheidend für das Verhalten des cwnd? </p><hr><p><strong>テーマ:</strong><br> TCP通信におけるRTT（往復遅延時間）とは何を意味し、どのような役割を果たしているのか？ </p></div><div class="row mt-4"><div class="col-md-6"><h5>Erklärung (Deutsch)</h5><p> RTT (Round-Trip Time) bezeichnet die Zeit, die ein TCP-Paket benötigt, um vom Sender zum Empfänger und wieder zurück zu gelangen. Sie umfasst also die Hin- und Rücklaufzeit inklusive Bestätigung (ACK). </p><p> Im TCP-Verkehr bestimmt die RTT, wie schnell ein Sender neue Daten senden darf – denn das Senden ist an den Erhalt von ACKs gekoppelt. </p><p> Eine längere RTT bedeutet, dass ACKs langsamer zurückkommen, was die Wachstumsrate des Congestion Window (cwnd) bei klassischen Algorithmen wie Reno verlangsamt. </p></div><div class="col-md-6"><h5>解説（日本語）</h5><p> RTT（Round-Trip Time／往復遅延時間）とは、TCP で送信されたパケットが宛先に届き、 その応答（ACK）が返ってくるまでにかかる**往復時間**を指します。 </p><p> このRTTの長さは、TCPの送信タイミングに大きな影響を与えます。なぜなら、TCPはACKを受け取ることで次のデータを送るからです。 </p><p> RTTが長ければACKも遅くなり、その分ウィンドウ（cwnd）の成長も遅くなるため、スループットに影響します。 </p></div></div><div class="border rounded p-3 bg-light mb-4"><p><strong>Thema:</strong><br> Warum ist die RTT-Abhängigkeit bei TCP Reno ein Nachteil in Netzwerken mit hoher Latenz? </p><hr><p><strong>テーマ:</strong><br> なぜ TCP Reno において、RTTへの依存性は高遅延ネットワークでは不利となるのか？ </p></div><div class="row mt-4"><div class="col-md-6"><h5>Erklärung (Deutsch)</h5><p> TCP Reno erhöht sein Congestion Window (cwnd) pro empfangenem ACK linear – also einmal pro RTT. Je größer die RTT, desto langsamer kommen die ACKs zurück, und desto langsamer wächst cwnd. </p><p> In Netzwerken mit hoher Bandbreite, aber langer RTT (sogenannte „Long Fat Networks“) führt das zu einer ineffizienten Ausnutzung der Kapazität. </p><p> Ein TCP-Flow mit kurzer RTT kann also deutlich schneller wachsen als einer mit langer RTT – was zu Ungleichheit und Nachteilen für lange Flows führt. </p></div><div class="col-md-6"><h5>解説（日本語）</h5><p> TCP Reno は ACK を 1 RTT ごとに受信するたびに cwnd を 1 セグメントだけ増加させる設計のため、 RTT が長い場合、その成長速度が著しく遅くなります。 </p><p> 特に、帯域は十分にあるが遅延が長いネットワーク（例：衛星回線や国際回線）では、 Reno は帯域を効率的に使い切ることができません。 </p><p> これにより、RTT の短いフローは速く成長し、長いフローは常に不利となり、**帯域の不公平な分配**につながります。 </p></div></div><div class="border rounded p-3 bg-light mb-4"><p><strong>Thema:</strong><br> Warum ist CUBIC weitgehend unabhängig von der RTT und was ist der Vorteil dieses Designs? </p><hr><p><strong>テーマ:</strong><br> CUBIC は RTT に依存しないとはどういう意味か？ それによりどのような利点が得られるのか？ </p></div><div class="row mt-4"><div class="col-md-6"><h5>Erklärung (Deutsch)</h5><p> Anders als TCP Reno basiert CUBIC nicht auf der Anzahl der empfangenen ACKs, sondern auf einer Zeitfunktion. Das Wachstum des cwnd erfolgt gemäß <code>W(t) = C(t−K)³ + W<sub>max</sub></code> – also unabhängig von der RTT. </p><p> Dadurch wächst CUBIC mit konstanter Geschwindigkeit über die Zeit, selbst wenn ACKs langsamer eintreffen. Das ermöglicht einen faireren Wettbewerb zwischen Flows mit unterschiedlicher RTT. </p><p> Besonders in Hochlatenznetzwerken sorgt dieses Design für bessere Effizienz und Kapazitätsausnutzung. </p></div><div class="col-md-6"><h5>解説（日本語）</h5><p> CUBIC は ACK の頻度ではなく「時間 t」に基づいてウィンドウを成長させる設計のため、 RTT の大小に関係なく、**一定の速度でウィンドウが増加**します。 </p><p> 成長関数は <code>W(t) = C(t−K)³ + W<sub>max</sub></code> という三次関数であり、RTT を直接含みません。 </p><p> この設計により、RTT の長い接続でも短い接続と公平に帯域を競合できるようになります。 特に、高遅延ネットワークにおけるパフォーマンス向上が期待できます。 </p></div></div><div class="border rounded p-3 bg-light mb-4"><p><strong>Thema:</strong><br> Warum ist das klassische AIMD-Verfahren in Netzwerken mit hoher RTT nicht effizient? </p><hr><p><strong>テーマ:</strong><br> 高遅延ネットワークにおいて AIMD（加算増加・乗算減少）が適していないのはなぜか？ </p></div><div class="row mt-4"><div class="col-md-6"><h5>Erklärung (Deutsch)</h5><p> AIMD (Additive Increase, Multiplicative Decrease) <span style="color:red;">erhöht das Congestion Window pro empfangenem ACK – also indirekt pro RTT.</span> Das bedeutet: Je länger die RTT, desto langsamer wächst das Fenster. </p><p> In Hochlatenznetzwerken (z. B. Satellitenverbindungen) kann das zu extrem langsamen Wachstumsphasen führen, da ACKs verzögert eintreffen. </p><p> Dadurch wird die verfügbare Bandbreite nicht effizient genutzt, <span style="color:red;">insbesondere nach einem Paketverlust, da die Fensterwiederherstellung sehr lange dauert.</span></p><p> Diese RTT-Abhängigkeit macht AIMD für moderne Netzwerke mit großer Latenz ungeeignet. </p></div><div class="col-md-6"><h5>解説（日本語）</h5><p> AIMD（加算増加・乗算減少）アルゴリズムでは、<span style="color:red;">ACK の受信ごとに cwnd（輻輳ウィンドウ）を少しずつ増加</span>させます。 これは、**RTT に比例して成長速度が決まる**ことを意味します。 </p><p> 高遅延ネットワーク（例：衛星通信）では ACK の応答が遅れるため、 **ウィンドウの成長に非常に時間がかかってしまい、帯域を有効に使えません**。 </p><p style="color:red;"> 特にパケットロス後の回復にも時間がかかり、スループットが低下します。 </p><p> このような理由から、AIMD は RTT の大きいネットワーク環境には不向きです。 </p></div></div><div class="border rounded p-3 bg-light mb-4"><p><strong>Thema:</strong><br> Warum ist der TCP-Algorithmus CUBIC besonders geeignet für Long-Fat Networks? </p><hr><p><strong>テーマ:</strong><br> 高遅延かつ高帯域なネットワークにおいて、CUBIC が特に有効とされるのはなぜか？ </p></div><div class="row mt-4"><div class="col-md-6"><h5>Erklärung (Deutsch)</h5><p> CUBIC verwendet eine zeitbasierte kubische Wachstumsfunktion, die unabhängig von der RTT arbeitet. Das Fenster wächst mit der Zeit, nicht mit jedem einzelnen ACK. </p><p> Dadurch bleibt die Wachstumsrate auch bei hoher Latenz konstant, was besonders in sogenannten Long-Fat Networks wichtig ist. </p><p> Zusätzlich kann CUBIC durch seine konvexe Phase nach W<sub>max</sub> sehr schnell neue Bandbreite erschließen. Die Stabilität nahe W<sub>max</sub> sorgt gleichzeitig für geringe Verlustraten. </p><p> Diese Eigenschaften machen CUBIC effizient und robust in modernen Hochleistungsnetzwerken. </p></div><div class="col-md-6"><h5>解説（日本語）</h5><p> CUBIC は ACK の頻度ではなく「経過時間 t」に基づいてウィンドウを増加させる **時間ベースの三次関数成長モデル**を採用しています。 </p><p> この設計により、RTT が長くても成長速度は影響を受けず、**常に一定の速度で成長できる**のが特長です。 </p><p> また、過去の最大値 W<sub>max</sub> を越えるとウィンドウを急速に拡大（凸型成長）させるため、 **広い帯域をすばやく使い切ることが可能**です。 </p><p> このような特性により、CUBIC は高遅延・高帯域なネットワーク（いわゆる Long Fat Networks）において 非常に高い効率と安定性を両立させます。 </p></div></div>',11)]))}var a=s(1241);const d={},o=(0,a.A)(d,[["render",i]]);var h=o}}]);
//# sourceMappingURL=3551.c36970e0.js.map