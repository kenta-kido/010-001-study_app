"use strict";(self["webpackChunkstudy_site"]=self["webpackChunkstudy_site"]||[]).push([[7052],{2637:function(e,t,i){i.r(t),i.d(t,{default:function(){return h}});var s=i(6768),n=i(144),r=i.p+"img/Figure_1001.ec82c958.png",l=i.p+"img/Figure_1002.35115aca.png";const a={class:"container my-4"},u={class:"text-center my-4"},d=["src"],o={class:"text-center my-4"},B=["src"];var c={__name:"chapter15_101",setup(e){return(e,t)=>((0,s.uX)(),(0,s.CE)("div",a,[t[4]||(t[4]=(0,s.Fv)('<h3 class="mb-4">10(a) TCP BBR – Motivation &amp; Unterschied zu CUBIC</h3><div class="border rounded p-3 bg-light mb-4"><p><strong>Aufgabe:</strong><br> Wofür steht <strong>BBR</strong> und was ist der Hauptunterschied zwischen BBR und CUBIC? (4P)<br> Erklären Sie insbesondere, was BBR anders macht als verlustbasierte Algorithmen wie CUBIC. </p><hr><p><strong>問題:</strong><br><strong>BBR</strong> の略語の意味と、CUBIC との主な違いを説明せよ（4点）<br> 特に、BBR が CUBIC のような「損失ベースのアルゴリズム」と異なる点を述べよ。 </p></div><div class="row"><div class="col-md-6"><h5>Antwort (Deutsch)</h5><ul><li><strong>BBR</strong> steht für <em>Bottleneck Bandwidth and Round-trip propagation time</em>.</li><li>Im Gegensatz zu CUBIC, das Paketverluste als Signal für Überlastung nutzt, arbeitet BBR verlustunabhängig.</li><li>BBR schätzt kontinuierlich zwei Schlüsselwerte: die maximale Engpassbandbreite (Bottleneck Bandwidth) und die minimale Round-Trip Time (RT<sub>prop</sub>).</li><li>Anhand dieses Modells passt BBR die Sende­rate so an, dass eine maximale Auslastung bei minimaler Verzögerung erreicht wird – unabhängig von Paketverlusten.</li></ul><p><em>Quelle: Vorlesungsfolien S.24–25</em></p></div><div class="col-md-6"><h5>解答（日本語）</h5><ul><li><strong>BBR</strong> は <em>Bottleneck Bandwidth and Round-trip propagation time</em>（ボトルネック帯域幅と往復遅延）を意味します。</li><li>BBR は、CUBIC のようにパケット損失を輻輳のシグナルとして扱う「損失ベース型」アルゴリズムとは異なり、損失に依存しない動作をします。</li><li>BBR は常時、最大のボトルネック帯域（スループット）と最小の伝搬遅延（RT<sub>prop</sub>）を推定し、それに基づいて送信レートを制御します。</li><li>その結果、遅延を抑えつつリンクの利用率を最大化し、パケットロスによる制限を受けません。</li></ul><p><em>出典：スライド p.24〜25</em></p></div></div>',3)),(0,s.Lk)("div",u,[(0,s.Lk)("img",{src:(0,n.R1)(r),alt:"Durchsatzvergleich: TCP BBR vs. TCP CUBIC",class:"img-fluid rounded border"},null,8,d),t[0]||(t[0]=(0,s.Lk)("p",{class:"text-muted mt-2 mb-0"}," Figure 10.1 — Durchsatz bei verschiedenen Paketverlustwahrscheinlichkeiten: BBR bleibt stabil, CUBIC fällt rapide ab ",-1)),t[1]||(t[1]=(0,s.Lk)("p",{class:"text-muted"}," 図10.1 — 損失率に対するスループットの比較。BBRは損失の影響を受けず高いスループットを維持するが、CUBICは損失に敏感に反応し性能が大幅に低下する ",-1))]),(0,s.Lk)("div",o,[(0,s.Lk)("img",{src:(0,n.R1)(l),alt:"RTT-Verhalten bei BBR und CUBIC",class:"img-fluid rounded border"},null,8,B),t[2]||(t[2]=(0,s.Lk)("p",{class:"text-muted mt-2 mb-0"}," Figure 10.2 — Round Trip Time: TCP CUBIC verursacht starkes Queueing und hohe Latenz, während BBR RTT konstant hält ",-1)),t[3]||(t[3]=(0,s.Lk)("p",{class:"text-muted"}," 図10.2 — RTTの時間変化。CUBICは輻輳ウィンドウが大きくなりすぎてバッファを満たし、パケットロスと遅延の急増を引き起こすが、BBRはその前に制御してRTTを一定に保つ ",-1))]),t[5]||(t[5]=(0,s.Fv)('<div class="row mt-4"><div class="col-md-6"><h5>Erklärung (Deutsch)</h5><p> Der Hauptunterschied zwischen TCP BBR und CUBIC liegt im Mechanismus der Überlastkontrolle: </p><ul><li><strong>CUBIC</strong> verwendet einen klassischen verlustbasierten Algorithmus. Es erkennt Überlastungen nur, wenn Paketverluste auftreten. Sobald ein Verlust festgestellt wird, reduziert CUBIC drastisch seine Congestion Window (cwnd), was zu einer schlechteren Ausnutzung der verfügbaren Bandbreite führt. </li><li><strong>BBR</strong> hingegen basiert auf einem <strong>modellbasierten Ansatz</strong>: Es schätzt unabhängig von Paketverlusten kontinuierlich die maximale Bottleneck-Bandbreite und die minimale RTT (RT<sub>prop</sub>), um die optimale Sende­rate zu berechnen. </li><li> In <strong>Abbildung 10.1</strong> (Durchsatz vs. Verlustwahrscheinlichkeit) ist klar ersichtlich, dass der Durchsatz von TCP CUBIC bei schon geringer Paketverlustrate (<code>~0.01%</code>) massiv einbricht, während TCP BBR seine Sende­rate stabil hält – sogar bis zu einem Verlustniveau von 20%. </li><li><strong>Abbildung 10.2</strong> zeigt die RTT über die Zeit: Bei TCP CUBIC steigt die RTT kontinuierlich an, da der Sende­puffer gefüllt wird („Bufferbloat“), was schließlich zu Paketverlust führt. Bei TCP BBR bleibt die RTT konstant, weil BBR frühzeitig erkennt, wann sich Queues bilden, und die Sende­rate stabilisiert. </li></ul></div><div class="col-md-6"><h5>解説（日本語）</h5><p> TCP BBR と CUBIC の違いは、ネットワーク輻輳の「検出方法」と「対応の仕方」にあります。 </p><ul><li><strong>CUBIC</strong> は、パケットが失われたときに初めて「輻輳が起きた」と判断し、送信ウィンドウ（cwnd）を大幅に減らします。これはパケットロスが発生しない限り帯域の使いすぎを制御できず、ネットワークに過剰な負荷をかけやすいことを意味します。 </li><li> 一方で <strong>BBR</strong> は、「ボトルネック帯域幅」と「最小RTT（RT<sub>prop</sub>）」をリアルタイムで観測・推定することで、ネットワークの状態をモデル化し、最適な送信レートを事前に決定します。損失は制御に使いません。 </li><li><strong>図10.1</strong>（スループットと損失率の関係）では、CUBICはパケット損失率がわずかでもあるとスループットが急落しています。たとえば、0.01% 程度の損失で既にスループットが半減しており、耐障害性に乏しいことがわかります。一方、BBRは20%以上の損失でも高いスループットを維持しており、損失に対するロバスト性が高い設計です。 </li><li><strong>図10.2</strong>（RTTの時間変化）では、TCP CUBICが送信を続けることでバッファが徐々に埋まり、RTTが指数関数的に増加しているのがわかります。最終的にパケットロスが発生するタイミングでRTTが急落します。BBRはRTTが上がる前に自動的に制御を行い、RTTを最小値近くに保ちます。これにより、遅延が少ない通信を継続できるのです。 </li></ul></div></div>',1))]))}};const g=c;var h=g}}]);
//# sourceMappingURL=7052.e2e3b79a.js.map