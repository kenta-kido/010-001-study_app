{"version":3,"file":"js/4448.98816aa0.js","mappings":"+YACEA,EAAAA,EAAAA,IAypBM,MAzpBNC,EAypBM,C,ukOA3aRC,EAAAA,EAAAA,IAGM,MAHNC,EAGM,EAFJD,EAAAA,EAAAA,IAAuF,OAAjFE,KAAKC,EAAAA,EAAAA,IAAAC,GAAgBC,IAAI,4BAA4BC,MAAM,qB,uBACjEN,EAAAA,EAAAA,IAAuG,KAApGM,MAAM,mBAAkB,4EAAwE,M,kpGAuHrGN,EAAAA,EAAAA,IAGM,MAHNO,EAGM,EAFJP,EAAAA,EAAAA,IAAqF,OAA/EE,KAAKC,EAAAA,EAAAA,IAAAK,GAAOH,IAAI,4BAA4BC,MAAM,4B,uBACxDN,EAAAA,EAAAA,IAA0G,KAAvGM,MAAM,mBAAkB,+EAA2E,M,imRCvWxG,MAAMG,EAAc,EAEpB,O","sources":["webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_35_ex.vue","webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_35_ex.vue?92e4"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">Distance Vector Routing – Grundkonzepte und Bedeutung</h3>\r\n\r\n<!-- Thema 7-1 -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum funktioniert Distance Vector Routing auch ohne globale Sicht?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    なぜDistance Vectorルーティングはネットワーク全体を知らなくても機能するのか？\r\n  </p>\r\n</div>\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Distance Vector Routing basiert auf dem Prinzip der lokalen Information:  \r\n      Jeder Router kennt nur seine direkten Nachbarn und die Kosten zu ihnen.  \r\n      Diese Informationen teilt er regelmäßig mit diesen Nachbarn.  \r\n      Jeder Knoten baut sich damit schrittweise eine Vorstellung vom gesamten Netzwerk auf,  \r\n      indem er die empfangenen Distanzinformationen vergleicht und aktualisiert.  \r\n      So entsteht nach mehreren Austauschrunden eine konsistente Routing-Tabelle.  \r\n      Diese dezentrale Methode macht Distance Vector besonders geeignet für große Netze,  \r\n      in denen eine zentrale Sicht zu komplex oder unpraktisch wäre.\r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      Distance Vector（距離ベクトル）ルーティングでは、  \r\n      各ルーターは直接接続された隣接ノードとの距離（コスト）だけを知っています。  \r\n      この情報を定期的に隣接ノードと交換することで、  \r\n      それぞれのルーターがネットワーク全体の経路情報を段階的に学習していきます。  \r\n      一度にすべてを知るのではなく、やりとりを重ねて正確な情報に近づくのが特徴です。  \r\n      これにより、集中管理を行わずとも最短経路の決定が可能になります。  \r\n      特に大規模なネットワークにおいては、分散的なこの方式が有効です。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- Thema 7-2 -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum ist die Update-Formel D(x)(y) = min {c(x,v) + D(v)(y)} zentral?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    なぜ更新式 D(x)(y) = min{c(x,v) + D(v)(y)} がDistance Vectorの核となるのか？\r\n  </p>\r\n</div>\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Diese Formel erlaubt es einem Router x, für jedes Ziel y den kostengünstigsten Pfad zu bestimmen.  \r\n      Dazu prüft er für jeden Nachbarn v, ob der Weg über v kürzer ist als bisher angenommen.  \r\n      Die Berechnung basiert auf zwei Werten:  \r\n      – Die direkte Verbindungskosten von x zu v (c(x,v))  \r\n      – und die aktuell bekannte Distanz von v zu y (D(v)(y)).  \r\n      Die Summe ergibt eine alternative Route, die mit bisherigen Optionen verglichen wird.  \r\n      Der kleinste dieser Werte wird gespeichert.  \r\n      So konvergiert das System zu einem Minimum, ohne globale Koordination.\r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      この更新式は、ノードxが目的地yまでの最短経路を見つけるために用います。  \r\n      各隣接ノードvについて、まずxからvまでのリンクコスト（c(x,v)）と、  \r\n      vが持っているyへの距離情報（D(v)(y)）を合計します。  \r\n      この合計値がxの持つ既存のD(x)(y)より小さければ更新を行います。  \r\n      すべての隣接ノードについてこの計算を繰り返し、  \r\n      最小値を選んでテーブルを更新していくことで、  \r\n      最短経路情報が自然に収束します。  \r\n      この「分散的かつ局所的」な計算がDistance Vectorの中核です。\r\n    </p>\r\n  </div>\r\n</div>\r\n<!-- Thema 7-3 -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum sendet ein Router seinen Vektor nur bei Änderungen?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    なぜDistance Vectorでは、ルーターは情報が変化したときだけベクトルを送信するのか？\r\n  </p>\r\n</div>\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Ein Router sendet seinen Distanzvektor nur dann erneut an seine Nachbarn,  \r\n      <span style=\"color: red;\">wenn sich ein Eintrag in seiner Routing-Tabelle verändert hat.</span>  \r\n      <br/>Das spart unnötige Bandbreite und Rechenaufwand im gesamten Netzwerk.  \r\n      Diese Optimierung nennt man <span style=\"color: red;\">„Triggered Updates“</span> – Updates bei Bedarf.  \r\n      Sie machen das Protokoll effizienter und skalierbarer.  \r\n      Würde jeder Router seine Vektoren ständig verschicken,  \r\n      würde das Netz überflutet mit Informationen, auch wenn sich nichts geändert hat.  \r\n      Deshalb ist selektive Kommunikation bei DV so wichtig.\r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      Distance Vectorルーティングでは、<span style=\"color: red;\">テーブルに変更があったときのみ</span>  \r\n      ルーターが隣接ノードへ距離ベクトルを再送します。  \r\n      <br/>これにより、ネットワーク全体での帯域の消費や処理の負荷を大幅に減らすことができます。  \r\n      この方式は<span style=\"color: red;\">「トリガー付き更新（triggered updates）」</span>と呼ばれ、  \r\n      必要なときにだけ通信を行うことで、プロトコルの効率性を高めます。  \r\n      もし変化がないのに常に送信していた場合、  \r\n      無駄なトラフィックが発生し、ネットワークが過負荷になる恐れがあります。  \r\n      そのため「変化があった時のみ送る」という設計は非常に重要です。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- Thema 7-4 -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum ist die Konvergenz im Distance-Vector-Protokoll so wichtig?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    Distance Vectorにおいて、なぜ収束性（コンバージェンス）が重要なのか？\r\n  </p>\r\n</div>\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Konvergenz bedeutet, dass sich alle Routing-Tabellen im Netzwerk stabilisieren –  \r\n      keine Werte ändern sich mehr. Dies ist entscheidend für die Zuverlässigkeit:  \r\n      Nur wenn alle Knoten korrekte Routen kennen, funktionieren Datenübertragungen sicher.  \r\n      Langsame Konvergenz führt zu inkonsistenten Tabellen, Umwegen oder sogar Routing-Loops.  \r\n      Je schneller das Netzwerk konvergiert, desto besser reagiert es auf Veränderungen.  \r\n      Besonders bei Ausfällen oder Topologieänderungen ist schnelle Stabilität unerlässlich.  \r\n      Protokolle wie RIP oder BGP setzen daher auf Mechanismen, um Konvergenz zu beschleunigen.  \r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      コンバージェンス（収束）とは、ネットワーク内のすべてのルーターが最適な経路を学習し、  \r\n      それ以上テーブルが更新されなくなった安定状態を意味します。  \r\n      この状態になって初めて、すべての通信が正しい経路を通って安定に届きます。  \r\n      収束が遅いと、異なるルーターが矛盾した経路情報を持ち、  \r\n      通信が遠回りになったり、ループが発生する危険があります。  \r\n      特にトポロジの変化や障害発生時には、素早い収束がネットワークの信頼性に直結します。  \r\n      そのため、多くのプロトコルは高速な収束を促す仕組みを持っています。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- Thema 8-1 -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum ist das Count-to-Infinity-Problem in Distance Vector Routing kritisch?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    Distance Vectorにおける「Count-to-Infinity」問題とは何であり、なぜ深刻なのか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n\r\n    <p>\r\n      Das Count-to-Infinity-Problem tritt auf, <span style=\"color: red;\">wenn sich ein Linkkostenwert plötzlich stark erhöht</span> – z.&nbsp;B. von 4 auf 60 –  \r\n      und Router weiterhin annehmen, dass ein alternativer Pfad mit alten Kosten noch existiert.\r\n    </p>\r\n\r\n    <p>\r\n      Beispiel: y erkennt, dass sein direkter Pfad zu x nun 60 kostet, glaubt aber, dass z weiterhin mit Kosten 5 zu x gelangt.  \r\n      z wiederum denkt dasselbe über y. So aktualisieren beide ihre Routingtabellen auf Basis veralteter Informationen.\r\n    </p>\r\n\r\n    <p>\r\n      In jeder Iteration steigt der geschätzte Pfadwert um 1: 6 → 7 → 8 → … bis zur \"Unendlichkeit\" (z.&nbsp;B. 50 oder 16 bei RIP).\r\n    </p>\r\n\r\n    <p>\r\n      Dieses „Hochzählen“ führt zu Routing-Loops und langer Konvergenzzeit. Die schlechte Nachricht  \r\n      (dass der Link teurer geworden ist) verbreitet sich nur sehr langsam im Netzwerk.\r\n    </p>\r\n\r\n    <p>\r\n      Wäre z.&nbsp;B. c(y,x) = 10,000 und c(z,x) = 9,999, müsste das Protokoll 10,000 Schritte durchlaufen,  \r\n      um zu erkennen, dass der alte Weg nicht mehr optimal ist – daher der Name „Count-to-Infinity“.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n\r\n    <p>\r\n      Count-to-Infinity（無限大までのカウント）問題は、<span style=\"color: red;\">あるリンクの<strong>コストが急激に増加した</strong>場合に発生</span>します。  \r\n      例えば、xとyのリンクコストが4から60に変わったとき、ルーターは古い経路情報を信じ続けてしまいます。\r\n    </p>\r\n\r\n    <p>\r\n      yは「z経由でxへはまだコスト5で行ける」と考え、zも「yが知っているはずだ」と信じます。  \r\n      こうしてお互いに古い情報を元にルーティングテーブルを更新し合い、ループが始まります。\r\n    </p>\r\n\r\n    <p>\r\n      距離は「6 → 7 → 8 → …」と1ずつ増えていき、最終的にRIPなどでは16、他では50やそれ以上に達するまで続きます。\r\n    </p>\r\n\r\n    <p>\r\n      このように、<strong>「悪いニュース（リンクの劣化）」がネットワーク内で非常に遅く伝播</strong>するため、  \r\n      長時間にわたるルーティングエラーとループが発生します。\r\n    </p>\r\n\r\n    <p>\r\n      たとえば c(y,x) = 10,000、c(z,x) = 9,999 という状況であれば、  \r\n      1ずつ増加して 10,000回以上更新が必要となり、現実的に利用不能になります。  \r\n      これが「Count-to-Infinity（無限大まで数える）問題」と呼ばれる理由です。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n\r\n<!-- Thema: Count-to-Infinity – Beispiel mit Linkkostenänderung -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Wie entsteht das Count-to-Infinity-Problem bei einer Erhöhung der Linkkosten?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    リンクコストが増加したとき、どのようにしてCount-to-Infinity問題が発生するのか？\r\n  </p>\r\n</div>\r\n\r\n<!-- アルゴリズム画像 -->\r\n<div class=\"text-center mt-4\">\r\n  <img :src=\"algorithmImage\" alt=\"Distance Vector Algorithm\" class=\"img-fluid rounded\" />\r\n  <p class=\"text-muted mt-2\">Abbildung: Figure 5.7 – Linkkostenänderung zwischen x und y von 4 auf 60</p>\r\n</div>\r\n\r\n<!-- Erklärung -->\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n\r\n    <p>\r\n      Bevor sich der Linkkost von x nach y ändert, kennt z einen Pfad zu x über y.  \r\n      Die Kosten ergeben sich aus c(z, y) = 1 und Dy(x) = 4, also Dz(x) = 1 + 4 = 5.\r\n    </p>\r\n\r\n    <p>\r\n      Diese Information ist korrekt – <strong>zum Zeitpunkt vor der Änderung</strong> – und wurde von y an z übermittelt.  \r\n      z speichert diesen Pfad in seiner Routing-Tabelle.\r\n    </p>\r\n\r\n    <p>\r\n      Nach der Erhöhung des Links c(x, y) von 4 auf 60 erkennt y diese Änderung.  \r\n      Da y selbst keinen neuen besseren Weg kennt, prüft es stattdessen die Möglichkeit über z:  \r\n      Dy(x) = min(60, c(y, z) + Dz(x)) = min(60, 1 + 5) = 6.\r\n    </p>\r\n\r\n    <p>\r\n      Diese neue Zahl 6 basiert jedoch auf <strong>veralteten Informationen</strong> – Dz(x) = 5 stammt noch von früher.\r\n    </p>\r\n\r\n    <p>\r\n      Nun informiert y den Nachbarn z über diesen neuen Pfad zu x mit Kosten 6.  \r\n      z denkt dann: Dz(x) = min(50, 1 + 6) = 7 – und sendet dies an y zurück.\r\n    </p>\r\n\r\n    <p>\r\n      So beginnt ein Ping-Pong-Spiel zwischen z und y, wobei sich die Distanz jedes Mal um 1 erhöht,  \r\n      bis der Wert 50 erreicht (entspricht direkter Verbindung z → x).\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n\r\n    <p>\r\n      リンク変更前、zはxへの経路を「z → y → x」として記録しており、  \r\n      c(z, y) = 1、Dy(x) = 4 だったため Dz(x) = 1 + 4 = 5 となっていました。\r\n    </p>\r\n\r\n    <p>\r\n      この情報は、yがxとまだ直接リンク（コスト4）を持っていたころにzへ伝えたものです。  \r\n      zはこれを信じて、ルーティングテーブルに「y経由でxへコスト5」と登録します。\r\n    </p>\r\n\r\n    <p>\r\n      その後、xとyのリンクコストが60に上昇します。yはこれを検知しますが、  \r\n      「z経由のルートがまだ有効かもしれない」と思い込み、Dy(x) = min(60, 1 + 5) = 6 と計算します。\r\n    </p>\r\n\r\n    <p>\r\n      yはzに「xまでコスト6で到達できる」と伝えます。zはこれを受け取り、  \r\n      Dz(x) = min(50, 1 + 6) = 7 と計算し、再びyへ知らせます。\r\n    </p>\r\n\r\n    <p>\r\n      こうしてxへの経路コストは「6 → 7 → 8 → …」と増加していき、  \r\n      最終的に 50（zからxの直接コスト）を超えて初めて不正が判明します。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n\r\n<!-- Thema 8-2 -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Wie hilft Poisoned Reverse gegen das Count-to-Infinity-Problem?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    「Poisoned Reverse」はCount-to-Infinity問題にどう対応するのか？\r\n  </p>\r\n</div>\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      <span style=\"color: red;\">Poisoned Reverse ist eine einfache Technik, um Count-to-Infinity zu vermeiden</span>:  \r\n      Wenn ein Router x erkennt, dass <span style=\"color: red;\">sein kürzester Weg zu y über Nachbar v führt</span>,  \r\n      dann teilt er v mit, dass y aus seiner Sicht über v „nicht erreichbar“ ist (Distanz = ∞).  \r\n      Das verhindert, dass v denkt, x habe eine alternative Route zu y.  \r\n      So wird das fehlerhafte Rücklernen unterbrochen.  \r\n      Diese Methode funktioniert gut in kleinen Netzen, hat aber Grenzen bei komplexeren Topologien.  \r\n      Dennoch ist sie ein fester Bestandteil vieler Distance-Vector-Protokolle wie RIP.\r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      <span style=\"color: red;\">「Poisoned Reverse（逆方向への毒）」</span>は、Count-to-Infinity問題の対策として使われる手法です。  \r\n      あるルーターxが、宛先yへ行く最短経路が隣接ノードv経由であると認識した場合、  \r\n      xはvに対して<span style=\"color: red;\">「自分からyへは行けない（距離＝∞）」と通知</span>します。  \r\n      これにより、vがxを経由してyに到達できると誤解するのを防ぎます。  \r\n      情報の「逆流」による誤った更新を遮断するため、ルーティングループを回避できます。  \r\n      小規模なネットワークでは効果的ですが、大規模ネットでは限界もあります。  \r\n      それでも、RIPなど多くのDistance Vectorプロトコルで使われています。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- Thema: Beispielhafte Erklärung von Poisoned Reverse -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Wie funktioniert Poisoned Reverse? – Erklärung anhand eines konkreten Beispiels\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    Poisoned Reverse はどのように機能するのか？具体的な例を用いた解説\r\n  </p>\r\n</div>\r\n\r\n<!-- Abbildung -->\r\n<div class=\"text-center mb-4\">\r\n  <img :src=\"image\" alt=\"Poisoned Reverse Beispiel\" class=\"img-fluid rounded border\" />\r\n  <p class=\"text-muted mt-2\">Abbildung: Beispiel – Linkkostenänderung und Anwendung von Poisoned Reverse</p>\r\n</div>\r\n\r\n<!-- Erklärung -->\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n\r\n    <p>\r\n      Im dargestellten Netzwerk sind x, y und z über direkte Links verbunden.  \r\n      Anfangs ist der Link x–y günstig (Kosten 4) und z kennt x nur über y.  \r\n      z speichert daher: „x ist über y mit Kosten 5 erreichbar“ (1 + 4).\r\n    </p>\r\n\r\n    <p>\r\n      Dann erhöht sich der Linkkostenwert c(x, y) stark – z.&nbsp;B. von 4 auf 60.  \r\n      y erkennt die Änderung, kennt aber keinen besseren Pfad und belässt Dy(x) = 60.\r\n    </p>\r\n\r\n    <p>\r\n      y informiert z über den neuen Wert. z merkt: Der bisherige Pfad über y ist jetzt teuer,  \r\n      aber z selbst hat eine direkte Verbindung zu x mit Kosten 50 → besser als 1 + 60 = 61.\r\n    </p>\r\n\r\n    <p>\r\n      z aktualisiert also seinen Pfad zu x direkt und setzt Dz(x) = 50.  \r\n      Damit endet aber das Routing über y. Das ist entscheidend für Poisoned Reverse.\r\n    </p>\r\n\r\n    <p>\r\n      Jetzt erkennt z: „Ich gehe nicht mehr über y zu x.“ Daher kann z y die Wahrheit sagen: Dz(x) = 50.  \r\n      Und falls z stattdessen wieder über y routen würde, müsste es lügen: Dz(x) = ∞.\r\n    </p>\r\n\r\n    <p>\r\n      Diese Technik verhindert, dass y z als Weg zu x auswählt, wenn z selbst über y geht –  \r\n      so entsteht keine Routing-Schleife. Poisoned Reverse funktioniert also wie eine präventive Schutzmaßnahme.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n\r\n    <p>\r\n      図ではノードx・y・zが三角形に接続されています。初期状態では、xとyはコスト4、  \r\n      yとzはコスト1で接続されており、zはxに到達するには「z → y → x（コスト1+4=5）」を選んでいます。\r\n    </p>\r\n\r\n    <p>\r\n      ここでリンクx–yのコストが60に上がったとします。yはそれに気づき、自分のDy(x)を60に更新します。  \r\n      しかしyは他の経路を知らないため、それが最良だと思い込んでいます。\r\n    </p>\r\n\r\n    <p>\r\n      yがその新しい距離情報（60）をzに送ると、zは「y経由だと1+60=61」になることを知ります。  \r\n      一方、zにはxへの直接リンク（コスト50）があるため、それに切り替えます。Dz(x)=50 です。\r\n    </p>\r\n\r\n    <p>\r\n      ここでポイント：zは今や「yを通らずにxに行く」ルートを選んだので、yに正直に「Dz(x)=50」と伝えて構いません。\r\n    </p>\r\n\r\n    <p>\r\n      しかしもし、zがまだ「y経由でxへ行っている」状態なら、yに「Dz(x)=∞」と嘘をつきます。  \r\n      なぜなら、yが「zがxへの経路を知っている」と思ってzを使い始めると、ループが発生するからです。\r\n    </p>\r\n\r\n    <p>\r\n      このように、Poisoned Reverseは「ループの原因となる経路を使っているときは、あえて『知らない』と報告する」ことで  \r\n      ルーティングループを未然に防ぎます。二つの隣接ノード間においては非常に効果的な対策です。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- Thema: Warum braucht man Next-Hop-Informationen für Poisoned Reverse? -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum ist die Information über den Next Hop für Poisoned Reverse erforderlich?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    Poisoned Reverse において「経由ノード（next hop）」の情報がなぜ必要なのか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n\r\n    <p>\r\n      Das Prinzip von <strong>Poisoned Reverse</strong> lautet:  \r\n      Wenn ein Router zum Ziel x über seinen Nachbarn A routet, dann meldet er A: „Ich kenne keinen Pfad zu x“ (d.h. Abstand = ∞).\r\n    </p>\r\n\r\n    <p>\r\n      Damit dieses Verhalten funktioniert, muss der Router wissen, <strong>über welchen Nachbarn er zu x routet</strong>.  \r\n      Diese Information nennt man „Next Hop“.\r\n    </p>\r\n\r\n    <p>\r\n      Ohne diese Angabe könnte der Router nicht erkennen, ob der Pfad zu x über A oder über einen anderen Nachbarn verläuft.\r\n    </p>\r\n\r\n    <p>\r\n      Nur wenn bekannt ist: „Mein Next Hop zu x ist A“, kann man A gegenüber den Pfad „vergiften“,  \r\n      um Routing-Loops zu verhindern.\r\n    </p>\r\n\r\n    <p>\r\n      Daher speichern Distance-Vector-Router nicht nur die Distanz zu jedem Ziel,  \r\n      sondern auch den Next Hop – also denjenigen Nachbarn, über den der Pfad läuft.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n\r\n    <p>\r\n      <strong>Poisoned Reverse</strong> の基本的な動作は次の通りです：  \r\n      「ある目的地xへ行くのに隣接ノードAを経由しているなら、Aには『xには行けない（∞）』と伝える」。\r\n    </p>\r\n\r\n    <p>\r\n      この「毒付け」処理を行うには、<strong>自分がxに行くためにどのノードを使っているか（next hop）</strong>を  \r\n      正確に把握していなければなりません。\r\n    </p>\r\n\r\n    <p>\r\n      なぜなら、自分の最短経路がA経由なのか、それとも別のB経由なのかによって、  \r\n      Aに通知すべき情報がまったく変わってくるからです。\r\n    </p>\r\n\r\n    <p>\r\n      もしnext hopの情報がなければ、「どの相手に∞を伝えるべきか」の判断ができず、  \r\n      Poisoned Reverse は正しく機能しません。\r\n    </p>\r\n\r\n    <p>\r\n      そのため Distance Vector では、単に距離だけでなく「<strong>どの隣接ノード経由か</strong>」という情報も  \r\n      セットで管理することが必要になるのです。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- Thema 8-3 -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Welche Grenzen hat das Distance Vector Routing im Vergleich zu Link-State?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    Distance VectorルーティングはLink-Stateと比べてどのような限界があるのか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n\r\n    <p>\r\n      Distance Vector Protokolle wie RIP basieren darauf, dass jeder Router nur seinen Nachbarn die eigenen Distanzwerte zu allen Zielen mitteilt.  \r\n      Jeder Knoten kennt also nur die <strong>Entfernung</strong> (z.B. Anzahl der Hops), aber nicht den vollständigen Netzwerkgraphen.\r\n    </p>\r\n\r\n    <p>\r\n      Diese eingeschränkte Sicht führt zu mehreren Problemen:\r\n    </p>  \r\n      <ul>\r\n      <li>Schleifen können entstehen, weil Router nur indirekte Informationen erhalten  </li>\r\n      <li>Änderungen wie Linkausfälle verbreiten sich langsam („bad news travels slowly“)  </li>\r\n      <li>Der Count-to-Infinity-Effekt tritt auf, weil inkorrekte Pfade schrittweise hochgezählt werden</li>\r\n      </ul>\r\n\r\n    <p>\r\n      Link-State-Protokolle wie OSPF funktionieren grundlegend anders: Jeder Router sammelt Informationen über alle seine direkten Verbindungen  \r\n      und sendet diese als Link-State Advertisements (LSAs) an alle anderen Router. Damit hat jeder eine <strong>vollständige Karte</strong> des Netzes.\r\n    </p>\r\n\r\n    <p>\r\n      Das erlaubt schnellere und zuverlässigere Pfadberechnungen mit Dijkstra. Auch Loops werden vermieden, weil alle denselben Topologiestand kennen.\r\n    </p>\r\n\r\n    <p>\r\n      Der Nachteil: Höherer Speicher- und Rechenaufwand, besonders bei großen Netzen.  \r\n      Link-State-Protokolle sind komplexer zu implementieren und zu konfigurieren.\r\n    </p>\r\n\r\n    <p>\r\n      Fazit: Distance Vector ist einfacher, aber weniger stabil. Link-State ist robuster, aber ressourcenintensiver.  \r\n      Die Wahl hängt von der Netzwerktopologie, der Skalierbarkeit und den Stabilitätsanforderungen ab.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n\r\n    <p>\r\n      Distance Vector（例：RIP）は、各ルーターが「自分から目的地への距離（メトリック）」を隣接ルーターに伝えるだけの仕組みです。  \r\n      つまり、自分が直接知っている情報と隣から受け取った「間接情報」のみでルーティングを行います。\r\n    </p>\r\n\r\n    <p>\r\n      この仕組みは簡単ですが、以下のような限界があります：  \r\n    </p>\r\n      <ul>\r\n      <li><strong>ネットワーク全体の構造（トポロジー）を把握できない</strong>  </li>\r\n      <li><strong>リンクの変化が伝播しにくく、収束に時間がかかる</strong>（bad news travels slowly）</li>  \r\n      <li><strong>Count-to-Infinityやルーティングループ</strong>などの問題が起きやすい</li>\r\n      </ul>\r\n\r\n    <p>\r\n      一方、Link-State型プロトコル（例：OSPF）は、各ルーターが自分に接続しているリンク情報をネットワーク全体に広報します。  \r\n      その結果、すべてのルーターが<strong>ネットワーク全体の地図</strong>を持つことになります。\r\n    </p>\r\n\r\n    <p>\r\n      この情報を使って<strong>Dijkstraアルゴリズム</strong>で最適経路を計算するため、収束が速く安定しています。  \r\n      また、トポロジー全体が共有されているため、ループもほぼ発生しません。\r\n    </p>\r\n\r\n    <p>\r\n      ただし、OSPFのようなLink-Stateは、メモリ・CPU・帯域を多く消費し、大規模ネットワークでは構成も複雑になります。  \r\n      小規模やリソース制限のある環境では過剰な場合もあります。\r\n    </p>\r\n\r\n    <p>\r\n      まとめると：Distance Vectorは<strong>シンプルで軽量</strong>、Link-Stateは<strong>堅牢で高性能だが重い</strong>。  \r\n      使い分けはネットワークの規模や要件に応じて判断すべきです。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n<!-- Thema 8-4 -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum reicht Poisoned Reverse nicht aus, um alle Routingprobleme zu lösen?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    なぜPoisoned Reverseだけではすべてのルーティング問題を解決できないのか？\r\n  </p>\r\n</div>\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Poisoned Reverse funktioniert gut bei einfachen Netzen mit zwei oder drei Routern.  \r\n      <span style=\"color: red;\">In komplexeren Topologien jedoch, wo mehrere Pfade involviert sind, hilft es nur begrenzt. </span> \r\n      Es kann <span style=\"color: red;\">nicht alle indirekten Schleifen erkennen</span> oder verhindern.  \r\n      Außerdem erhöht es den Steuerverkehr im Netzwerk, weil mehr \"∞\"-Meldungen verteilt werden.  \r\n      <br/>Deshalb setzen moderne Protokolle wie OSPF auf globales Wissen und vollständige Link-State-Datenbanken.  \r\n      Dort können Loops und falsche Annahmen systematisch ausgeschlossen werden.  \r\n      Poisoned Reverse ist also nur ein Teil einer größeren Lösung.\r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      Poisoned Reverseは、単純なネットワーク（2〜3台のルーター）では非常に効果的です。  \r\n      しかし、<span style=\"color: red;\">複数のルーターや経路が絡む複雑なトポロジーでは、間接的なループや誤情報までは防げません。</span>  \r\n      さらに、「∞」の情報を頻繁に送るため、制御トラフィックの量が増えるという副作用もあります。  \r\n      <br/>このような限界があるため、OSPFなどの現代的なプロトコルでは、より包括的なLink-State手法が採用されます。  \r\n      結局のところ、Poisoned Reverseは単独では不十分であり、大規模ネットワークでは補助的な対策にすぎません。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- Thema 8-5 -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Wie unterscheiden sich Distance Vector und Link-State in der Praxis?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    Distance VectorとLink-Stateは実際にはどのように使い分けられているのか？\r\n  </p>\r\n</div>\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Distance Vector ist einfach, ressourcensparend und gut für kleine Netze oder Zugriffsknoten geeignet.  \r\n      Link-State bietet mehr Kontrolle, schnellere Konvergenz und robuste Fehlerbehandlung – ideal für Backbone- oder ISP-Netze.  \r\n      Link-State erfordert aber mehr Speicher und CPU-Zeit, weil alle Link-Zustände gespeichert und berechnet werden.  \r\n      Distance Vector ist <span style=\"color: red;\">verteilt und reaktiv</span>, Link-State ist <span style=\"color: red;\">global und proaktiv</span>.  \r\n      In der Praxis nutzen Netzbetreiber oft beide Verfahren je nach Segment.  \r\n      Beispiel: RIP im Zugriff, OSPF im Kernnetz.  \r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      Distance Vectorはシンプルで軽量なため、小規模なネットワークやエッジ側（アクセスネット）に適しています。  \r\n      一方、Link-Stateは高い信頼性、迅速な収束、高度な障害対応を提供できるため、コアネットワークやISP環境に適しています。  \r\n      ただし、Link-Stateはネットワーク全体の状態を保持・計算するため、メモリとCPU負荷が高くなります。  \r\n      Distance Vectorは<span style=\"color: red;\">分散的・受動的</span>、Link-Stateは<span style=\"color: red;\">集中的・能動的</span>という違いもあります。  \r\n      実際の運用では、アクセス部にRIP、バックボーンにOSPFというように、用途ごとに使い分けられています。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport algorithmImage from '@/assets/lecture/lecture03/Figure_0307.png'\r\nimport image from '@/assets/lecture/lecture03/Figure_0307.png'\r\n</script>\r\n","import script from \"./chapter15_35_ex.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./chapter15_35_ex.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","src","_unref","algorithmImage","alt","class","_hoisted_4","image","__exports__"],"sourceRoot":""}