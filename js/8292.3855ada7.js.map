{"version":3,"file":"js/8292.3855ada7.js","mappings":"gRACEA,EAAAA,EAAAA,IA2MM,MA3MNC,EA2MMC,EAAA,KAAAA,EAAA,K,k8TCtMR,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_94.vue","webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_94.vue?da5f"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">9(d) Wachstumsverhalten von AIMD und CUBIC</h3>\r\n\r\n    <!-- 問題文（Deutsch + 日本語） -->\r\n    <div class=\"border rounded p-3 bg-light mb-4\">\r\n      <p><strong>Aufgabe:</strong><br />\r\n        In den folgenden Teilaufgaben (i) und (ii) wird angenommen, dass das Übertragungsfenster den Schwellenwert <i>W<sub>max</sub></i> noch nicht erreicht hat.\r\n      </p>\r\n      <p>\r\n        (i) Vergleichen Sie die Reaktionsgeschwindigkeit (d.h. die Geschwindigkeit der Änderung der Übertragungsrate) zwischen TCP-CUBIC und dem klassischen AIMD-Verfahren.\r\n      </p>\r\n      <p>\r\n        (ii) Vergleichen Sie die typische Entwicklung der Senderate (Fenstergröße) zwischen TCP-CUBIC und AIMD.\r\n      </p>\r\n      <hr />\r\n      <p><strong>問題：</strong><br />\r\n        以下の (i)、(ii) の各小問では、送信ウィンドウがしきい値 <i>W<sub>max</sub></i> に達していないと仮定する。\r\n      </p>\r\n      <p>\r\n        (i) TCP-CUBIC と従来の AIMD 手法における反応速度（転送レートの変化速度）を比較せよ。\r\n      </p>\r\n      <p>\r\n        (ii) TCP-CUBIC と AIMD の送信レート（ウィンドウサイズ）の典型的な成長の仕方を比較せよ。\r\n      </p>\r\n    </div>\r\n\r\n\r\n<!-- 解説：問題設定の意図と用語の違い（Wmax未満の前提を含む） -->\r\n<div class=\"row mt-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Einordnung & Begriffserklärung (Deutsch)</h5>\r\n    <p>\r\n      In dieser Aufgabe wird ausdrücklich gesagt, dass das Übertragungsfenster <strong>W<sub>max</sub></strong> noch nicht erreicht ist.\r\n      Das bedeutet, dass sich CUBIC in der <strong>konkaven Phase</strong> seines Wachstums befindet – das Fenster wächst eher langsam.\r\n    </p>\r\n    <p>\r\n      Der Unterschied der beiden Teilaufgaben ist wie folgt:\r\n    </p>\r\n    <ul>\r\n      <li><strong>(i) Reaktionsgeschwindigkeit:</strong> Wie schnell ändert sich das Wachstum <em>pro Zeiteinheit</em> in der aktuellen Phase?</li>\r\n      <li><strong>(ii) Senderate:</strong> Wie entwickelt sich die absolute Fenstergröße im Verlauf der Zeit?</li>\r\n    </ul>\r\n    <p>\r\n      Die Reaktionsgeschwindigkeit ist also die <em>Steigung</em> der Funktion W(t), während die Senderate der <em>Wert</em> von W(t) selbst ist. Beide hängen bei CUBIC vom Zeitabstand zum letzten Verlustereignis ab.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      本問では、送信ウィンドウがまだ <strong>W<sub>max</sub></strong> に到達していないと明示されています。これは、<strong>CUBIC が凹型（concave）フェーズ</strong>にあることを意味し、<strong>緩やかな増加</strong>をしている状態です。\r\n    </p>\r\n    <p>\r\n      各小問の意味の違いは以下の通りです：\r\n    </p>\r\n    <ul>\r\n      <li><strong>(i) 反応速度：</strong> 単位時間あたりの増加量、つまり「今どのくらいのスピードでウィンドウが増えているか」（成長率）</li>\r\n      <li><strong>(ii) 送信レート：</strong> 時間の経過とともにウィンドウサイズ（cwnd）がどのように変化していくか（成長パターン）</li>\r\n    </ul>\r\n    <p>\r\n      簡単に言えば、<strong>反応速度</strong>は「傾き」、<strong>送信レート</strong>は「値そのものの推移」を見ています。<br />\r\n      AIMDは常に一定の傾き、CUBICは時間とともに傾きが変わるため、前者は一定速度、後者は加速的な変化をします（ただし W<sub>max</sub> に近づくまでは遅い）。\r\n    </p>\r\n  </div>\r\n</div>\r\n<!-- 解答：ドイツ語 & 日本語 横並び -->\r\n<div class=\"row\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Antwort (Deutsch)</h5>\r\n    <p><strong>Voraussetzung:</strong> Da W<sub>max</sub> noch nicht erreicht ist, befindet sich CUBIC in der <em>konkaven Phase</em> seiner Wachstumsfunktion.</p>\r\n\r\n    <p><strong>(i) Reaktionsgeschwindigkeit:</strong></p>\r\n    <ul>\r\n      <li>AIMD <span style=\"color: red;\">erhöht cwnd konstant um 1 MSS（Maximum Segment Size） pro RTT</span> → <span style=\"color: red;\">konstante, lineare Geschwindigkeit.</span></li>\r\n      <li>CUBIC verwendet <i>W(t) = C(t−K)³ + W<sub>max</sub></i>, wobei die Änderungsrate <i>dW/dt = 3C(t−K)²</i> ist.</li>\r\n      <li>⇒ Zu Beginn (t = 0) ist die Reaktion schnell (3CK²), wird <span style=\"color: red;\">jedoch langsamer, je näher t an K liegt</span>. Bei t = K ist die Geschwindigkeit null.</li>\r\n    </ul>\r\n    <div>\r\n        <strong>Ergänzung zu AIMD (Deutsch)</strong>\r\n        <p>\r\n          Beim klassischen AIMD-Verfahren erfolgt die additive Erhöhung der cwnd um <strong>1 MSS pro RTT</strong>.\r\n          Dies ergibt sich daraus, dass bei jeder empfangenen ACK cwnd um <code>1/cwnd</code> MSS erhöht wird.\r\n          Bei cwnd ACKs pro RTT summiert sich das genau zu 1 MSS pro RTT.\r\n        </p>\r\n        <p>\r\n      Beim klassischen AIMD-Verfahren erfolgt die additive Erhöhung der cwnd um <strong>1 MSS pro RTT</strong>.\r\n      Dies ergibt sich daraus, dass TCP bei jedem empfangenen ACK die Fenstergröße um <code>1 / cwnd</code> MSS erhöht.\r\n      Bei cwnd ACKs pro RTT ergibt sich eine Zunahme von insgesamt <strong>1 MSS pro RTT</strong>.\r\n    </p>\r\n        <p>\r\n          Diese lineare Steigerung bedeutet, dass Verbindungen mit kürzerem RTT schneller wachsen,\r\n          was zu <strong>RTT-Unfairness</strong> führen kann.\r\n          CUBIC adressiert dieses Problem durch ein wachstumsverhalten, das unabhängig von RTT ist.\r\n        </p>\r\n      </div>\r\n\r\n    <p><strong>(ii) Entwicklung der Senderate:</strong></p>\r\n    <ul>\r\n      <li>AIMD: cwnd wächst linear mit der Zeit, <span style=\"color: red;\">unabhängig vom vorherigen Maximum.</span></li>\r\n      <li>CUBIC: cwnd wächst <span style=\"color: red;\">nicht-linear</span> (t³), bildet ein Plateau bei W<sub>max</sub> und wächst danach erneut schneller (konvexes Wachstum).</li>\r\n      <li>Durch die <span style=\"color: red;\">Zeit-basierte Steuerung</span> ist CUBIC effizienter bei großen Bandbreiten und hohen RTTs.</li>\r\n    </ul>\r\n    \r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解答（日本語）</h5>\r\n    <p><strong>前提：</strong> W<sub>max</sub> に達していないため、CUBIC は <em>凹型フェーズ（concave region）</em> にあります。</p>\r\n\r\n    <p><strong>(i) 反応速度：</strong></p>\r\n    <ul>\r\n      <li>AIMD：RTT ごとに一定量（1セグメント）ずつ増加 → 常に一定の反応速度。</li>\r\n      <li>CUBIC：<i>W(t) = C(t−K)³ + W<sub>max</sub></i> に従い、微分値 <i>dW/dt = 3C(t−K)²</i> が反応速度を示す。</li>\r\n      <li>⇒ 初期（t = 0）では <i>3CK²</i> と速いが、時間が経って t → K に近づくと反応速度は減少し、t = K で 0 になる。</li>\r\n    </ul>\r\n    <div>\r\n      <strong>補足：AIMD の成長挙動</strong>\r\n\r\n          <p>\r\n      AIMD（加算的増加）では、<strong>RTT ごとに cwnd が 1 MSS（最大セグメントサイズ）増加</strong>します。\r\n      これは TCP が 1 ACK を受け取るたびに <code>1 / cwnd</code> MSS 分だけ cwnd を増やすためで、\r\n      1 RTT に約 cwnd 個の ACK が返ってくることで合計 1 MSS 増加します。\r\n    </p>\r\n    <p>\r\n      よって、これは時間あたりのウィンドウ増加率として次のように表せます：\r\n    </p>\r\n    <p class=\"text-center\"><strong>増加速度 = 1 MSS / RTT</strong></p>\r\n    <p>\r\n      つまり、<strong>RTT が短いほど cwnd の成長が速くなる</strong>ため、短RTTフローが有利となり、不公平性が生じます。\r\n      CUBIC はこの課題に対応するため、RTT に依存しない時間ベースの成長モデルを採用しています。\r\n    </p>\r\n      <p>\r\n        このため、<strong>RTT が短いフローほど速く増加</strong>し、結果として「RTT による不公平さ」が生まれます。\r\n        CUBIC はこの点を解消するため、RTT 非依存な時間ベース成長モデルを採用しています。\r\n      </p>\r\n    </div>\r\n\r\n    <p><strong>(ii) 送信レートの推移：</strong></p>\r\n    <ul>\r\n      <li>AIMD：時間に対して直線的にウィンドウが増加し、<span style=\"color: red;\">過去の最大値に依存しない。</span></li>\r\n      <li>CUBIC：三次関数的に成長し、W<sub>max</sub> に近づくと成長が鈍化（プラトー）、それを越えると再び加速的に増加（凸型）。</li>\r\n      <li>RTT に依存せず、経過時間のみで増加するため、遅延が大きいネットワークでも高効率。</li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n    <!-- 問題文（Deutsch + 日本語） -->\r\n    <div class=\"border rounded p-3 bg-light mb-4\">\r\n      <p><strong>Aufgabe:</strong><br />\r\n        Beschreiben Sie die Wachstumsfunktionen von AIMD und CUBIC.<br />\r\n        Wie verläuft das Wachstum der Congestion Window (cwnd) in beiden Ansätzen (linear vs. kubisch)?<br />\r\n        Was bedeutet das für die Performance in Netzwerken mit hoher Bandbreite und Latenz? (4P)\r\n      </p>\r\n      <hr />\r\n      <p><strong>問題:</strong><br />\r\n        AIMD と CUBIC の成長関数を比較せよ。<br />\r\n        各方式における輻輳ウィンドウ（cwnd）の増加はどのような形か（線形 vs. 三次関数）？<br />\r\n        それは高帯域・高遅延ネットワークにおいて性能にどのような影響を与えるか？（4点）\r\n      </p>\r\n    </div>\r\n\r\n    <!-- 解答：ドイツ語 & 日本語 横並び -->\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6\">\r\n        <h5>Antwort (Deutsch)</h5>\r\n        <p><strong>AIMD:</strong></p>\r\n        <ul>\r\n          <li>cwnd wächst linear pro RTT (Additive Increase)</li>\r\n          <li>Verlust führt zu Multiplicative Decrease (z.B. Halbierung)</li>\r\n          <li>Effizient bei kleinen bis mittleren Netzen</li>\r\n        </ul>\r\n        <p><strong>CUBIC:</strong></p>\r\n        <ul>\r\n          <li>cwnd wächst gemäß kubischer Funktion: <span>W(t) = C(t−K)³ + W<sub>max</sub></span></li>\r\n          <li>Wachstum unabhängig von RTT → besser in Hochlatenznetzen</li>\r\n          <li>Schnellere Erholung und bessere Auslastung bei großer Bandbreite</li>\r\n        </ul>\r\n        <p><strong>Fazit:</strong> CUBIC skaliert besser in Hochgeschwindigkeitsnetzen mit hoher Latenz als AIMD.</p>\r\n      </div>\r\n\r\n      <div class=\"col-md-6\">\r\n        <h5>解答（日本語）</h5>\r\n        <p><strong>AIMD：</strong></p>\r\n        <ul>\r\n          <li>cwnd は RTT ごとに線形に増加（加算的増加）</li>\r\n          <li>損失時に乗算的に減少（例：半分）</li>\r\n          <li>中小規模のネットワークでは適している</li>\r\n        </ul>\r\n        <p><strong>CUBIC：</strong></p>\r\n        <ul>\r\n          <li>cwnd は三次関数に基づいて増加：<span>W(t) = C(t−K)³ + W<sub>max</sub></span></li>\r\n          <li>RTT に依存せず、遅延の大きい環境でも効率よく増加</li>\r\n          <li>高帯域のネットワークでの利用率が高く、回復も早い</li>\r\n        </ul>\r\n        <p><strong>結論：</strong> CUBIC は高帯域・高遅延ネットワークにおいて AIMD よりもスケーラビリティに優れている。</p>\r\n      </div>\r\n    </div>\r\n\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// Keine Logik nötig\r\n</script>\r\n\r\n<style scoped>\r\n.border {\r\n  border: 1px solid #ccc;\r\n}\r\n.bg-light {\r\n  background-color: #f8f9fa;\r\n}\r\n</style>\r\n","import script from \"./chapter15_94.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./chapter15_94.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./chapter15_94.vue?vue&type=style&index=0&id=2b73648a&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-2b73648a\"]])\n\nexport default __exports__"],"names":["_createElementBlock","_hoisted_1","_cache","__exports__"],"sourceRoot":""}