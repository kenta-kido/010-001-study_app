{"version":3,"file":"js/5902.b2951b2a.js","mappings":"wWACEA,EAAAA,EAAAA,IAiUM,MAjUNC,EAiUM,C,k5HAlLRC,EAAAA,EAAAA,IAOM,MAPNC,EAOM,EANJD,EAAAA,EAAAA,IAIE,OAHCE,KAAKC,EAAAA,EAAAA,IAAAC,GACNC,IAAI,wBACJC,MAAM,4B,uBAERN,EAAAA,EAAAA,IAA2E,KAAxEM,MAAM,mBAAkB,gDAA4C,M,unKCnJzE,MAAMC,EAAc,EAEpB,O","sources":["webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_50_ex.vue","webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_50_ex.vue?009b"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">UDP/TCP</h3>\r\n<!-- Thema 1 -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Was ist UDP und wie funktioniert es im Vergleich zu TCP?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    UDPとは何か？TCPと比べてどのように機能するのか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      <strong>UDP (User Datagram Protocol)</strong> ist ein verbindungsloses Transportprotokoll auf Ebene 4 (Transport Layer) des OSI-Modells.\r\n      Es überträgt Daten in Form von sogenannten \"Datagrammen\", ohne vorher eine Verbindung aufzubauen.\r\n    </p>\r\n    <p>\r\n      Im Gegensatz zu <strong>TCP</strong> garantiert UDP <em>nicht</em> die Zustellung, Reihenfolge oder Fehlerfreiheit der Daten. Es gibt:\r\n    </p>\r\n    <ul>\r\n      <li>keinen Verbindungsaufbau (kein Handshake)</li>\r\n      <li>keine Wiederholung bei Paketverlust</li>\r\n      <li>keine Garantie für die Reihenfolge</li>\r\n      <li>keine Fluss- oder Staukontrolle</li>\r\n    </ul>\r\n    <p>\r\n      Dafür ist UDP sehr <strong>schnell und effizient</strong>, da es auf Overhead verzichtet. Es eignet sich besonders für Echtzeitanwendungen, bei denen Geschwindigkeit wichtiger ist als Zuverlässigkeit:\r\n    </p>\r\n    <ul>\r\n      <li>Streaming (Audio/Video)</li>\r\n      <li>VoIP (z.&nbsp;B. Skype, Zoom)</li>\r\n      <li>Online-Games</li>\r\n      <li>DNS-Anfragen (Domain Name System)</li>\r\n    </ul>\r\n    <p>\r\n      Bei DNS z.&nbsp;B. wird oft ein einziges UDP-Paket gesendet, um eine Anfrage zu stellen. Falls keine Antwort kommt, wiederholt der Client die Anfrage.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      <strong>UDP（User Datagram Protocol）</strong>は、OSI参照モデルの第4層（トランスポート層）に位置するプロトコルで、\r\n      「接続を確立せずに」データを送信できる<strong>コネクションレス型</strong>の通信方式です。\r\n    </p>\r\n    <p>\r\n      <strong>TCP</strong>とは異なり、UDPには以下のような制御機能がありません：\r\n    </p>\r\n    <ul>\r\n      <li>通信前の接続確立（ハンドシェイク）がない</li>\r\n      <li>パケットの再送制御がない</li>\r\n      <li>到着順の保証がない</li>\r\n      <li>フロー制御や輻輳制御がない</li>\r\n    </ul>\r\n    <p>\r\n      その分、UDPは<strong>非常に高速かつシンプル</strong>で、リアルタイム性を重視する用途に適しています。\r\n    </p>\r\n    <ul>\r\n      <li>映像・音声ストリーミング</li>\r\n      <li>VoIP（例：Skype、Zoomなど）</li>\r\n      <li>オンラインゲーム</li>\r\n      <li>DNS（ドメイン名解決）</li>\r\n    </ul>\r\n    <p>\r\n      例えばDNSでは、クライアントは1つのUDPパケットで問い合わせを送り、応答が来なければ再送するという仕組みです。\r\n      軽量かつ高速で、応答が早いプロトコル設計が求められる場面に最適です。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n\r\n<!-- Thema: Warum ist UDP so schnell? Zusammenhang mit der Segmentstruktur -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum ist UDP so schnell? Zusammenhang mit der Segmentstruktur\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    なぜUDPは高速なのか？セグメント構造との関係とデータ長の限界\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      UDP ist besonders schnell, weil es einen sehr kleinen und einfachen Header hat – nur <strong>8 Byte</strong>.\r\n    </p>\r\n    <p>Der Header besteht aus vier 2-Byte-Feldern:</p>\r\n    <ul>\r\n      <li><code>Source Port</code> – Quellport (2 Byte)</li>\r\n      <li><code>Destination Port</code> – Zielport (2 Byte)</li>\r\n      <li><code>Length</code> – Länge von Header + Nutzdaten (2 Byte)</li>\r\n      <li><code>Checksum</code> – Fehlerprüfung (2 Byte)</li>\r\n    </ul>\r\n    <p>\r\n      Das Feld <code>Length</code> ist ein <strong>16-Bit-Wert</strong>, was bedeutet:\r\n      <br />\r\n      → <strong>Maximale UDP-Paketgröße = 65.535 Byte</strong>\r\n    </p>\r\n    <p>\r\n      Davon entfallen 8 Byte auf den Header → <strong>Maximale Nutzdaten: 65.527 Byte</strong>\r\n    </p>\r\n    <p>\r\n      In der Praxis ist die maximale UDP-Datenlänge jedoch meist <strong>durch das darunterliegende IP-Protokoll</strong> begrenzt (z.&nbsp;B. 1.472 Byte bei IPv4 über Ethernet).\r\n    </p>\r\n    <p>\r\n      Das macht UDP ideal für schnelle, kurze Datenübertragungen – ohne großen Overhead, z.&nbsp;B. für DNS, VoIP oder Online-Games.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      UDPは<strong>ヘッダーが8バイトしかない</strong>という非常に軽量な構造により、通信速度が非常に速いのが特長です。\r\n    </p>\r\n    <p>ヘッダーは次の4つのフィールド（各2バイト＝16ビット）で構成されています：</p>\r\n    <ul>\r\n      <li><code>送信元ポート番号</code>（2バイト）</li>\r\n      <li><code>宛先ポート番号</code>（2バイト）</li>\r\n      <li><code>長さ</code>（2バイト）＝ヘッダー＋データの合計サイズ</li>\r\n      <li><code>チェックサム</code>（2バイト）＝誤り検出用</li>\r\n    </ul>\r\n    <p>\r\n      「長さ」フィールドは16ビットなので、<strong>UDPセグメントの最大サイズは65,535バイト</strong>です。\r\n    </p>\r\n    <p>\r\n      このうちヘッダーが8バイトなので、<strong>最大データ長は65,527バイト</strong>となります。\r\n    </p>\r\n    <p>\r\n      ただし実際には、<strong>下位のIP層（特にIPv4 + Ethernet）での制限</strong>により、UDPのペイロードは通常1,472バイト程度に抑えられます（MTU: 1,500 - IPヘッダー20 - UDPヘッダー8）。\r\n    </p>\r\n    <p>\r\n      このシンプルかつ軽量な構造により、UDPはDNSやVoIP、ゲーム通信など、<strong>遅延を最小限にしたい用途に最適</strong>です。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- Abbildung -->\r\n<div class=\"text-center my-4\">\r\n  <img\r\n    :src=\"imgUrl\"\r\n    alt=\"UDP segment structure\"\r\n    class=\"img-fluid rounded border\"\r\n  />\r\n  <p class=\"text-muted mt-2\">Abbildung: UDP-Segmentstruktur (Figure 0601)</p>\r\n</div>\r\n\r\n<!-- Thema: Warum ist die maximale UDP-Länge 2^16 - 1 = 65535 Byte? -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum ist die maximale UDP-Länge 2<sup>16</sup> − 1 = 65.535 Byte?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    なぜUDPの最大長は2<sup>16</sup> − 1 = 65,535バイトなのか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Im UDP-Header gibt es ein Feld namens <code>Length</code>, das die <strong>Gesamtlänge des UDP-Segments</strong> angibt (also Header + Nutzdaten).\r\n    </p>\r\n    <p>\r\n      Dieses Feld ist <strong>16 Bit breit</strong>, was bedeutet, dass es Werte von 0 bis 65.535 (2<sup>16</sup> − 1) darstellen kann.\r\n    </p>\r\n    <p>\r\n      Somit ist die maximal mögliche Segmentgröße bei UDP:\r\n    </p>\r\n    <ul>\r\n      <li><strong>65.535 Byte</strong> (16 Bit Maximum)</li>\r\n      <li>davon <strong>8 Byte für den Header</strong></li>\r\n      <li>→ maximal <strong>65.527 Byte an Nutzdaten</strong></li>\r\n    </ul>\r\n    <p>\r\n      Praktisch sind viele Netzwerke jedoch durch das MTU (z.&nbsp;B. Ethernet = 1.500 Byte) begrenzt.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      UDPヘッダーには、<code>Length</code> というフィールドがあり、<strong>UDPセグメント全体の長さ（ヘッダー + データ）</strong>を表します。\r\n    </p>\r\n    <p>\r\n      この「長さ」フィールドは <strong>16ビット</strong>（2バイト）です。つまり、<strong>表現できる最大値は2<sup>16</sup> − 1 = 65,535</strong> です。\r\n    </p>\r\n    <p>\r\n      よって、UDPパケットの最大サイズは：\r\n    </p>\r\n    <ul>\r\n      <li><strong>最大 65,535 バイト</strong>（フィールドの上限）</li>\r\n      <li>うち <strong>8 バイトがヘッダー</strong></li>\r\n      <li>→ <strong>最大データ長は 65,527 バイト</strong></li>\r\n    </ul>\r\n    <p>\r\n      実際のネットワークでは、<strong>MTU（最大転送単位）</strong>の制限（例：Ethernet では約1,500バイト）により、UDPは通常もっと小さく分割されます。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- Thema: Warum ist die maximale UDP-Länge 2^16 - 1 = 65.535 Byte? -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum ist die maximale UDP-Länge 2<sup>16</sup> − 1 = 65.535 Byte?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    なぜUDPの最大長は2<sup>16</sup> − 1 = 65,535バイトなのか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Das Feld <code>Length</code> im UDP-Header ist 16 Bit breit. Damit können <strong>2<sup>16</sup> = 65.536</strong> verschiedene Werte dargestellt werden.\r\n      Da bei der Zählung bei 0 begonnen wird, ist der <strong>maximale darstellbare Wert 65.535</strong>.\r\n    </p>\r\n    <p>\r\n      Somit kann ein UDP-Segment maximal 65.535 Byte lang sein (inklusive Header).\r\n    </p>\r\n    <p>\r\n      <strong>Beispiel:</strong> Wenn ein Feld 3 Bit breit ist, also z.&nbsp;B. <code>111</code>, entspricht das dem Wert <strong>7</strong>. \r\n      Man kann also von <code>000 (0)</code> bis <code>111 (7)</code> zählen → <strong>insgesamt 8 mögliche Werte</strong>.\r\n    </p>\r\n    <p>\r\n      Genau das gleiche Prinzip gilt bei 16 Bit: <code>0000000000000000</code> bis <code>1111111111111111</code> = 0 bis 65.535.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      UDPヘッダー内の <code>Length</code> フィールドは <strong>16ビット（2バイト）</strong>です。\r\n      これは <strong>2<sup>16</sup> = 65,536</strong> 通りの値を表現できます。\r\n      ただし、値は<strong>0から</strong>始まるため、最大値は <strong>2<sup>16</sup> − 1 = 65,535</strong> になります。\r\n    </p>\r\n    <p>\r\n      つまり、UDPセグメント全体の最大長（ヘッダー + データ）は 65,535バイトです。\r\n    </p>\r\n    <p>\r\n      <strong>例えば：</strong> フィールドが3ビットしかなければ、\r\n      <code>000</code> から <code>111</code> までしか表せません（これは 0〜7 で、8通り）。\r\n      → <strong>「2のn乗 − 1」までが最大値</strong> というルールです。\r\n    </p>\r\n    <p>\r\n      このルールは、UDPに限らず、あらゆるプロトコルや数値表現（アドレス・識別子など）において使われています。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<!-- Thema: Warum verwendet DNS UDP (und nicht TCP)? -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum verwendet DNS UDP (und nicht TCP)?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    DNS（ドメイン名解決）ではなぜUDPが使われているのか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Das Domain Name System (DNS) übersetzt Domainnamen (z.&nbsp;B. <code>example.com</code>) in IP-Adressen.\r\n      Für DNS-Anfragen wird in den meisten Fällen <strong>UDP</strong> verwendet – und zwar auf Port <code>53</code>.\r\n    </p>\r\n    <p>\r\n      Die Gründe, warum DNS in der Regel UDP verwendet:\r\n    </p>\r\n    <ul>\r\n      <li><strong>Sehr schnelle Übertragung:</strong> Es ist kein Verbindungsaufbau wie bei TCP erforderlich (kein Three-Way-Handshake).</li>\r\n      <li><strong>Sehr kleine Datenmengen:</strong> Typische DNS-Antworten sind meist unter 512 Byte.</li>\r\n      <li><strong>Geringer Protokoll-Overhead:</strong> UDP hat nur 8 Byte Header, während TCP deutlich mehr verwaltet.</li>\r\n      <li><strong>Leichtgewichtige Verarbeitung:</strong> UDP ist einfacher zu implementieren und verursacht geringere Verarbeitungslast auf Client und Server.</li>\r\n    </ul>\r\n    <p>\r\n      Wenn jedoch die Antwort größer ist oder Zuverlässigkeit gefordert wird (z.&nbsp;B. bei Zonentransfers oder DNSSEC), <strong>wechselt DNS automatisch auf TCP</strong>.\r\n    </p>\r\n    <p>\r\n      Seit der Einführung von <strong>EDNS(0)</strong> (Extension Mechanism for DNS) sind größere DNS-Antworten über 512 Byte möglich,\r\n      aber in solchen Fällen wird der Fallback auf TCP verwendet.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      DNS（Domain Name System）は、<code>example.com</code> のようなドメイン名をIPアドレスに変換する仕組みです。\r\n      このDNSの問い合わせには、通常 <strong>UDP（ポート53）</strong> が使用されます。\r\n    </p>\r\n    <p>\r\n      DNSでUDPが使われる主な理由：\r\n    </p>\r\n    <ul>\r\n      <li><strong>通信が非常に高速：</strong> TCPのような接続確立（3ウェイハンドシェイク）が不要なため、即座に送信できます。</li>\r\n      <li><strong>データサイズが非常に小さい：</strong> 一般的なDNS応答は512バイト未満に収まります。</li>\r\n      <li><strong>プロトコルのオーバーヘッドが小さい：</strong> UDPヘッダーはわずか8バイトで、TCPより軽量です。</li>\r\n      <li><strong>処理が軽い：</strong> クライアント・サーバ双方の処理負担が小さく、実装もシンプルです。</li>\r\n    </ul>\r\n    <p>\r\n      ただし、応答が大きい場合や、信頼性が求められる用途（例：ゾーン転送やDNSSECなど）では、\r\n      DNSは<strong>自動的にTCPに切り替えて通信</strong>を行います。\r\n    </p>\r\n    <p>\r\n      また、<strong>EDNS(0)</strong>（拡張DNS）により512バイトを超える応答が可能となったため、\r\n      TCPにフォールバックされるケースも増加しています。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport imgUrl from '@/assets/lecture/lecture03/Figure_0601.png';\r\n</script>\r\n","import script from \"./chapter15_50_ex.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./chapter15_50_ex.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","src","_unref","imgUrl","alt","class","__exports__"],"sourceRoot":""}