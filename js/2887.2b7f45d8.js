"use strict";(self["webpackChunkstudy_site"]=self["webpackChunkstudy_site"]||[]).push([[2887],{2887:function(a,e,d){d.r(e),d.d(e,{default:function(){return f}});var t=d(6768);const n={class:"container my-4"};var r={__name:"chapter15_31",setup(a){return(a,e)=>((0,t.uX)(),(0,t.CE)("div",n,e[0]||(e[0]=[(0,t.Fv)('<h3 class="mb-4" data-v-addaffe4>3(a) Dijkstra – Start und Initialisierung</h3><div class="border rounded p-3 bg-light mb-4" data-v-addaffe4><p data-v-addaffe4><strong data-v-addaffe4>Aufgabe:</strong><br data-v-addaffe4> Wie startet der Algorithmus und wie wird das Basiskantengewicht berechnet? <br data-v-addaffe4> (Hinweis: Der Begriff „Basiskantengewicht“ war vermutlich nicht korrekt formuliert.) </p><hr data-v-addaffe4><p data-v-addaffe4><strong data-v-addaffe4>問題:</strong><br data-v-addaffe4> Dijkstraアルゴリズムはどのように開始され、初期の重み（基準エッジの重み？）はどのように決定されるか？ <br data-v-addaffe4> （※「Basiskantengewicht」は誤った表現だった可能性あり） </p></div><div class="row" data-v-addaffe4><div class="col-md-6" data-v-addaffe4><h5 data-v-addaffe4>Antwort (Deutsch)</h5><p data-v-addaffe4> Der Dijkstra-Algorithmus startet bei einem gegebenen Startknoten (z.B. A) und setzt dessen Distanz auf 0. Alle anderen Knoten erhalten zunächst den Wert ∞ (unendlich) als vorläufige Distanz. </p><p data-v-addaffe4> Dann prüft man alle direkten Nachbarn des Startknotens. Die Kosten (Kanten­gewichte) zu diesen Nachbarn werden als vorläufige Distanzen gesetzt. Diese werden aus den in der Tabelle gegebenen Werten übernommen – es ist keine „Berechnung“ im Sinne von Formeln notwendig. </p><p data-v-addaffe4> Anschließend wird iterativ immer der Knoten mit der aktuell kleinsten bekannten Distanz gewählt und seine Nachbarn aktualisiert („Relaxierung“). </p></div><div class="col-md-6" data-v-addaffe4><h5 data-v-addaffe4>解答（日本語）</h5><p data-v-addaffe4> Dijkstra アルゴリズムは、出発点となるノード（例：A）から開始され、そのノードの距離を 0 に設定します。 他のすべてのノードの初期距離は ∞（無限大）に設定されます。 </p><p data-v-addaffe4> 次に、開始ノードに隣接するノードすべてを確認し、直接接続されているリンクのコストを それぞれの距離として初期設定します。これが「初期エッジ重み」の意味であり、 単に与えられたコストを反映するだけで特別な計算は不要です。 </p><p data-v-addaffe4> その後は、未確定ノードの中から最小距離のノードを選び、その隣接ノードの距離を更新する （リラクゼーション）という処理を繰り返します。 </p></div></div>',3)])))}},i=d(1241);const s=(0,i.A)(r,[["__scopeId","data-v-addaffe4"]]);var f=s}}]);
//# sourceMappingURL=2887.2b7f45d8.js.map