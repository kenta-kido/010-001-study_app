{"version":3,"file":"js/5104.2550f15e.js","mappings":"+fACEA,EAAAA,EAAAA,IA2UM,MA3UNC,EA2UM,C,o2NAjJJC,EAAAA,EAAAA,IAGM,MAHNC,EAGM,EAFJD,EAAAA,EAAAA,IAAmG,OAA7FE,KAAKC,EAAAA,EAAAA,IAAAC,GAAWC,IAAI,sCAAsCC,MAAM,4B,uBACtEN,EAAAA,EAAAA,IAAqE,KAAlEM,MAAM,mBAAkB,0CAAsC,M,y9CA6CnEN,EAAAA,EAAAA,IAGM,MAHNO,EAGM,EAFJP,EAAAA,EAAAA,IAA0H,OAApHE,KAAKC,EAAAA,EAAAA,IAAAK,GAAWH,IAAI,6DAA6DC,MAAM,4B,uBAC7FN,EAAAA,EAAAA,IAAuE,KAApEM,MAAM,mBAAkB,4CAAwC,M,wzCAuCrEN,EAAAA,EAAAA,IAGM,MAHNS,EAGM,EAFJT,EAAAA,EAAAA,IAAqH,OAA/GE,KAAKC,EAAAA,EAAAA,IAAAO,GAAWL,IAAI,wDAAwDC,MAAM,4B,uBACxFN,EAAAA,EAAAA,IAAyE,KAAtEM,MAAM,mBAAkB,8CAA0C,M,s1EC/Q3E,MAAMK,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_31_ex.vue","webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_31_ex.vue?fc06"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">6. Link-State Routing – Vertiefungsthemen</h3>\r\n\r\n    <!-- Thema 6-1 -->\r\n    <div class=\"border rounded p-3 bg-light mb-4\">\r\n      <p><strong>Thema 6-1:</strong><br />\r\n        Wie entsteht aus Dijkstra ein Forwarding Table?\r\n      </p>\r\n      <hr />\r\n      <p><strong>テーマ 6-1:</strong><br />\r\n        Dijkstraアルゴリズムから転送表（Forwarding Table）はどのように作られるか？\r\n      </p>\r\n    </div>\r\n    <div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n          <h5>Erklärung (Deutsch)</h5>\r\n          <p>\r\n            Dijkstra berechnet die kürzesten Wege zu allen Zielen.  \r\n            <br/><span style=\"color: red;\">Für den Forwarding Table braucht man aber nur die nächste Station (Next Hop).</span>  \r\n            <br/>Daher verfolgt man vom Ziel aus rückwärts den Pfad zum Startknoten und notiert den ersten Link.\r\n          </p>\r\n          <p>\r\n            Für jeden Zielknoten wird also ermittelt, über welchen Nachbarn das erste Paket gehen muss.  \r\n            So entsteht die <strong>Next-Hop-Tabelle</strong>, die im Router als Forwarding Table gespeichert wird.\r\n          </p>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <h5>解説（日本語）</h5>\r\n          <p>\r\n            Dijkstraアルゴリズムでは、自ノードからすべての宛先ノードまでの最短経路を計算します。  \r\n            <br/><span style=\"color: red;\">ただし、実際のパケット転送に必要なのは、「次に送るべき隣接ノード（next hop）」だけです。</span>\r\n          </p>\r\n          <p>\r\n            そのため、最短経路を各宛先から逆方向にたどり、出発点（自ノード）に戻る経路上の最初のリンクを記録します。  \r\n            <br/>これにより、各宛先に対してどの隣接ノードに送るべきかがわかり、<strong>転送表（Forwarding Table）</strong>が作成されます。\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Thema 6-2 -->\r\n    <div class=\"border rounded p-3 bg-light mb-4\">\r\n      <p><strong>Thema 6-2:</strong><br />\r\n        Wie wählt man bei mehreren gleichwertigen Pfaden?\r\n      </p>\r\n    </div>\r\n    <div>\r\n      <hr />\r\n      <p><strong>テーマ 6-2:</strong><br />\r\n        同じコストの複数経路がある場合、どのように選択されるのか？\r\n      </p>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n          <h5>Erklärung (Deutsch)</h5>\r\n          <p>\r\n            Wenn zwei oder mehr Pfade die gleiche Kosten haben, spricht man von einem „Tie“.  \r\n            Der Dijkstra-Algorithmus selbst trifft dann eine Wahl nach Implementierung:  \r\n            alphabetische Reihenfolge, Portnummer oder Zufall.\r\n          </p>\r\n          <p>\r\n            Diese Wahl beeinflusst den Traffic-Fluss und kann bei kleinen Änderungen große Effekte haben.  \r\n            Manche Systeme nutzen Load Balancing oder Equal-Cost Multipath (ECMP), um mehrere Pfade gleichzeitig zu nutzen.\r\n          </p>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <h5>解説（日本語）</h5>\r\n          <p>\r\n            同じコストの複数の経路が存在する場合、これを「タイ（tie）」と呼びます。  \r\n            Dijkstraアルゴリズム自体は、その中から1つを選択しますが、選び方は実装に依存します。たとえば、名前順・ポート番号順・ランダムなどです。\r\n          </p>\r\n          <p>\r\n            この選択は通信経路に大きな影響を与える可能性があり、場合によってはEqual-Cost Multipath（ECMP）や  \r\n            負荷分散を用いて複数の経路を同時に使用する方法もあります。\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Thema 6-3 -->\r\n    <div class=\"border rounded p-3 bg-light mb-4\">\r\n      <p><strong>Thema 6-3:</strong><br />\r\n        Wie effizient ist Dijkstra und wie kann man ihn verbessern?\r\n      </p>\r\n    </div>\r\n    <div>\r\n      <hr />\r\n      <p><strong>テーマ 6-3:</strong><br />\r\n        Dijkstraアルゴリズムの計算効率とその改善方法について\r\n      </p>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n          <h5>Erklärung (Deutsch)</h5>\r\n          <p>\r\n            Die naive Implementierung von Dijkstra hat <span style=\"color: red;\">eine Komplexität von O(n<sup>2</sup>)</span>.  \r\n            Bei vielen Knoten wird das langsam. Nutzt man <span style=\"color: red;\">einen Min-Heap (Priority Queue)</span>,  \r\n            kann man <span style=\"color: red;\">die Laufzeit auf O(n log<sub>n</sub> + E log<sub>n</sub>) senken</span>.\r\n          </p>\r\n          <p>\r\n            Moderne Implementierungen (z.&nbsp;B. in OSPF) verwenden binäre Heaps oder Fibonacci-Heaps,  \r\n            um Performance bei großen Netzen zu verbessern.\r\n          </p>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <h5>解説（日本語）</h5>\r\n          <p>\r\n            Dijkstraアルゴリズムの単純な実装では、すべてのノードに対して距離を比較するため、  \r\n            <span style=\"color: red;\">計算量はO(n<sup>2</sup>)</span>となり、大規模ネットワークでは遅くなります。\r\n          </p>\r\n          <p>\r\n            これを改善するために、<span style=\"color: red;\">優先度付きキュー（Min-Heapなど）</span>を使って  \r\n            最小コストのノードを効率的に取り出すことで、<span style=\"color: red;\">O(n log<sub>n</sub> + E log<sub>n</sub>)に高速化</span>できます。\r\n          </p>\r\n          <p>\r\n            実際のOSPFなどでは、バイナリヒープやフィボナッチヒープを使用して処理性能を高めています。\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Thema 6-4 -->\r\n    <div class=\"border rounded p-3 bg-light mb-4\">\r\n      <p><strong>Thema 6-4:</strong><br />\r\n        Was ist das Oscillation-Problem bei dynamischen Metriken?\r\n      </p>\r\n    </div>\r\n    <div>\r\n      <hr />\r\n      <p><strong>テーマ 6-4:</strong><br />\r\n        動的メトリックにおけるOscillation（経路の揺れ）問題とは？\r\n      </p>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n          <h5>Erklärung (Deutsch)</h5>\r\n          <p>\r\n            <span style=\"color: red;\">Wenn sich Metriken wie Delay oder Load schnell ändern</span>,  \r\n            können Router sich gegenseitig beeinflussen und <span style=\"color: red;\">ständig die Routen wechseln</span>.  \r\n            <br/>Dies nennt man <span style=\"color: red;\">Oscillation</span>.\r\n          </p>\r\n          <p>\r\n            Beispiel: Zwei Router wechseln immer wieder zwischen zwei Wegen,  \r\n            weil jeder denkt, der andere Weg sei kürzer. Die Routen „springen“ ständig hin und her.\r\n          </p>\r\n          <p>\r\n            Lösung: \r\n          </p>\r\n          <ul style=\"color: red;\">\r\n            <li>Hysterese: kleine Änderungen werden ignoriert, um unnötige Umschaltungen zu vermeiden</li>\r\n            <li>Schwellenwerte: Routenwechsel nur, wenn ein bestimmter Wert überschritten wird</li>\r\n            <li>Stabilitätsfilter: bevorzugt stabile Routen gegenüber kurzfristigen Schwankungen</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <h5>解説（日本語）</h5>\r\n          <p>\r\n            <span style=\"color: red;\">遅延やトラフィック量などのメトリックが頻繁に変動する環境</span>では、  \r\n            ルーターが経路を頻繁に切り替えすぎて不安定になることがあります。これを「Oscillation（経路の揺れ）」と呼びます。\r\n          </p>\r\n          <p>\r\n            例えば、2台のルーターが「A経由の方が速い」「いやB経由の方が速い」と交互に判断を変えることで、  \r\n            経路が何度も切り替わり、パケットの安定した転送ができなくなります。\r\n          </p>\r\n          <p>\r\n            解決策：\r\n          </p>\r\n          <ul style=\"color: red;\">\r\n            <li>ヒステリシス：小さな変化を無視して無駄な切り替えを避ける</li>\r\n            <li>しきい値：ある値を超えた場合のみルートを切り替える</li>\r\n            <li>安定性フィルター：短期的な変動よりも安定した経路を優先する</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n        <!-- Thema -->\r\n    <div class=\"border rounded p-3 bg-light mb-4\">\r\n      <p><strong>Thema 6-4 (Ergänzung):</strong><br />\r\n        Wie entsteht Routing-Oscillation durch lastabhängige Linkkosten?\r\n      </p>\r\n      <hr />\r\n      <p><strong>テーマ 6-4（補足）:</strong><br />\r\n        輻輳や負荷に応じたリンクコストにより経路が「振動」してしまうのはなぜか？\r\n      </p>\r\n    </div>\r\n\r\n    <!-- 図1 -->\r\n    <div class=\"text-center mb-4\">\r\n      <img :src=\"figure551\" alt=\"Initial routing state (Figure 5.5a)\" class=\"img-fluid rounded border\" />\r\n      <p class=\"text-muted mt-2\">Figure 5.5(a): 初期状態 – 全ルーターが反時計回り経路を選択</p>\r\n    </div>\r\n\r\n    <!-- Erklärung -->\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-md-6\">\r\n        <h5>Erklärung (Deutsch)</h5>\r\n        <p>\r\n          Wenn Linkkosten vom Datenverkehr abhängen, können Router bei jeder Ausführung des LS-Algorithmus  \r\n          andere Routen wählen. Das führt zu einem <strong>instabilen Routing-Verhalten</strong>.\r\n        </p>\r\n        <p>\r\n          Im Beispiel sendet jeder Knoten Verkehr zu w. Anfangs ist der Weg gegen den Uhrzeigersinn (counterclockwise) am günstigsten.\r\n        </p>\r\n        <p>\r\n          Doch nachdem y den Algorithmus erneut ausführt, erkennt es, dass der <strong>Uhrzeigersinn-Pfad</strong> kürzer geworden ist  \r\n          (da dort aktuell weniger Last ist). Es wechselt die Route – und bald folgen x und z.\r\n        </p>\r\n        <p>\r\n          Doch beim nächsten Durchlauf ist der neue Weg überlastet, der vorherige Weg wieder günstiger.  \r\n          Alle Router schalten zurück – und der Zyklus beginnt erneut: eine <strong>Routing-Oszillation</strong>.\r\n        </p>\r\n      </div>\r\n\r\n      <div class=\"col-md-6\">\r\n        <h5>解説（日本語）</h5>\r\n        <p>\r\n          リンクのコストがそのリンクを流れる<strong>トラフィック量に応じて変化</strong>する場合、  \r\n          経路が「変動」して安定しないことがあります。これが Oscillation（振動）問題です。\r\n        </p>\r\n        <p>\r\n          図5.5(a)では、全ノードが w に向けてパケットを反時計回り経路で送っています。\r\n        </p>\r\n        <p>\r\n          ところが、次のアルゴリズム実行時に y が時計回り経路の方がコストが小さいと判断し、  \r\n          それを選びます。やがて x, z もそれに追随します。\r\n        </p>\r\n        <p>\r\n          しかし、今度はそちらのルートが混雑し、もとのルートの方が空いてくるため、  \r\n          結果的にまた反時計回りに戻ってしまいます。これが経路の「振動」です。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 図2 -->\r\n    <div class=\"text-center mb-4\">\r\n      <img :src=\"figure552\" alt=\"Routing oscillation - clockwise and counterclockwise shift\" class=\"img-fluid rounded border\" />\r\n      <p class=\"text-muted mt-2\">Figure 5.5(b)–(c): 経路の切り替え：時計回り → 反時計回りへ</p>\r\n    </div>\r\n\r\n    <!-- 対策 -->\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-md-6\">\r\n        <h5>Erklärung: Gegenmaßnahmen (Deutsch)</h5>\r\n        <p>\r\n          Um solche Oszillationen zu vermeiden, kann man Folgendes tun:\r\n        </p>\r\n        <ul>\r\n          <li><span style=\"color: red;\">Linkkosten sollten nicht vom aktuellen Traffic abhängen</span></li>\r\n          <li>Nicht alle Router sollten gleichzeitig den LS-Algorithmus starten</li>\r\n          <li>Man kann <span style=\"color: red;\">zufällige Verzögerungen beim Senden von Link-State-Advertisments einführen</span></li>\r\n        </ul>\r\n        <p>\r\n          Diese Maßnahmen helfen, das Phänomen der Selbst-Synchronisation zu vermeiden,  \r\n          das durch gleichzeitige Entscheidungen aller Router entsteht.\r\n        </p>\r\n      </div>\r\n\r\n      <div class=\"col-md-6\">\r\n        <h5>解説：対策（日本語）</h5>\r\n        <p>\r\n          このような経路振動を防ぐには、以下のような工夫が有効です：\r\n        </p>\r\n        <ul>\r\n          <li><span style=\"color: red;\">リンクのコストをトラフィック量に依存させない</span></li>\r\n          <li>すべてのルーターが同時にLSアルゴリズムを実行しない</li>\r\n          <li><span style=\"color: red;\">各ルーターがリンク状態情報の送信タイミングをランダム</span>にする</li>\r\n        </ul>\r\n        <p>\r\n          特に「自己同期（self-synchronization）」の問題を避けるためには、  \r\n          各ルーターがランダムなタイミングで動作するように設計するのが効果的です。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 図3 -->\r\n    <div class=\"text-center mb-4\">\r\n      <img :src=\"figure553\" alt=\"Final state - randomization helps prevent oscillation\" class=\"img-fluid rounded border\" />\r\n      <p class=\"text-muted mt-2\">Figure 5.5(d): 全ルーターが再び時計回り経路を選択 – 振動の繰り返し</p>\r\n    </div>\r\n\r\n    <!-- Thema 6-4 (Vertiefung): Gegenmaßnahmen gegen Oscillation -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema 6-4 (Vertiefung):</strong><br />\r\n    Wie lassen sich Routing-Oszillationen im LS-Algorithmus vermeiden?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ 6-4（発展）:</strong><br />\r\n    Link-Stateルーティングで経路振動を防ぐにはどうすればよいか？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Routing-Oszillationen entstehen häufig, wenn Linkkosten von aktueller Last abhängen und alle Router  \r\n      gleichzeitig den LS-Algorithmus ausführen. Das führt zu synchronen, instabilen Pfadwechseln.\r\n    </p>\r\n    <p>\r\n      Es gibt mehrere Gegenmaßnahmen:\r\n    </p>\r\n    <ul>\r\n      <li><strong style=\"color: red;\">Feste Linkkosten:</strong> Man sollte Metriken wählen, die nicht direkt vom aktuellen Datenverkehr abhängen.</li>\r\n      <li><strong style=\"color: red;\">Asynchrone Ausführung:</strong> Router sollten den LS-Algorithmus nicht exakt zur selben Zeit ausführen.</li>\r\n      <li><strong style=\"color: red;\">Zufällige Verzögerung:</strong> Jeder Router kann die Aussendung seiner Link-State-Advertisments leicht verzögern (z.B. durch zufällige Timer).</li>\r\n    </ul>\r\n    <p>\r\n      Diese Maßnahmen verhindern <strong>Selbstsynchronisation</strong>, ein bekanntes Phänomen, bei dem sich Router unbeabsichtigt im Takt angleichen und damit alle gleichzeitig reagieren – was Oszillation erst auslöst.\r\n    </p>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      経路振動（Oscillation）は、リンクコストがトラフィックに応じて変化したり、すべてのルーターが同時に経路計算を実行したりすることで発生します。\r\n    </p>\r\n    <p>\r\n      これを防ぐための対策には、以下のようなものがあります：\r\n    </p>\r\n    <ul>\r\n      <li><strong>静的なリンクコストを使用：</strong> 通信量に応じてリンクコストが変わる設計は避け、一定のメトリック（距離や帯域など）を使う。</li>\r\n      <li><strong>非同期での実行：</strong> 全ルーターが同時にアルゴリズムを走らせるのではなく、タイミングをずらす。</li>\r\n      <li><strong>リンク状態広告の送信タイミングにランダム性を持たせる：</strong> これにより「自己同期」が起きにくくなります。</li>\r\n    </ul>\r\n    <p>\r\n      自己同期とは、各ルーターが偶然にも同じ周期でLSAを送るようになり、  \r\n      ネットワーク全体で一斉にルーティングの更新が走ってしまう現象です。  \r\n      このようなタイミングの一致が経路の振動を引き起こすため、ランダムな遅延を加えることで予防できます。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport figure551 from '@/assets/lecture/lecture03/Figure_0308.png'\r\nimport figure552 from '@/assets/lecture/lecture03/Figure_0309.png'\r\nimport figure553 from '@/assets/lecture/lecture03/Figure_0310.png'\r\n</script>\r\n\r\n<style scoped>\r\n.border {\r\n  border: 1px solid #ccc;\r\n}\r\n.bg-light {\r\n  background-color: #f8f9fa;\r\n}\r\n</style>","import script from \"./chapter15_31_ex.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./chapter15_31_ex.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./chapter15_31_ex.vue?vue&type=style&index=0&id=256f8346&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-256f8346\"]])\n\nexport default __exports__"],"names":["_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","src","_unref","figure551","alt","class","_hoisted_4","figure552","_hoisted_6","figure553","__exports__"],"sourceRoot":""}