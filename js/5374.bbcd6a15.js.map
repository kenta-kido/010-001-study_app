{"version":3,"file":"js/5374.bbcd6a15.js","mappings":"wLACOA,MAAM,kB,kCAAXC,EAAAA,EAAAA,IAwFM,MAxFNC,EAwFMC,EAAA,KAAAA,EAAA,K,iwFCxFR,MAAMC,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O","sources":["webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_61_ex.vue","webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_61_ex.vue?5348"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">UDP-Prüfsumme</h3>\r\n<!-- Thema: Warum ist die UDP-Prüfsumme „naiv“ und welche Grenzen hat sie? -->\r\n<div class=\"border rounded p-3 bg-light mb-4\">\r\n  <p><strong>Thema:</strong><br />\r\n    Warum gilt die UDP-Prüfsumme als „naiv“ und welche Schwächen hat sie?\r\n  </p>\r\n  <hr />\r\n  <p><strong>テーマ:</strong><br />\r\n    UDPのチェックサムはなぜ「ナイーブ（単純）」と言われるのか？その限界とは？\r\n  </p>\r\n</div>\r\n\r\n<div class=\"row mb-4\">\r\n  <div class=\"col-md-6\">\r\n    <h5>Erklärung (Deutsch)</h5>\r\n    <p>\r\n      Die UDP-Prüfsumme verwendet eine einfache 1er-Komplement-Summenbildung, um Datenübertragungen auf Bitfehler zu prüfen.\r\n      Doch dieses Verfahren hat <strong>strukturelle Schwächen</strong>:\r\n    </p>\r\n    <ul>\r\n      <li>Mehrere Bitfehler können sich gegenseitig aufheben → Prüfsumme bleibt gleich</li>\r\n      <li>Die Erkennungsrate liegt unter 100 %, insbesondere bei komplexeren Fehlern</li>\r\n    </ul>\r\n    <p>\r\n      Laut <strong>RFC 1071</strong> erkennt die UDP/TCP-Prüfsumme alle Einzelfehler sicher, aber nur eingeschränkt Mehrbit-Fehler.\r\n      Daher wird sie als <strong>naiv</strong> oder minimaler Schutzmechanismus betrachtet.\r\n    </p>\r\n    <p>\r\n      UDP ist ein leichtgewichtiges Protokoll – die Prüfsumme bietet nur eine „schnelle Plausibilitätsprüfung“.\r\n      Für sicherheitskritische oder zuverlässige Daten wird stattdessen Folgendes verwendet:\r\n    </p>\r\n    <ul>\r\n      <li>TCP (mit Fehlererkennung, Reihenfolge, Wiederholung)</li>\r\n      <li>Stärkere Prüfverfahren in der Anwendungsschicht wie CRC, SHA, MD5</li>\r\n    </ul>\r\n    <p>\r\n      <strong>Vergleich zur CRC:</strong><br />\r\n      Die CRC (Cyclic Redundancy Check) erkennt komplexe Bitmuster, auch Burstfehler, sehr zuverlässig.\r\n    </p>\r\n    <table class=\"table table-bordered table-sm\">\r\n      <thead><tr><th>Verfahren</th><th>Fehlerschutz</th><th>Typische Anwendung</th></tr></thead>\r\n      <tbody>\r\n        <tr><td>UDP-Prüfsumme</td><td>Grundlegend (naiv)</td><td>VoIP, Streaming, DNS</td></tr>\r\n        <tr><td>CRC</td><td>Sehr hoch</td><td>Ethernet, Speichermedien</td></tr>\r\n        <tr><td>SHA/MD5</td><td>Kryptographisch sicher</td><td>Signaturen, Datenintegrität</td></tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <div class=\"col-md-6\">\r\n    <h5>解説（日本語）</h5>\r\n    <p>\r\n      UDPのチェックサムは「<strong>1の補数加算</strong>」によってデータの整合性を検証しますが、\r\n      その手法には構造的な限界があります：\r\n    </p>\r\n    <ul>\r\n      <li>複数のビットが同時に反転した場合、それらが<strong>相殺されてしまい</strong>チェックサムが変わらないことがある</li>\r\n      <li>そのため、<strong>すべてのエラーを検出できるわけではない</strong></li>\r\n    </ul>\r\n    <p>\r\n      RFC 1071 によれば、UDP/TCPのチェックサムは「単一ビットエラー」には強いが、\r\n      「複数ビットの誤り」には検出漏れの可能性があるとされています。\r\n    </p>\r\n    <p>\r\n      このような性質から、UDPのチェックサムは<strong>最低限の保護手段</strong>として位置づけられ、\r\n      より高い信頼性が必要な場合は以下の手法が使われます：\r\n    </p>\r\n    <ul>\r\n      <li>TCP（再送・順序保証あり）</li>\r\n      <li>アプリ層での<strong>CRC</strong>や<strong>ハッシュ（SHA, MD5など）</strong>による整合性検証</li>\r\n    </ul>\r\n    <p>\r\n      <strong>CRCとの比較：</strong><br />\r\n      CRC（巡回冗長検査）は、複雑なビットパターンやバーストエラーも検出できる高精度な手法です。\r\n    </p>\r\n    <table class=\"table table-bordered table-sm\">\r\n      <thead><tr><th>方式</th><th>検出能力</th><th>用途例</th></tr></thead>\r\n      <tbody>\r\n        <tr><td>UDPチェックサム</td><td>基本的（ナイーブ）</td><td>VoIP, ストリーミング, DNS</td></tr>\r\n        <tr><td>CRC</td><td>非常に高い</td><td>イーサネット, ディスク</td></tr>\r\n        <tr><td>SHA/MD5</td><td>暗号学的に安全</td><td>署名, 改ざん検出</td></tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n</script>\r\n","import { render } from \"./chapter15_61_ex.vue?vue&type=template&id=05bba0e3\"\nconst script = {}\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_hoisted_1","_cache","script","__exports__","render"],"sourceRoot":""}