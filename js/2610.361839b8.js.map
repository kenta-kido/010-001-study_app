{"version":3,"file":"js/2610.361839b8.js","mappings":"mWACEA,EAAAA,EAAAA,IA6FM,MA7FNC,EA6FM,C,85FAbJC,EAAAA,EAAAA,IAYM,MAZNC,EAYM,EAXJD,EAAAA,EAAAA,IAIE,OAHCE,KAAKC,EAAAA,EAAAA,IAAAC,GACNC,IAAI,qCACJC,MAAM,4B,uBAERN,EAAAA,EAAAA,IAEI,KAFDM,MAAM,wBAAuB,wCAEhC,I,aACAN,EAAAA,EAAAA,IAEI,KAFDM,MAAM,cAAa,uBAEtB,Q,aCtFN,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://study-site/./src/views/lecture/lecture04/chapter03/chapter03_31.vue","webpack://study-site/./src/views/lecture/lecture04/chapter03/chapter03_31.vue?0be9"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">3.3.1 UDP Segment Structure</h3>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          The UDP segment structure, shown in Figure 3.7, is defined in RFC 768. The application\r\n          data occupies the data field of the UDP segment. For example, for DNS, the data\r\n          field contains either a query message or a response message. For a streaming audio\r\n          application, audio samples fill the data field.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          図3.7に示されるUDPセグメント構造は、RFC 768で定義されています。アプリケーションデータはUDPセグメントのデータフィールドに格納されます。たとえば、DNSの場合はこのデータフィールドに問い合わせメッセージまたは応答メッセージが入ります。ストリーミングオーディオアプリケーションでは、音声サンプルがこのフィールドを埋めます。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          The UDP header has only four fields, each consisting of two bytes. As discussed in\r\n          the previous section, the port numbers allow the destination host to pass the application data\r\n          to the correct process running on the destination end system (that is, to perform the demultiplexing function).\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          UDPヘッダには4つのフィールドしかなく、それぞれが2バイトで構成されています。前節で説明したように、ポート番号は宛先ホストがアプリケーションデータを正しいプロセスに渡すために使われます（つまり、デマルチプレクシング機能を実行するためです）。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          The length field specifies the number of bytes in the UDP segment (header plus\r\n          data). An explicit length value is needed since the size of the data field may differ\r\n          from one UDP segment to the next.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          長さフィールドは、UDPセグメント（ヘッダとデータを含む）のバイト数を指定します。データフィールドのサイズはUDPセグメントごとに異なる可能性があるため、明示的な長さの値が必要です。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          The checksum is used by the receiving host to check whether errors have been introduced into the segment.\r\n          In truth, the checksum is also calculated over a few of the fields in the IP header in addition to the\r\n          UDP segment. But we ignore this detail in order to see the forest through the trees.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          チェックサムは、受信ホストがセグメントにエラーが混入していないかを確認するために使用されます。実際には、チェックサムはUDPセグメントに加えて、IPヘッダ内のいくつかのフィールドも対象にして計算されますが、ここでは全体像をつかむためにその詳細は省略します。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          We’ll discuss the checksum calculation below. Basic principles of error detection are\r\n          described in Section 6.2. The length field specifies the length of the UDP segment,\r\n          including the header, in bytes.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          チェックサムの計算方法については後述します。エラー検出の基本原理は第6.2節で説明されています。長さフィールドは、ヘッダを含めたUDPセグメント全体の長さ（バイト単位）を示します。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 図3.7の画像 -->\r\n    <div class=\"text-center my-4\">\r\n      <img\r\n        :src=\"imgUrl7\"\r\n        alt=\"Figure 3.7 - UDP segment structure\"\r\n        class=\"img-fluid rounded border\"\r\n      />\r\n      <p class=\"text-muted mt-2 mb-0\">\r\n        Figure 3.7 — UDP segment structure\r\n      </p>\r\n      <p class=\"text-muted\">\r\n        図3.7 — UDPセグメント構造\r\n      </p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport imgUrl7 from '@/assets/lecture/lecture04/Figure_07.png';\r\n</script>\r\n\r\n<style scoped>\r\n.text-muted {\r\n  color: #6c757d;\r\n}\r\n</style>\r\n","import script from \"./chapter03_31.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./chapter03_31.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./chapter03_31.vue?vue&type=style&index=0&id=3e96306e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-3e96306e\"]])\n\nexport default __exports__"],"names":["_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","src","_unref","imgUrl7","alt","class","__exports__"],"sourceRoot":""}