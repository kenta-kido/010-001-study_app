"use strict";(self["webpackChunkstudy_site"]=self["webpackChunkstudy_site"]||[]).push([[5804],{2980:function(e,a,t){t.r(a),t.d(a,{default:function(){return p}});var s=t(6768),d=t(144),i=t.p+"img/Figure_06.54594ae6.png";const c={class:"container my-4"},o={class:"text-center my-4"},n=["src"];var l={__name:"chapter03_30",setup(e){return(e,a)=>((0,s.uX)(),(0,s.CE)("div",c,[a[2]||(a[2]=(0,s.Fv)('<h3 class="mb-4" data-v-eb6c71e2>3.3 Connectionless Transport: UDP</h3><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> In this section, we’ll take a close look at UDP, how it works, and what it does. We encourage you to refer back to Section 2.1, which includes an overview of the UDP service model, and to Section 2.7.1, which discusses socket programming using UDP. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> このセクションでは、UDPがどのように動作し、何を行うのかを詳しく見ていきます。2.1節にはUDPのサービスモデルの概要が、2.7.1節にはUDPを使ったソケットプログラミングについての解説がありますので、併せて参照することをお勧めします。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> To motivate our discussion about UDP, suppose you were interested in designing a no-frills, bare-bones transport protocol. How might you go about doing this? You might first consider using a vacuous transport protocol. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> UDPについての議論を進めるために、まずは機能を最小限に絞ったシンプルなトランスポートプロトコルを設計することを考えてみましょう。どのように設計を始めるでしょうか？まずは、中身のない空のトランスポートプロトコルを検討するかもしれません。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> In particular, on the sending side, you might consider taking the messages from the application process and passing them directly to the network layer; and on the receiving side, you might consider taking the messages arriving from the network layer and passing them directly to the application process. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> たとえば、送信側ではアプリケーションプロセスから受け取ったメッセージをそのままネットワーク層へ渡し、受信側ではネットワーク層から到着したメッセージを直接アプリケーションプロセスへ渡すことを考えるかもしれません。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> But as we learned in the previous section, we have to do a little more than nothing! At the very least, the transport layer has to provide a multiplexing/demultiplexing service in order to pass data between the network layer and the correct application-level process. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> しかし、前のセクションで学んだように、「何もしない」では不十分です。少なくとも、トランスポート層はネットワーク層と正しいアプリケーションプロセス間でデータをやり取りするためのマルチプレクシング／デマルチプレクシング機能を提供しなければなりません。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> UDP, defined in [RFC 768], does just about as little as a transport protocol can do. Aside from the multiplexing/demultiplexing function and some light error checking, it adds nothing to IP. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> [RFC 768] で定義されているUDPは、トランスポートプロトコルとして可能な限り最小限の機能しか提供していません。マルチプレクシング／デマルチプレクシング機能と軽度なエラーチェック以外、IPに何も追加していないのです。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> In fact, if the application developer chooses UDP instead of TCP, then the application is almost directly talking with IP. UDP takes messages from the application process, attaches source and destination port number fields for the multiplexing/ demultiplexing service, adds two other small fields, and passes the resulting segment to the network layer. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> 実際、アプリケーション開発者がTCPではなくUDPを選んだ場合、アプリケーションはほぼ直接IPと通信していることになります。UDPはアプリケーションプロセスからメッセージを受け取り、マルチプレクシング／デマルチプレクシングのための送信元および宛先ポート番号を追加し、さらに2つの小さなフィールドを加えて、セグメントとしてネットワーク層に渡します。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> The network layer encapsulates the transport-layer segment into an IP datagram and then makes a best-effort attempt to deliver the segment to the receiving host. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> ネットワーク層はこのトランスポート層セグメントをIPデータグラムとしてカプセル化し、受信ホストへの配送をベストエフォートで試みます。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> If the segment arrives at the receiving host, UDP uses the destination port number to deliver the segment’s data to the correct application process. Note that with UDP there is no handshaking between sending and receiving transport-layer entities before sending a segment. For this reason, UDP is said to be connectionless. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> セグメントが受信ホストに届いた場合、UDPは宛先ポート番号を用いてセグメントのデータを適切なアプリケーションプロセスへ届けます。UDPではセグメントを送信する前に送信側と受信側の間でハンドシェイクを行わないため、UDPは「コネクションレス（接続不要）」と呼ばれています。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> DNS is an example of an application-layer protocol that typically uses UDP. When the DNS application in a host wants to make a query, it constructs a DNS query message and passes the message to UDP. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> DNSは、通常UDPを利用するアプリケーション層プロトコルの一例です。ホスト上のDNSアプリケーションが問い合わせを行いたいとき、それはDNSクエリメッセージを構築し、それをUDPに渡します。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> Without performing any handshaking with the UDP entity running on the destination end system, the host-side UDP adds header fields to the message and passes the resulting segment to the network layer. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> 宛先側のUDPエンティティとハンドシェイクを行うことなく、送信側のホストはUDPヘッダフィールドをそのメッセージに追加し、生成されたセグメントをネットワーク層へ渡します。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> The network layer encapsulates the UDP segment into a datagram and sends the datagram to a name server. The DNS application at the querying host then waits for a reply to its query. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> ネットワーク層はUDPセグメントをデータグラムにカプセル化し、それをネームサーバーに送信します。そして、DNSアプリケーションは応答を待ちます。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> If it doesn’t receive a reply (possibly because the underlying network lost the query or the reply), it might try resending the query, try sending the query to another name server, or inform the invoking application that it can’t get a reply. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> 応答が得られなかった場合（基盤ネットワークがクエリまたは応答を紛失した可能性があります）、再送信を試みたり、別のネームサーバーに送信したり、呼び出し元アプリケーションに応答が得られないことを通知したりします。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> Figure 3.6 lists popular Internet applications and the transport protocols that they use. As we expect, e-mail, remote terminal access, and file transfer run over TCP—all these applications need the reliable data transfer service of TCP. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> 図3.6は、代表的なインターネットアプリケーションと、それぞれが使用するトランスポートプロトコルを示しています。予想どおり、電子メール、リモートターミナルアクセス、ファイル転送はすべてTCPを使用しており、これらのアプリケーションはいずれもTCPの信頼性のあるデータ転送サービスを必要としています。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> We learned in Chapter 2 that early versions of HTTP ran over TCP but that more recent versions of HTTP run over UDP, providing their own error control and congestion control (among other services) at the application layer. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> 第2章で学んだように、初期のHTTPはTCP上で動作していましたが、最近のHTTPのバージョンではUDPを使用し、アプリケーション層で独自のエラー制御や輻輳制御（およびその他のサービス）を提供しています。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> Nevertheless, many important applications run over UDP rather than TCP. For example, UDP is used to carry network management (SNMP; see Section 5.7) data. UDP is preferred to TCP in this case, since network management applications must often run when the network is in a stressed state—precisely when reliable, congestion-controlled data transfer is difficult to achieve. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> それでも、重要なアプリケーションの多くはTCPではなくUDPを使用しています。たとえば、UDPはネットワーク管理（SNMP、5.7節参照）データの転送に使われています。ネットワーク管理アプリケーションは、ネットワークが過負荷状態にあるときでも動作する必要があるため、信頼性があり輻輳制御された通信が困難なこのような状況ではUDPの方が適しています。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> Also, as we mentioned earlier, DNS runs over UDP, thereby avoiding TCP’s connection-establishment delays. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> また、前述の通り、DNSはUDP上で動作しており、TCPの接続確立に伴う遅延を回避しています。 </p></div></div>',17)),(0,s.Lk)("div",o,[(0,s.Lk)("img",{src:(0,d.R1)(i),alt:"Figure 3.6 - Internet applications and transport protocols",class:"img-fluid rounded border"},null,8,n),a[0]||(a[0]=(0,s.Lk)("p",{class:"text-muted mt-2 mb-0"}," Figure 3.6 — Popular Internet applications and their underlying transport protocols ",-1)),a[1]||(a[1]=(0,s.Lk)("p",{class:"text-muted"}," 図3.6 — 代表的なインターネットアプリケーションとその基盤となるトランスポートプロトコル ",-1))]),a[3]||(a[3]=(0,s.Fv)('<div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> As shown in Figure 3.6, both UDP and TCP are sometimes used today with multimedia applications, such as Internet phone, real-time video conferencing, and streaming of stored audio and video. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> 図3.6に示されているように、インターネット電話、リアルタイムビデオ会議、保存された音声・動画のストリーミングといったマルチメディアアプリケーションでは、UDPとTCPの両方が使われることがあります。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> All of these applications can tolerate a small amount of packet loss, so that reliable data transfer is not absolutely critical for the application’s success. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> これらのアプリケーションはいずれも、ある程度のパケット損失を許容できるため、信頼性のあるデータ転送がアプリケーションの成功に必須とは限りません。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> Furthermore, real-time applications, like Internet phone and video conferencing, react very poorly to TCP’s congestion control. For these reasons, developers of multimedia applications may choose to run their applications over UDP instead of TCP. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> さらに、インターネット電話やビデオ会議のようなリアルタイムアプリケーションは、TCPの輻輳制御に非常に弱いため、これらの理由からマルチメディアアプリケーションの開発者はTCPではなくUDPを使用することを選択する場合があります。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> When packet loss rates are low, and with some organizations blocking UDP traffic for security reasons (see Chapter 8), TCP becomes an increasingly attractive protocol for streaming media transport. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> パケット損失率が低く、また一部の組織がセキュリティ上の理由でUDPトラフィックをブロックしている場合（第8章参照）、ストリーミングメディアの転送においてTCPの魅力が増すことになります。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> Although commonly done today, running multimedia applications over UDP needs to be done with care. As we mentioned above, UDP has no congestion control. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> 今日では一般的になっていますが、UDP上でマルチメディアアプリケーションを動作させる場合には注意が必要です。前述の通り、UDPには輻輳制御がありません。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> But congestion control is needed to prevent the network from entering a congested state in which very little useful work is done. If everyone were to start streaming high-bit-rate video without using any congestion control, there would be so much packet overflow at routers that very few UDP packets would successfully traverse the source-to-destination path. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> しかし、ネットワークが過度な輻輳状態に陥るのを防ぐためには輻輳制御が不可欠です。もし誰もが輻輳制御なしに高ビットレートのビデオをストリーミングし始めた場合、ルーターでパケットがあふれ、送信元から宛先へのUDPパケットの多くが届かなくなるでしょう。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> Moreover, the high loss rates induced by the uncontrolled UDP senders would cause the TCP senders (which, as we’ll see, do decrease their sending rates in the face of congestion) to dramatically decrease their rates. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> さらに、制御されていないUDP送信者による高い損失率は、TCP送信者（輻輳に直面すると送信レートを下げることが後述されます）に対してもレートの大幅な低下を引き起こします。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> Thus, the lack of congestion control in UDP can result in high loss rates between a UDP sender and receiver, and the crowding out of TCP sessions. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> このように、UDPに輻輳制御が存在しないことは、UDPの送信者と受信者間での高い損失率や、TCPセッションの締め出し（クラウドアウト）を引き起こす可能性があります。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> Many researchers have proposed new mechanisms to force all sources, including UDP sources, to perform adaptive congestion control. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> 多くの研究者が、UDPを含むすべての送信元に適応的な輻輳制御を強制する新しい仕組みを提案しています。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> Before discussing the UDP segment structure, we mention that it is possible for an application to have reliable data transfer when using UDP. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> UDPセグメント構造を説明する前に、UDPを使用していてもアプリケーションで信頼性のあるデータ転送を実現することが可能であることを述べておきます。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> This can be done if reliability is built into the application itself (for example, by adding acknowledgment and retransmission mechanisms, such as those we’ll study in the next section). </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> これは、アプリケーション自体に信頼性を持たせることで可能です。例えば、確認応答（ACK）や再送機構などを組み込むことで、次のセクションで学ぶような仕組みが実現されます。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> We mentioned earlier that the QUIC protocol implements reliability in an application-layer protocol on top of UDP. But this is a nontrivial task that would keep an application developer busy debugging for a long time. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> 先に述べたQUICプロトコルは、UDP上のアプリケーション層プロトコルとして信頼性を実現していますが、これは決して簡単な作業ではなく、アプリケーション開発者は長い時間デバッグに費やすことになります。 </p></div></div><div class="row mb-3" data-v-eb6c71e2><div class="col-md-6" data-v-eb6c71e2><p data-v-eb6c71e2> Nevertheless, building reliability directly into the application allows the application to “have its cake and eat it too.” That is, application processes can communicate reliably without being subjected to the transmission-rate constraints imposed by TCP’s congestion-control mechanism. </p></div><div class="col-md-6" data-v-eb6c71e2><p class="text-muted" data-v-eb6c71e2> それでも、信頼性をアプリケーション内に実装することで、“おいしいところ取り”が可能になります。つまり、TCPの輻輳制御による送信レートの制約を受けずに、信頼性のある通信を実現できるのです。 </p></div></div>',13))]))}},r=t(1241);const v=(0,r.A)(l,[["__scopeId","data-v-eb6c71e2"]]);var p=v}}]);
//# sourceMappingURL=5804.b273086a.js.map