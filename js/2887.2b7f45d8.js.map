{"version":3,"file":"js/2887.2b7f45d8.js","mappings":"gRACEA,EAAAA,EAAAA,IAsDM,MAtDNC,EAsDMC,EAAA,KAAAA,EAAA,K,i1DCjDR,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_31.vue","webpack://study-site/./src/views/lecture/lecture03/chapter15/chapter15_31.vue?877f"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">3(a) Dijkstra – Start und Initialisierung</h3>\r\n\r\n    <!-- 問題文（Deutsch + 日本語） -->\r\n    <div class=\"border rounded p-3 bg-light mb-4\">\r\n      <p><strong>Aufgabe:</strong><br />\r\n        Wie startet der Algorithmus und wie wird das Basiskantengewicht berechnet?\r\n        <br />\r\n        (Hinweis: Der Begriff „Basiskantengewicht“ war vermutlich nicht korrekt formuliert.)\r\n      </p>\r\n      <hr />\r\n      <p><strong>問題:</strong><br />\r\n        Dijkstraアルゴリズムはどのように開始され、初期の重み（基準エッジの重み？）はどのように決定されるか？\r\n        <br />\r\n        （※「Basiskantengewicht」は誤った表現だった可能性あり）\r\n      </p>\r\n    </div>\r\n\r\n    <!-- 解答：ドイツ語 & 日本語 横並び -->\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6\">\r\n        <h5>Antwort (Deutsch)</h5>\r\n        <p>\r\n          Der Dijkstra-Algorithmus startet bei einem gegebenen Startknoten (z.B. A) und setzt dessen Distanz auf 0.\r\n          Alle anderen Knoten erhalten zunächst den Wert ∞ (unendlich) als vorläufige Distanz.\r\n        </p>\r\n        <p>\r\n          Dann prüft man alle direkten Nachbarn des Startknotens. Die Kosten (Kanten­gewichte) zu diesen Nachbarn werden\r\n          als vorläufige Distanzen gesetzt. Diese werden aus den in der Tabelle gegebenen Werten übernommen – es ist\r\n          keine „Berechnung“ im Sinne von Formeln notwendig.\r\n        </p>\r\n        <p>\r\n          Anschließend wird iterativ immer der Knoten mit der aktuell kleinsten bekannten Distanz gewählt\r\n          und seine Nachbarn aktualisiert („Relaxierung“).\r\n        </p>\r\n      </div>\r\n\r\n      <div class=\"col-md-6\">\r\n        <h5>解答（日本語）</h5>\r\n        <p>\r\n          Dijkstra アルゴリズムは、出発点となるノード（例：A）から開始され、そのノードの距離を 0 に設定します。\r\n          他のすべてのノードの初期距離は ∞（無限大）に設定されます。\r\n        </p>\r\n        <p>\r\n          次に、開始ノードに隣接するノードすべてを確認し、直接接続されているリンクのコストを\r\n          それぞれの距離として初期設定します。これが「初期エッジ重み」の意味であり、\r\n          単に与えられたコストを反映するだけで特別な計算は不要です。\r\n        </p>\r\n        <p>\r\n          その後は、未確定ノードの中から最小距離のノードを選び、その隣接ノードの距離を更新する\r\n          （リラクゼーション）という処理を繰り返します。\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// No logic required\r\n</script>\r\n\r\n<style scoped>\r\n.border {\r\n  border: 1px solid #ccc;\r\n}\r\n.bg-light {\r\n  background-color: #f8f9fa;\r\n}\r\n</style>\r\n","import script from \"./chapter15_31.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./chapter15_31.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./chapter15_31.vue?vue&type=style&index=0&id=addaffe4&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-addaffe4\"]])\n\nexport default __exports__"],"names":["_createElementBlock","_hoisted_1","_cache","__exports__"],"sourceRoot":""}