{"version":3,"file":"js/9254.a99a3c7e.js","mappings":"gRACEA,EAAAA,EAAAA,IAmRM,MAnRNC,EAmRMC,EAAA,KAAAA,EAAA,K,6pVC9QR,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://study-site/./src/views/lecture/lecture04/chapter03/chapter03_12.vue","webpack://study-site/./src/views/lecture/lecture04/chapter03/chapter03_12.vue?c0fd"],"sourcesContent":["<template>\r\n  <div class=\"container my-4\">\r\n    <h3 class=\"mb-4\">3.1.2 Overview of the Transport Layer in the Internet</h3>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          Recall that the Internet makes two distinct transport-layer protocols available to the\r\n          application layer. One of these protocols is UDP (User Datagram Protocol), which\r\n          provides an unreliable, connectionless service to the invoking application. The second\r\n          of these protocols is TCP (Transmission Control Protocol), which provides a reliable,\r\n          connection-oriented service to the invoking application.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          インターネットはアプリケーション層に対して2つの異なるトランスポート層プロトコルを提供しています。1つはUDP（ユーザデータグラムプロトコル）で、信頼性のないコネクションレス型のサービスを提供します。もう1つはTCP（トランスミッションコントロールプロトコル）で、信頼性のあるコネクション指向型のサービスを提供します。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          When designing a network application, the application developer must specify one\r\n          of these two transport protocols. As we saw in Section 2.7, the application developer\r\n          selects between UDP and TCP when creating sockets.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          ネットワークアプリケーションを設計する際、アプリケーション開発者はこれら2つのトランスポートプロトコルのいずれかを指定する必要があります。2.7節で見たように、ソケットを作成するときにUDPかTCPのどちらかを選択します。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          To simplify terminology, we refer to the transport-layer packet as a segment. We\r\n          mention, however, that the Internet literature (for example, the RFCs) also refers to the\r\n          transport-layer packet for TCP as a segment but often refers to the packet for UDP as\r\n          a datagram. However, this same Internet literature also uses the term datagram for the\r\n          network-layer packet!\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          用語を簡略化するため、本書ではトランスポート層のパケットを「セグメント」と呼びます。ただし、インターネットの文献（たとえばRFC）では、TCPのパケットは「セグメント」と呼ばれますが、UDPのパケットは「データグラム」と呼ばれることが多いです。さらに混乱を招くことに、ネットワーク層のパケットも「データグラム」と呼ばれています！\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          For an introductory book on computer networking such as this, we believe that it is\r\n          less confusing to refer to both TCP and UDP packets as segments, and reserve the\r\n          term datagram for the network-layer packet.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          本書のようなコンピュータネットワーキングの入門書では、TCPとUDPのパケットをどちらも「セグメント」と呼び、ネットワーク層のパケットに対してのみ「データグラム」という用語を使った方が混乱が少ないと考えています。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          Before proceeding with our brief introduction of UDP and TCP, it will be useful\r\n          to say a few words about the Internet’s network layer. (We’ll learn about the network\r\n          layer in detail in Chapters 4 and 5.) The Internet’s network-layer protocol has a\r\n          name—IP, for Internet Protocol. IP provides logical communication between hosts.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          UDPとTCPの簡単な紹介に入る前に、インターネットのネットワーク層について少し触れておくと良いでしょう。（ネットワーク層については第4章と第5章で詳しく学びます。）インターネットのネットワーク層プロトコルには名前があり、それはIP（Internet Protocol）です。IPはホスト間の論理的通信を提供します。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          The IP service model is a best-effort delivery service. This means that IP makes\r\n          its “best effort” to deliver segments between communicating hosts, but it makes no\r\n          guarantees. In particular, it does not guarantee segment delivery, it does not guarantee\r\n          orderly delivery of segments, and it does not guarantee the integrity of the data\r\n          in the segments. For these reasons, IP is said to be an unreliable service.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          IPのサービスモデルはベストエフォート型の配送サービスです。つまり、IPは通信するホスト間でセグメントを配送しようと「最善を尽くす」ものの、何も保証はしません。特に、セグメントの配達保証、順序保証、データの完全性保証は一切ありません。これらの理由により、IPは「信頼性のないサービス」とされています。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          We also mention here that every host has at least one network-layer address, a so-called IP\r\n          address. We’ll examine IP addressing in detail in Chapter 4; for this chapter we need\r\n          only keep in mind that each host has an IP address.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          ここで、すべてのホストは少なくとも1つのネットワーク層アドレス、すなわち「IPアドレス」を持っていることも付け加えておきます。IPアドレスの詳細については第4章で学びますが、この章では「各ホストがIPアドレスを持っている」ことを覚えておけば十分です。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          Having taken a glimpse at the IP service model, let’s now summarize the service\r\n          models provided by UDP and TCP. The most fundamental responsibility of UDP\r\n          and TCP is to extend IP’s delivery service between two end systems to a delivery\r\n          service between two processes running on the end systems.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          IPのサービスモデルを簡単に見たところで、今度はUDPとTCPが提供するサービスモデルをまとめてみましょう。UDPとTCPの最も基本的な責任は、IPのホスト間配送サービスを、エンドシステム上で動作するプロセス間の配送サービスへと拡張することです。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          Extending host-to-host delivery to process-to-process delivery is called\r\n          transport-layer multiplexing and demultiplexing. We’ll discuss transport-layer\r\n          multiplexing and demultiplexing in the next section.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          ホスト間配送をプロセス間配送に拡張することを、トランスポート層の「マルチプレクシング（multiplexing）」および「デマルチプレクシング（demultiplexing）」と呼びます。これについては次のセクションで詳しく扱います。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          UDP and TCP also provide integrity checking by including error-detection\r\n          fields in their segments’ headers. These two minimal transport-layer\r\n          services—process-to-process data delivery and error checking—are the only two\r\n          services that UDP provides! In particular, like IP, UDP is an unreliable service—\r\n          it does not guarantee that data sent by one process will arrive intact (or at all!) to the\r\n          destination process.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          UDPとTCPは、セグメントのヘッダーにエラーチェック用のフィールドを含めることで、整合性の確認も行います。UDPが提供するトランスポート層のサービスは、プロセス間のデータ配送とエラーチェックというこの2つだけです！ 特に、IPと同様に、UDPは信頼性のないサービスです。つまり、あるプロセスから送られたデータが、完全な形で（あるいはそもそも）受信プロセスに届くことを保証しません。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          TCP, on the other hand, offers several additional services to applications.\r\n          First and foremost, it provides reliable data transfer. Using flow control,\r\n          sequence numbers, acknowledgments, and timers (techniques we’ll explore\r\n          in detail in this chapter), TCP ensures that data is delivered from sending\r\n          process to receiving process, correctly and in order.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          一方、TCPはアプリケーションに対していくつかの追加的なサービスを提供します。まず何よりも、信頼性のあるデータ転送です。フロー制御、シーケンス番号、確認応答、タイマといった技術（これらは本章で詳しく学びます）を用いて、TCPはデータが送信プロセスから受信プロセスへ正確かつ順序通りに届けられることを保証します。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          TCP thus converts IP’s unreliable service between end systems into a\r\n          reliable data transport service between processes. TCP also provides\r\n          congestion control. Congestion control is not so much a service provided to\r\n          the invoking application as it is a service for the Internet as a whole, a service\r\n          for the general good.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          このように、TCPはIPの信頼性のないエンドシステム間のサービスを、プロセス間の信頼性のあるデータ転送サービスに変換します。また、TCPは輻輳制御も提供します。輻輳制御は、アプリケーションに対して提供されるというよりも、インターネット全体のためのサービスであり、公共的な利益のための機能です。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          Loosely speaking, TCP congestion control prevents any one TCP connection\r\n          from swamping the links and routers between communicating hosts with\r\n          an excessive amount of traffic. TCP strives to give each connection traversing a\r\n          congested link an equal share of the link bandwidth. This is done by regulating the\r\n          rate at which the sending sides of TCP connections can send traffic into the network.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          おおまかに言えば、TCPの輻輳制御は、1つのTCP接続が通信中のホスト間のリンクやルーターに過剰なトラフィックを送りつけて圧迫するのを防ぎます。TCPは、輻輳しているリンクを通る各接続に対して帯域幅を公平に分配しようとします。これは、TCP接続の送信側がネットワークにトラフィックを送出する速度を調整することで実現されます。\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-3\">\r\n      <div class=\"col-md-6\">\r\n        <p>\r\n          UDP traffic, on the other hand, is unregulated. An application using UDP transport\r\n          can send at any rate it pleases, for as long as it pleases.\r\n        </p>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <p class=\"text-muted\">\r\n          一方、UDPのトラフィックは制御されません。UDPトランスポートを使用するアプリケーションは、好きな速度で、好きなだけ長くデータを送信することができます。\r\n        </p>\r\n      </div>\r\n    </div>\r\n<div class=\"row mb-3\">\r\n  <div class=\"col-md-6\">\r\n    <p>\r\n      A protocol that provides reliable data transfer and congestion control is necessarily\r\n      complex. We’ll need several sections to cover the principles of reliable data\r\n      transfer and congestion control, and additional sections to cover the TCP protocol\r\n      itself.\r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <p class=\"text-muted\">\r\n      信頼性のあるデータ転送と輻輳制御を提供するプロトコルは、必然的に複雑になります。信頼性のあるデータ転送と輻輳制御の原理を説明するために複数のセクションが必要であり、さらにTCPプロトコル自体を扱うためのセクションも必要になります。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"row mb-3\">\r\n  <div class=\"col-md-6\">\r\n    <p>\r\n      These topics are investigated in Sections 3.4 through 3.7. The approach taken\r\n      in this chapter is to alternate between basic principles and the TCP protocol.\r\n      For example, we’ll first discuss reliable data transfer in a general setting and\r\n      then discuss how TCP specifically provides reliable data transfer.\r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <p class=\"text-muted\">\r\n      これらのトピックはセクション3.4から3.7で扱います。本章のアプローチは、基本原理とTCPプロトコルの説明を交互に行うというものです。たとえば、まず信頼性のあるデータ転送の一般的な考え方を説明し、その後TCPがそれをどのように実現しているかを解説します。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"row mb-3\">\r\n  <div class=\"col-md-6\">\r\n    <p>\r\n      Similarly, we’ll first discuss congestion control in a general setting and then\r\n      discuss how TCP performs congestion control. But before getting into all this\r\n      good stuff, let’s first look at transport-layer multiplexing and demultiplexing.\r\n    </p>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <p class=\"text-muted\">\r\n      同様に、輻輳制御についてもまず一般的な観点から説明し、その後にTCPがそれをどのように実現しているかを解説します。ただし、それらの詳細に入る前に、まずはトランスポート層のマルチプレクシングとデマルチプレクシングについて見ていきましょう。\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// No images in this section\r\n</script>\r\n\r\n<style scoped>\r\n.text-muted {\r\n  color: #6c757d;\r\n}\r\n</style>\r\n","import script from \"./chapter03_12.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./chapter03_12.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./chapter03_12.vue?vue&type=style&index=0&id=7bac8281&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7bac8281\"]])\n\nexport default __exports__"],"names":["_createElementBlock","_hoisted_1","_cache","__exports__"],"sourceRoot":""}