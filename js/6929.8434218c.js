"use strict";(self["webpackChunkstudy_site"]=self["webpackChunkstudy_site"]||[]).push([[6929],{495:function(e,n,i){i.d(n,{A:function(){return S}});var t=i(6768),r=i(4232),a=i(144);const s={class:"card mb-4 shadow-sm"},d={class:"card-body"},l={class:"card-title"},u={class:"text-muted fst-italic"},o={key:0},h=["src"],g={key:1,class:"mt-3"},m={class:"alert alert-success"},c={key:0},b={key:1},B={class:"alert alert-info mt-2"},w={key:0},k={key:1},C={class:"mt-3"},f={key:0},z={key:1},T={key:2},p={key:3},P={key:4},v=["src"],R={class:"mt-4"},D={class:"border rounded p-3 bg-white text-secondary",style:{"white-space":"pre-wrap","font-family":"inherit"}};var W={__name:"QuestionItem",props:{question:Object},setup(e){const n=(0,a.KR)(!1);return(i,a)=>((0,t.uX)(),(0,t.CE)("div",s,[(0,t.Lk)("div",d,[(0,t.Lk)("h5",l,"Q"+(0,r.v_)(e.question.id)+": "+(0,r.v_)(e.question.questionJa),1),(0,t.Lk)("p",u,"("+(0,r.v_)(e.question.questionDe)+")",1),e.question.questionImage?((0,t.uX)(),(0,t.CE)("div",o,[(0,t.Lk)("img",{src:`./images/${e.question.questionImage}`,class:"img-fluid rounded my-2 border",alt:"question image"},null,8,h)])):(0,t.Q3)("",!0),(0,t.Lk)("button",{class:"btn btn-outline-primary mt-2",onClick:a[0]||(a[0]=e=>n.value=!n.value)},(0,r.v_)(n.value?"Hide Answer":"Check Answer"),1),n.value?((0,t.uX)(),(0,t.CE)("div",g,[(0,t.Lk)("div",m,[a[1]||(a[1]=(0,t.Lk)("strong",null,"Antwort (De):",-1)),a[2]||(a[2]=(0,t.Lk)("br",null,null,-1)),Array.isArray(e.question.answerDe)?((0,t.uX)(),(0,t.CE)("ul",c,[((0,t.uX)(!0),(0,t.CE)(t.FK,null,(0,t.pI)(e.question.answerDe,(e,n)=>((0,t.uX)(),(0,t.CE)("li",{key:n},(0,r.v_)(e),1))),128))])):((0,t.uX)(),(0,t.CE)("p",b,(0,r.v_)(e.question.answerDe),1))]),(0,t.Lk)("div",B,[a[3]||(a[3]=(0,t.Lk)("strong",null,"Übersetzung (Ja):",-1)),a[4]||(a[4]=(0,t.Lk)("br",null,null,-1)),Array.isArray(e.question.answerJa)?((0,t.uX)(),(0,t.CE)("ul",w,[((0,t.uX)(!0),(0,t.CE)(t.FK,null,(0,t.pI)(e.question.answerJa,(e,n)=>((0,t.uX)(),(0,t.CE)("li",{key:n},(0,r.v_)(e),1))),128))])):((0,t.uX)(),(0,t.CE)("p",k,(0,r.v_)(e.question.answerJa),1))]),(0,t.Lk)("div",C,[a[6]||(a[6]=(0,t.Lk)("p",{class:"fw-bold mb-1"},"Erklärung (De):",-1)),Array.isArray(e.question.explanationDe)?((0,t.uX)(),(0,t.CE)("div",f,[((0,t.uX)(!0),(0,t.CE)(t.FK,null,(0,t.pI)(e.question.explanationDe,(e,n)=>((0,t.uX)(),(0,t.CE)("p",{key:n},(0,r.v_)(e),1))),128))])):((0,t.uX)(),(0,t.CE)("p",z,(0,r.v_)(e.question.explanationDe),1)),a[7]||(a[7]=(0,t.Lk)("p",{class:"fw-bold mb-1"},"解説 (Ja):",-1)),Array.isArray(e.question.explanationJa)?((0,t.uX)(),(0,t.CE)("div",T,[((0,t.uX)(!0),(0,t.CE)(t.FK,null,(0,t.pI)(e.question.explanationJa,(e,n)=>((0,t.uX)(),(0,t.CE)("p",{key:n},(0,r.v_)(e),1))),128))])):((0,t.uX)(),(0,t.CE)("p",p,(0,r.v_)(e.question.explanationJa),1)),e.question.explanationImage?((0,t.uX)(),(0,t.CE)("div",P,[(0,t.Lk)("img",{src:`./images/${e.question.explanationImage}`,class:"img-fluid rounded my-2 border",alt:"explanation image"},null,8,v)])):(0,t.Q3)("",!0),(0,t.Lk)("div",R,[a[5]||(a[5]=(0,t.Lk)("p",{class:"fw-bold mb-1"},"原文（スライド抜粋）:",-1)),(0,t.Lk)("div",D,(0,r.v_)(e.question.originalSlideText),1)])])])):(0,t.Q3)("",!0)])]))}};const I=W;var S=I},6929:function(e,n,i){i.r(n),i.d(n,{default:function(){return w}});i(8111),i(116);var t=i(6768),r=i(4232),a=i(144),s=i(1387),d=i(495),l=i(3529),u=JSON.parse('[{"id":1,"questionDe":"(s3) Was sind die Ziele der Vorlesung zu TCP für Hochgeschwindigkeitsnetze?","questionJa":"この講義『TCP für Hochgeschwindigkeitsnetze（高速ネットワークのためのTCP）』の目的は何ですか？","answerDe":["Grundlegendes Verständnis der Überlastkontrollmechanismen, die heute im Internet eingesetzt werden.","Interesse an weiterführenden Lehrveranstaltungen des Lehrstuhls wecken."],"answerJa":["現在インターネットで使用されている過負荷制御メカニズムについての基本的な理解を深めること。","講座を提供する研究室が今後開講する関連講義への関心を高めること。"],"explanationDe":["Ein zentrales Ziel dieser Vorlesung ist es, den Studierenden ein solides Verständnis der Mechanismen zu vermitteln, die im Internet zur Kontrolle von Überlastsituationen eingesetzt werden. Solche Mechanismen sind entscheidend, um eine stabile und faire Datenübertragung über das Internet zu ermöglichen.","Beispiele für solche Mechanismen sind etwa TCP Congestion Control mit Verfahren wie CUBIC oder BBR. Diese regeln, wie schnell Daten gesendet werden dürfen, damit das Netzwerk nicht überlastet wird.","Ein weiteres Ziel besteht darin, die Studierenden für weiterführende Kurse im Bereich Rechnernetze und Internetanwendungen zu motivieren. Diese vertiefenden Veranstaltungen bieten die Möglichkeit, sich mit aktuellen Forschungsfragen und modernen Protokollvarianten zu befassen.","Durch die Verbindung von theoretischem Wissen und praktischen Beispielen sollen die Studierenden besser auf die Anforderungen in Forschung und Industrie vorbereitet werden.","Die Vorlesung zielt nicht nur auf das Verstehen bestehender Lösungen ab, sondern auch darauf, ein kritisches Denken für zukünftige Entwicklungen im Bereich TCP und Netzwerkmanagement zu fördern.","Im Vergleich zu einfacheren Protokollen, wie z. B. UDP (das keine Überlastkontrolle durchführt), zeigen TCP-basierte Verfahren, wie wichtig adaptive Regelungen für eine zuverlässige Kommunikation sind.","Zusätzlich ist das Verständnis dieser Mechanismen eine Voraussetzung für die Bewertung moderner Netzwerkentwicklungen wie QUIC oder HTTP/3, die teilweise neue Ansätze verfolgen."],"explanationJa":["この講義の中心的な目的は、インターネットにおける過負荷（コンジェスション）制御のメカニズムについての基本的な理解を学生に提供することです。これらの制御は、インターネット上で安定かつ公平にデータを送受信するために非常に重要です。","たとえば、TCPの過負荷制御アルゴリズム（CUBICやBBRなど）は、ネットワークが混雑しないようにデータの送信速度を調整します。","もう一つの目的は、この分野に興味を持った学生が、研究室で提供される応用的・発展的な講義（例：Rechnernetze oder Internetanwendungen）に進んでもらうことです。","この講義では理論と実例を組み合わせて学び、将来的に研究や実務の場で必要となるスキルを育成します。","さらに、現行の技術だけでなく将来的な技術動向に対する批判的な視点や理解力を養うことも意図されています。","UDPのような単純なプロトコル（過負荷制御なし）と比較することで、TCPがなぜ重要なのかが明確になります。","また、近年登場したQUICやHTTP/3といった新しいプロトコルの背景理解にもこの知識が不可欠です。"],"originalSlideText":"Ziele:\\n- grundlegendes Verständnis der Überlastkontrollmechanismen, die heute im Internet eingesetzt werden\\n- Interesse an den weiterführenden Lehrveranstaltungen des Lehrstuhls wecken","explanationImage":"","questionImage":""},{"id":2,"questionDe":"(s5) Was versteht man unter Überlast in einem Netzwerk und welche typischen Ausprägungen treten auf?","questionJa":"ネットワークにおける『Überlast（過負荷）』とは何を意味し、どのような典型的な形で現れますか？","answerDe":["Zu viele Quellen senden zu viele Daten zu schnell, um vom Netz transportiert zu werden.","Typische Ausprägungen: Paketverlust (z. B. durch Pufferüberläufe) und große Verzögerungen (durch lange Pufferungszeiten)."],"answerJa":["多くの送信元が、ネットワークが処理しきれないほど大量のデータを一度に送ること。","典型的な現象：パケットロス（ルータのバッファオーバーフローなど）、大きな遅延（長いキューイング時間など）。"],"explanationDe":["Überlast bezeichnet den Zustand, in dem ein Netzwerk mehr Datenverkehr aufnehmen soll, als es verarbeiten kann. Dies tritt auf, wenn zu viele Endgeräte gleichzeitig Daten senden oder wenn die Bandbreite einzelner Netzwerkkomponenten nicht ausreicht.","Ein typisches Symptom ist der Paketverlust. In Routern und Switches werden Datenpakete in Puffern zwischengespeichert. Sind diese Puffer voll, müssen neue Pakete verworfen werden.","Ein weiteres Merkmal ist eine erhöhte Verzögerung (Latenz), da Pakete in langen Warteschlangen auf ihre Weiterleitung warten müssen. Diese Verzögerungen beeinträchtigen insbesondere zeitkritische Anwendungen wie Video-Calls oder Online-Gaming.","Die Überlast führt dazu, dass das Netzwerk ineffizient wird und die Nutzererfahrung verschlechtert. Anwendungen müssen eventuell erneut versuchen, verlorene Daten zu übertragen, was den Datenverkehr weiter erhöht.","Der Begriff \'Überlast\' ist nicht exakt technisch definiert, sondern beschreibt ein Verhalten, das aus unzureichender Ressourcenverteilung resultiert.","Im Vergleich zu dedizierten Leitungsvermittlungen (wie ISDN) ist das Internet paketvermittelt und daher anfälliger für solche dynamischen Überlastzustände.","Moderne Protokolle wie TCP versuchen, Überlast durch Kontrolle der Senderate und Reaktion auf Paketverlust zu vermeiden oder zu mildern."],"explanationJa":["ネットワークの『過負荷（Überlast）』とは、ネットワークが受信・処理できる限度を超えるデータが送信される状態を指します。これは、多くの端末が同時に大量のデータを送信する場合や、ネットワーク機器の帯域幅が十分でない場合に起こります。","このような状態では、まず『パケットロス』が発生します。ルーターやスイッチのバッファが満杯になると、新しく到着したパケットは破棄されてしまいます。","また、『遅延（レイテンシ）』も大きくなります。パケットが長いキュー（待機列）で待たされ、伝送が遅れるためです。これはZoom会議やオンラインゲームのようなリアルタイム通信に悪影響を及ぼします。","過負荷の結果、ネットワーク全体の効率が下がり、利用者の体感速度も悪化します。アプリケーションは再送信を試みるため、さらなるトラフィックを生み出してしまうこともあります。","技術的に明確な定義ではありませんが、リソースの配分が追いつかず混雑する状態を指します。","専用線を使用するISDNのような回線交換型通信とは異なり、インターネットはパケット交換型であるため、こうした過負荷に特に影響を受けやすい仕組みです。","TCPのようなプロトコルは、送信レートを調整したり、パケットロスに反応したりして、ネットワークの混雑を和らげようとします。"],"originalSlideText":"Grundlagen der Überlastkontrolle\\n\\nÜberlast:\\n Umgangssprachlich: “Zu viele Quellen senden zu viele Daten zu schnell, um vom Netz transportiert zu werden”\\n Ausprägungen:\\n❖ Paketverlust (Pufferüberläufe an den Routern)\\n❖ Große Verzögerungen (Dauer der Pufferung)\\n Sehr wichtiges Problem!","explanationImage":"","questionImage":""},{"id":3,"questionDe":"(s6) Welche zwei grundlegenden Ansätze zur Überlastkontrolle gibt es im Internet und wie unterscheiden sie sich?","questionJa":"インターネットにおける過負荷制御にはどのような2つの基本的なアプローチがあり、それらはどのように異なりますか？","answerDe":["Ende-zu-Ende Überlastkontrolle: keine direkte Rückmeldung vom Netz, basiert auf beobachtbaren Parametern (z. B. Paketverlust, Verzögerungszeit).","Netzgestützte Überlastkontrolle: Router geben Rückmeldung durch gesetzte Bits oder explizite Ratenvorgaben."],"answerJa":["エンドツーエンド型の過負荷制御：ネットワークからの明示的な情報はなく、パケットロスや遅延など観測可能な情報に基づいて送信側が制御する。","ネットワーク主導型の過負荷制御：ルーターがビット設定や送信レートの指定などで明示的に過負荷を通知する。"],"explanationDe":["Die Überlastkontrolle im Internet lässt sich grundsätzlich in zwei Ansätze unterteilen: die Ende-zu-Ende- und die netzgestützte Überlastkontrolle.","Bei der Ende-zu-Ende-Kontrolle gibt es keine expliziten Signale vom Netzwerk. Stattdessen analysieren Sender und Empfänger selbstständig Parameter wie Paketverluste oder Verzögerungszeiten. Dieser Ansatz ist typisch für TCP.","Ein Beispiel: Wenn ein Sender erkennt, dass ACKs verspätet ankommen oder verloren gehen, geht er davon aus, dass das Netzwerk überlastet ist, und reduziert die Sendegeschwindigkeit.","Im Gegensatz dazu steht die netzgestützte Kontrolle. Hier liefern Netzwerkgeräte wie Router Rückmeldungen über den Zustand des Netzes, z. B. durch gesetzte Bits (wie ECN) oder durch Vorgabe einer Übertragungsrate.","Ein Beispiel ist das ECN-Verfahren (Explicit Congestion Notification), bei dem Router ein Bit im Paketheader setzen, anstatt Pakete zu verwerfen. So wird Überlast signalisiert, bevor es zu Datenverlust kommt.","Ein Vorteil der netzgestützten Methode ist die präzisere und frühere Rückmeldung, allerdings erfordert sie die Unterstützung durch alle Netzkomponenten.","In der Praxis sind viele Netze auf die Ende-zu-Ende-Kontrolle angewiesen, da nicht alle Geräte ECN oder ähnliche Mechanismen unterstützen."],"explanationJa":["インターネットにおける過負荷制御には大きく分けて2つのアプローチがあります：エンドツーエンド型とネットワーク主導型です。","エンドツーエンド型では、ネットワークから明示的な信号は送られません。代わりに、送信側や受信側が自分で遅延時間やパケットロスを観察し、過負荷を推測して送信レートを調整します。TCPの標準的な制御方法です。","たとえば、ACKが遅れて届いたり、パケットが欠落したりすることで、ネットワークが混雑していると判断して送信を遅らせます。","これに対してネットワーク主導型では、ルーターやスイッチなどがネットワーク状態を監視し、送信元に明示的なフィードバックを返します。たとえば、ECNではルーターが特定のビットを設定することで混雑を通知します。","このように、ネットワーク主導型の方が早く正確な混雑情報を送れますが、対応するすべての機器がこの仕組みに対応していなければなりません。","そのため、多くのインターネット環境では、依然としてエンドツーエンド型が広く使われています。","両者にはそれぞれ利点と制約があり、実際のネットワークでは用途に応じて使い分けられます。"],"originalSlideText":"Ansätze zur Überlastkontrolle\\n\\nEnde-zu-Ende Überlastkontrolle:\\n Keine direkte Rückmeldung vom Netz\\n Die momentane Auslastung wird aus den vom Sender und Empfänger beobachtbaren Parametern ermittelt: Paketverlust, Verzögerungszeit\\n Ansatz bei TCP\\n\\nZwei mögliche Herangehensweisen:\\n\\nNetzgestützte Überlastkontrolle:\\n Router liefern Rückmeldung an Sender und Empfänger:\\n❖ Bit zeigt Überlast an (SNA, DECbit, TCP/IP ECN, ATM)\\n❖ Bestimmung einer Rate, mit der Sender Pakete aussendet","explanationImage":"lecture03/lecture13_ex01.png","questionImage":""},{"id":4,"questionDe":"(s7) Was ist Explicit Congestion Notification (ECN) und wie funktioniert sie im TCP/IP-Protokoll?","questionJa":"Explicit Congestion Notification（ECN）とは何ですか？また、TCP/IPプロトコルではどのように機能しますか？","answerDe":["ECN ermöglicht Routern, Überlast anzuzeigen, ohne Pakete zu verwerfen.","Pakete werden mit speziellen Bits im Header markiert: ECT, CE, ECE.","Der Sender setzt das ECT-Bit in ECN-fähigen Paketen.","Router erkennen Überlast und setzen das CE-Bit.","Empfänger antwortet mit gesetztem ECE-Bit im TCP-ACK.","Sender erkennt dadurch Überlast und passt seine Sendeweise an."],"answerJa":["ECNはルーターが過負荷をパケット廃棄なしに通知できる仕組み。","パケットのヘッダ内のビット（ECT, CE, ECE）で過負荷を示す。","送信側はECN対応パケットにECTビットを設定する。","ルーターは過負荷を検知するとCEビットを設定する。","受信側はTCPのACKにECEビットをつけて送信側へ通知する。","送信側はこれを見て送信速度を調整する。"],"explanationDe":["ECN (Explicit Congestion Notification) ist ein Mechanismus zur Überlastkontrolle, bei dem Router Überlast anzeigen können, ohne Pakete zu verwerfen. Dies hilft, den Datenverlust zu minimieren und die Netzqualität zu verbessern.","Der Mechanismus funktioniert durch Setzen bestimmter Bits im IP- und TCP-Header. Zunächst kennzeichnet der Sender seine Pakete als ECN-fähig, indem er das ECT-Bit (ECN-Capable Transport) setzt.","Stellt ein Router eine Überlastsituation fest – z. B. aufgrund eines vollen Puffers – markiert er die betroffenen Pakete mit dem CE-Bit (Congestion Experienced), anstatt sie zu verwerfen.","Der Empfänger erkennt diese Markierung und signalisiert die Überlast durch Setzen des ECE-Bits im ACK an den Sender zurück.","Der Sender interpretiert dieses ECE-Bit als Warnung und passt seine Sendestrategie an, typischerweise durch Reduzierung der Sende-Rate.","Der Vorteil von ECN gegenüber klassischen, verlustbasierten Methoden ist, dass es frühzeitig auf Überlast reagiert, ohne auf Paketverluste angewiesen zu sein.","Im Vergleich zur rein verlustbasierten TCP-Steuerung (wie in klassischen TCP Reno oder NewReno) bietet ECN eine sanftere und effizientere Reaktion auf Netzwerküberlastungen."],"explanationJa":["ECN（Explicit Congestion Notification）は、ルーターがパケットを廃棄せずにネットワークの混雑状態（過負荷）を通知できる仕組みです。これにより、データ損失を防ぎつつネットワークの安定性を保てます。","送信側は、送信するIPパケットのヘッダーにあるECNビットの1つであるECT（ECN-Capable Transport）を設定し、「このパケットはECN対応です」と示します。","ルーターが過負荷を検知した場合、本来ならパケットを廃棄するところですが、その代わりにCE（Congestion Experienced）ビットをセットしてパケットを通します。","受信側はこのCEビットを見て「このパケットは混雑状態で届いた」と判断し、次に送るACK応答のTCPヘッダにECEビットを立てて送信側に伝えます。","送信側はACKに含まれるECEを見て、送信レートの調整など制御動作を行います。","従来のTCP Renoなどのように、パケットロスをもって過負荷を判断する方式よりも、ECNでは損失が起こる前に混雑への対応が可能です。","このため、ECNはより早く、スムーズに混雑状態へ対処でき、特にリアルタイム性の要求が高いアプリケーションに効果的です。"],"originalSlideText":"Explicit Congestion Notification\\n\\n Router können dem Sender Überlast signalisieren ohne Pakete zu verwerfen\\n Existierende Pakete werden mit gesetzten Bits im Header markiert\\n❖ ECN-Capable Transport (ECP)\\n❖ Congestion Experienced (CE)\\n❖ ECN-Echo (ECE)\\n\\n Sender setzt ECT-Bit in ECN-fähigen Paketen\\n Router/Switch der Überlast erkennt markiert Pakete mit CE-Bit, anstatt sie zu verwerfen\\n Empfänger meldet Überlast an Sender indem er ECE-Bit im TCP-Header des ACK setzt","explanationImage":"","questionImage":""},{"id":5,"questionDe":"(s8) Was ist Selective Acknowledgement (SACK) im TCP-Protokoll und welchen Vorteil bietet es gegenüber klassischen Bestätigungen?","questionJa":"TCPプロトコルにおけるSelective Acknowledgement（SACK）とは何ですか？また、従来のACKと比べてどのような利点がありますか？","answerDe":["SACK erlaubt dem Empfänger, selektiv korrekt empfangene Pakete zu bestätigen.","Der Sender muss nur verlorene Pakete erneut senden, nicht alle unbestätigten.","Informationen werden im Optionsfeld des TCP-Headers übertragen.","Beispiel: Paket 4 empfangen, Paket 6 erwartet → Nur Paket 5 wird erneut übertragen."],"answerJa":["SACKは、受信側が正しく受け取った特定のパケットだけを選んで通知できる方式。","送信側は、未確認のすべてのパケットを再送するのではなく、失われたパケットだけを再送できる。","この情報はTCPヘッダーのオプション領域に格納される。","例：パケット4は受信済み、パケット6を期待 → パケット5のみ再送。"],"explanationDe":["Selective Acknowledgement (SACK) ist eine Erweiterung des TCP-Protokolls, die es dem Empfänger erlaubt, genau anzugeben, welche Datenpakete erfolgreich empfangen wurden.","Im Gegensatz zur klassischen TCP-Bestätigung, bei der nur die Reihenfolge bis zum ersten fehlenden Paket bestätigt wird, kann SACK auch nicht zusammenhängende Pakete bestätigen.","Das bedeutet: Wenn z. B. die Pakete 1, 2, 3, 4 und 6 empfangen wurden, aber Paket 5 fehlt, zeigt SACK dem Sender, dass nur Paket 5 erneut gesendet werden muss.","Die selektiven Bestätigungen werden über das Optionsfeld im TCP-Header übermittelt. Dadurch bleibt das Standardverhalten erhalten, und SACK ist rückwärtskompatibel.","Der Vorteil liegt in der erhöhten Effizienz: Anstatt viele Pakete doppelt zu übertragen (wie bei älteren Methoden), wird gezielt nur das verlorene Paket erneut gesendet.","SACK ist besonders nützlich bei Verbindungen mit hoher Latenz oder hohem Paketverlust – z. B. in Mobilfunknetzen oder bei Satellitenkommunikation.","Moderne Betriebssysteme wie Linux, Windows oder macOS unterstützen SACK standardmäßig, da es die Netzlast reduziert und die Datenübertragung robuster macht."],"explanationJa":["Selective Acknowledgement（SACK）は、TCPの拡張機能であり、受信側がどのパケットを正しく受信したかを個別に通知できるようにするものです。","従来のTCPでは、最初に欠落したパケットの手前までしか受信確認（ACK）できませんでした。つまり、1〜4を受信して5が欠けている場合、6以降を受け取っていても、それは確認できませんでした。","SACKでは、たとえば1〜4と6を受信済みで5が欠けている場合、パケット6も含めて「これらは受信済み」と通知できます。その結果、送信側はパケット5のみを再送すればよくなります。","この情報はTCPヘッダーのオプションフィールドに格納されており、既存のTCP構造とも互換性があります。","利点は、ネットワークの帯域幅や遅延を無駄にせず、失われたパケットだけを効率よく再送できる点です。","特にモバイル通信や衛星通信のように、パケットロスが起こりやすい環境では有効です。","現在の主要なオペレーティングシステムではSACKは標準で有効化されており、TCP通信の安定性と効率性を高めるために重要な技術となっています。"],"originalSlideText":"Selective Acknowledgement\\n\\n Empfänger bestätigt selektiv korrekt empfangene Pakete\\n Sender kann nur verlorene Pakete erneut senden anstatt alle unbestätigten Pakete\\n SACK übermittelt  Informationen im Option Part des TCP-Headers\\n SACK 4-6\\n❖ Paket 4 erhalten\\n❖ Paket 6 erwartet\\n\\nViertes ACK 1!\\nNeuübertragung aller verlorenen Pakete.","explanationImage":"lecture03/lecture13_ex02.png","questionImage":""},{"id":6,"questionDe":"(s10) Warum sind neue Überlastkontrollmechanismen notwendig? Welche Veränderungen haben sich im Internet ergeben?","questionJa":"なぜ新しい過負荷制御メカニズムが必要とされているのですか？インターネットにはどのような変化があったのですか？","answerDe":["Netzwerkeigenschaften haben sich drastisch verändert seit Entwurf der Internetprotokolle.","Gründe: mehr Geräte, günstigere und leistungsfähigere Hardware, neue Forschungsergebnisse.","Internet heute: > 1 Milliarde Geräte, Bandbreite > 100 Mbit/s.","Internet 1990: ca. 300.000 Geräte, Bandbreite < 30 Kbit/s."],"answerJa":["インターネットプロトコルが設計された当時と比べて、ネットワーク特性が大きく変化した。","理由：接続機器の増加、安価で高性能なハードウェアの普及、新しい研究成果など。","現在のインターネット：10億台以上の機器、100Mbps超の帯域幅が一般的。","1990年のインターネット：30万台程度の機器、帯域幅は30Kbps未満。"],"explanationDe":["Die Motivation für neue Überlastkontrollmechanismen ergibt sich aus den massiven Änderungen in der Struktur und Nutzung des Internets seit den 1990er Jahren.","Früher war das Internet auf vergleichsweise wenige Nutzer mit sehr langsamen Verbindungen ausgelegt. Ein typischer Heimzugang lag bei 28.8 oder 56 Kbit/s.","Heutzutage ist das Internet weltweit mit Milliarden Geräten verbunden – von Smartphones bis zu IoT-Sensoren – und Bandbreiten im Bereich von 100 Mbit/s oder höher sind alltäglich.","Zudem hat sich die Hardware rasant weiterentwickelt: leistungsfähigere Prozessoren, schnellerer Speicher und kostengünstige Router ermöglichen eine dichtere Nutzung.","Auch die Anforderungen an Anwendungen haben sich verändert: Dienste wie Videostreaming, Cloud Computing oder Online-Gaming benötigen stabile, latenzarme Verbindungen.","Ältere TCP-Algorithmen wie Reno oder NewReno sind für diese Anforderungen nicht ausreichend skalierbar, insbesondere in Hochgeschwindigkeitsnetzen.","Daher werden moderne Algorithmen wie TCP CUBIC oder BBR entwickelt, die diese geänderten Bedingungen besser berücksichtigen und effizienter mit Netzwerkressourcen umgehen."],"explanationJa":["新しい過負荷制御メカニズムが必要とされる理由は、インターネットの構造や利用方法が1990年代以降大きく変化したためです。","当時のインターネットは、限られたユーザーと非常に低速な回線（例：28.8Kbpsのモデム）を前提として設計されていました。","しかし現代では、スマートフォンやIoT機器を含め、世界中で10億台以上のデバイスがインターネットに接続されています。また、100Mbps以上の高速回線が一般的です。","さらに、ルーターやプロセッサ、メモリなどのハードウェアも飛躍的に向上し、より多くの通信を処理可能になりました。","アプリケーション側の要求も変わっており、動画配信、オンラインゲーム、クラウドサービスなどでは高い帯域と低遅延が求められます。","従来のTCPアルゴリズム（Reno、NewRenoなど）はこうした条件に対応しきれず、特に高速回線では非効率な挙動を示します。","そのため、現代のネットワークに適応できるように設計されたTCP CUBICやTCP BBRのような新しいアルゴリズムの導入が必要とされています。"],"originalSlideText":"Motivation\\n\\n Netzwerkeigenschaften haben sich drastisch verändert seit die Internetprotokolle entworfen wurden\\n Gründe für die Veränderungen sind mehr Geräte, günstigere/leistungsfähiger Hardware und neue Forschungsergebnisse\\n\\n Internet heute\\n❖ > 1 Milliarde Geräte\\n❖ effektive Bandbreite > 100 Mbit/s\\n\\n Internet 1990\\n❖ Etwa 300.000 Geräte\\n❖ effektive Bandbreite < 30 Kbit/s","explanationImage":"","questionImage":""},{"id":7,"questionDe":"(s11) Warum ist die initiale Fenstergröße in Hochgeschwindigkeitsnetzen problematisch?","questionJa":"なぜ高速ネットワークでは初期のウィンドウサイズが問題になるのですか？","answerDe":["Im Slow Start beginnt das Congestion Window (cwnd) mit 1, 2 oder 10 MSS.","In Hochgeschwindigkeitsnetzen verbringt TCP mehr Zeit im Slow Start als in der Congestion Avoidance.","Bandbreite wird dadurch ineffizient genutzt.","Größere Initialwerte könnten bessere Ergebnisse liefern."],"answerJa":["Slow Startでは輻輳ウィンドウ（cwnd）は1、2または10 MSSから開始する。","高速ネットワークではTCP接続がSlow Startフェーズに長く滞在しやすい。","そのため、ネットワークの帯域が十分に活用されない。","初期ウィンドウサイズを大きく設定すれば、性能向上が期待できる。"],"explanationDe":["In TCP-Verbindungen wird die Datenübertragung zu Beginn durch das sogenannte Slow Start-Verfahren geregelt. Dabei startet das Congestion Window (cwnd) mit einem kleinen Wert, typischerweise 1 bis 10 MSS (Maximum Segment Size).","Das Fenster wächst exponentiell, solange kein Paketverlust auftritt. In traditionellen, langsamen Netzwerken war dies ausreichend, um das Netzwerk nicht zu überlasten.","In modernen Hochgeschwindigkeitsnetzen jedoch kann diese kleine Anfangsgröße zu einer erheblichen Unterauslastung führen. Der Durchsatz bleibt zu Beginn niedrig, obwohl viel Bandbreite verfügbar wäre.","Da das Wachstum von cwnd erst mit jeder Round-Trip-Time erfolgt, dauert es in realen Netzwerken (vor allem bei hoher Latenz) relativ lange, bis die verfügbare Bandbreite vollständig genutzt wird.","Das bedeutet konkret: Ein großer Teil der Verbindung vergeht mit geringer Übertragungsrate, obwohl technisch viel mehr möglich wäre.","Wenn man hingegen das Startfenster größer wählt – z. B. 10 statt 1 MSS – kann das Netzwerk viel schneller auf einen optimalen Auslastungsgrad gebracht werden.","Moderne Betriebssysteme wie Linux und Windows haben deshalb die initiale cwnd-Größe erhöht, um die Leistung in solchen Umgebungen zu verbessern."],"explanationJa":["TCP通信の開始時には、Slow Startと呼ばれる制御方式が使われ、輻輳ウィンドウ（cwnd）は1〜10 MSSという非常に小さな値からスタートします。","このウィンドウはパケットロスが発生しない限り指数関数的に増加します。これは、ネットワークを急に過負荷にしないための古典的な安全策です。","しかし、現代の高速ネットワークでは、この初期ウィンドウの小ささがボトルネックになります。利用可能な帯域があるにもかかわらず、データの送信速度が遅いため効率が悪いのです。","特に遅延が大きいネットワークでは、ウィンドウが成長するまでにかかる時間が長くなり、通信全体のパフォーマンスが落ちます。","その結果、TCP接続の前半は帯域を十分に活用できず、通信速度が制限されてしまいます。","対策として、初期ウィンドウサイズを大きく設定することで、最初からより多くのデータを送信でき、全体のスループット（転送効率）を改善できます。","近年のOS（LinuxやWindowsなど）では、こうした理由からデフォルトでcwndの初期値を引き上げている場合が多くあります。"],"originalSlideText":"Initiale Fenstergröße zu klein\\n\\n Recap SlowStart:\\n❖Congestion Window (cwnd) startet mit 1 (2 oder 10) MSS und wird exponentiell gesteigert, bis erster Verlust auftritt\\n\\n TCP-Verbindungen in  Hochgeschwindigkeitsnetzen verbringen mehr Zeit in der Slow Start Phase als in der Congestion Avoidance Phase\\n\\n Bandbreite wird nicht effektiv ausgenutzt\\n\\n Wählt man die initiale Fenstergröße anders, sind bessere Ergebnisse zu erwarten","explanationImage":"","questionImage":""},{"id":8,"questionDe":"(s12) Was versteht man unter Head-of-Line-Blocking und warum ist es problematisch?","questionJa":"Head-of-Line Blocking（先頭ブロッキング）とは何ですか？また、なぜ問題となるのですか？","answerDe":["Ein Paket in einer Warteschlange verhindert, dass nachfolgende Pakete weitergeleitet werden.","Tritt z. B. in Routern oder Switches auf.","Verursacht Verzögerungen für alle Pakete hinter dem blockierenden Paket."],"answerJa":["待機列（キュー）の先頭にあるパケットが処理されないことで、後続のパケットすべてが進めなくなる現象。","ルーターやスイッチなどのネットワーク機器で発生する。","後続パケットにも無駄な遅延を生じさせ、通信全体の効率が落ちる。"],"explanationDe":["Head-of-Line-Blocking (HOL-Blocking) bezeichnet eine Situation in Netzwerken, bei der ein einzelnes Paket am Anfang einer Warteschlange den Weitertransport aller folgenden Pakete verhindert.","Dies passiert typischerweise in Routern oder Switches, wenn das erste Paket nicht weitergeleitet werden kann, z. B. weil der Ausgangsport belegt ist oder eine Entscheidung über die Weiterleitung noch aussteht.","Die Folge ist, dass auch alle nachfolgenden Pakete – selbst wenn sie über einen anderen Port weitergeleitet werden könnten – aufgehalten werden.","Das führt zu unnötigen Verzögerungen und einer verringerten Ausnutzung der Bandbreite, da das System ineffizient arbeitet.","Ein klassisches Beispiel ist ein Switch mit gemeinsamer Eingangswarteschlange für mehrere Ausgänge: Wenn das erste Paket zu einem überlasteten Ziel will, blockiert es den ganzen Eingang.","HOL-Blocking tritt besonders in First-Come-First-Served-Systemen (FCFS) auf, in denen keine Priorisierung oder Parallelverarbeitung möglich ist.","Moderne Netzwerktechnologien versuchen dies zu vermeiden, z. B. durch Virtual Output Queuing oder parallele Queues pro Ausgang."],"explanationJa":["Head-of-Line Blocking（HOLブロッキング）とは、ネットワーク機器の待機列（キュー）において、先頭のパケットが何らかの理由で処理されないために、その後に並んでいるパケットすべてが進めなくなる現象です。","これはルーターやスイッチなどの機器でよく見られます。たとえば、先頭のパケットが混雑した出力ポートに向かっている場合、空きが出るまで後続のパケットも止まってしまいます。","その結果、後ろにある本来はすぐに転送可能なパケットまでもが待たされ、ネットワーク全体の遅延が発生します。","この現象は、先入れ先出し（First-Come-First-Served）型の処理に特に起こりやすく、帯域の利用効率を著しく下げます。","たとえば、入力ポートに1つしかキューがなく、複数の出力に対応しているスイッチでは、1つの出力が詰まっているだけで、すべてのパケットが止まってしまう可能性があります。","この問題を解消するため、最近では出力ごとにキューを分ける Virtual Output Queuing（仮想出力キューイング）などの手法が導入されています。","HOLブロッキングは、レイテンシに敏感なアプリケーション（例：音声通話、ゲームなど）において特に深刻な影響を与えるため、ネットワーク設計では回避が重要です。"],"originalSlideText":"Head of Line Blocking\\n\\n Ein Paket in einer Warteschlange hindert nachfolgende Pakete, weitergeleitet zu werden, z.B. in Routern oder Switches\\n\\nEingang AusgangSwitching-Fabric","explanationImage":"","questionImage":""},{"id":9,"questionDe":"(s13) Was versteht man unter dem Aufblähen des Puffers (Bufferbloat) und welche Probleme verursacht es?","questionJa":"Bufferbloat（バッファブロート）とは何ですか？また、それによってどのような問題が生じますか？","answerDe":["Günstige Hardware führt zu großen Pufferspeichern in Routern.","Bei Überlast werden zunächst die Puffer gefüllt, Paketverluste treten verzögert auf.","Pakete verbleiben lange in der Warteschlange → hohe Round Trip Times.","Besonders neue TCP-Flüsse über überlastete Verbindungen sind betroffen."],"answerJa":["安価なハードウェアにより、ルーターに大きなバッファが搭載されている。","ネットワークが過負荷になると、まずバッファが埋まり、パケットロスは遅れて発生する。","その結果、パケットが長時間キューに滞留し、RTT（往復時間）が大きくなる。","特に新しく始まったTCP通信が、既に混雑している経路に乗ると影響を受けやすい。"],"explanationDe":["Bufferbloat beschreibt das Problem, dass moderne Router oft sehr große Puffer besitzen – häufig aufgrund günstiger, leistungsfähiger Hardware.","Wenn es zu einer Überlast im Netzwerk kommt, werden nicht sofort Pakete verworfen, sondern zunächst die großen Puffer gefüllt.","Dadurch verbleiben Pakete lange Zeit in der Warteschlange, bevor sie weitergeleitet werden können, was zu einer hohen Latenz und einem Anstieg der Round Trip Time (RTT) führt.","Obwohl keine Pakete verloren gehen, verschlechtert sich die Nutzererfahrung, insbesondere bei Echtzeitanwendungen wie Videotelefonie, Online-Spielen oder Remote-Arbeit.","Das Problem ist besonders kritisch für neue TCP-Verbindungen, da diese über eine bereits überlastete Verbindung starten und sehr langsam starten können (z. B. durch langsamen Slow Start).","Im Gegensatz zu früheren Zeiten, in denen kleinere Puffer schneller zu Paketverlusten führten (und somit schnelleres Feedback zur Überlast gaben), verzögert ein großer Puffer die Rückmeldung.","Bufferbloat ist ein typisches Beispiel dafür, dass „mehr Speicher“ nicht immer besser ist – speziell in zeitkritischen Netzwerken kann das zu suboptimalem Verhalten führen."],"explanationJa":["Bufferbloat（バッファブロート）は、現代のルーターに搭載された大容量バッファが原因で発生するネットワーク遅延の問題です。これは、コストの安い高性能ハードウェアが普及したことに起因しています。","ネットワークが混雑した際、以前はすぐにパケットロスが発生して送信側にフィードバックされていましたが、大きなバッファがあるとパケットロスが遅れて発生します。","その間、パケットはバッファに溜まり続け、送信が遅れ、結果としてRTT（往復遅延時間）が大きくなります。","このような状況では、パケットロスは発生していないにもかかわらず、動画通話やオンラインゲーム、VPN接続などのリアルタイム通信に大きな遅延が発生し、ユーザー体験が大きく損なわれます。","特に、新しく開始されたTCP接続は、既に混雑しているネットワークに接続されると、Slow Startに時間がかかり、通信速度が非常に低くなります。","従来の小さなバッファでは、すぐにロスが発生して早期にフィードバックされるため、むしろ適切に制御が働いていました。","このように、バッファ容量を大きくすれば良いという考えは、リアルタイム性が求められる通信においては逆効果になることがあります。"],"originalSlideText":"Aufblähen des Puffers (1)\\n\\n Günstige Hardware sorgt für größere Pufferspeicher in Routern als zu den Anfängen des Internets\\n Bei beginnender Überlast wird zuerst der Pufferspeicher gefüllt und Paketverluste treten verzögert auf\\n Pakete verbringen daher viel Zeit in der Warteschlange (ie dem Pufferspeicher) bevor sie weitergeleitet werden → hohe Round Trip Times\\n Besonders betroffen sind neue TCP Flüsse, welche über eine bereits überlastete Ende-zu-Ende Verbindung senden","explanationImage":"","questionImage":""},{"id":10,"questionDe":"(s14) Wie wirkt sich ein kleiner Puffer mit einem Flaschenhals am Uplink auf eine TCP-Verbindung aus?","questionJa":"小さなバッファとアップリンクにボトルネックがある構成は、TCP接続にどのような影響を与えますか？","answerDe":["Letzter Platz in der Warteschlange wird erreicht.","Pakete werden verworfen, sobald der Puffer voll ist.","Sender reduziert die Senderate als Reaktion auf Paketverlust.","Puffergröße limitiert Anzahl der Pakete in der Warteschlange."],"answerJa":["待機列（バッファ）の最後の空きが埋まると、それ以上のパケットは破棄される。","パケットがドロップされると、送信側は送信速度を低下させる。","バッファのサイズがキュー内に存在できるパケット数を制限している。","アップリンクがボトルネックであるため、処理能力以上のパケットが滞留しやすい。"],"explanationDe":["In einer Netzwerkkonfiguration mit kleinem Puffer und einem Flaschenhals am Uplink (also der ausgehenden Verbindung vom Router zum nächsten Netzwerkknoten) wird die Warteschlange schnell gefüllt.","Da der Puffer begrenzt ist, kann nur eine bestimmte Anzahl an Paketen gespeichert werden. Sobald dieser Punkt erreicht ist, werden alle weiteren Pakete verworfen.","Diese Paketverluste werden vom TCP-Protokoll als Zeichen für Überlast interpretiert. Infolgedessen reduziert der Sender seine Sendeleistung (z. B. durch Halbierung des Congestion Window).","Im Gegensatz zu Bufferbloat bei großen Puffern kommt hier die Rückmeldung sehr schnell, was zu häufigen und teils unnötigen Drosselungen führen kann.","Ein kleiner Puffer verhindert zwar lange Warteschlangen, aber wenn er in Kombination mit einem langsamen Uplink auftritt, kann es leicht zu Datenverlust kommen.","In dieser Konfiguration ist es schwierig, die verfügbare Bandbreite vollständig auszunutzen, da selbst kurzfristige Lastspitzen zu Paketverlust führen.","Daher sind ausgewogene Puffergrößen und intelligente Queue-Management-Strategien (wie RED oder CoDel) erforderlich, um dieses Problem zu mildern."],"explanationJa":["小さなバッファとアップリンク側にボトルネック（狭い帯域）を持つネットワーク構成では、バッファがすぐにいっぱいになります。","バッファが満杯になると、それ以降に到着したパケットは破棄されます（パケットロス）。このようなロスは、TCPにとってはネットワークの過負荷を示す信号と見なされます。","その結果、送信側は輻輳制御（たとえばcwndの半減など）により送信速度を下げてしまい、通信のスループットが低下します。","このような小さなバッファ構成では、Bufferbloat（大きすぎるバッファ）による遅延は回避されますが、今度は過剰なパケットロスによる性能低下のリスクが増します。","特に、アップリンクの処理能力が低い場合、短時間のトラフィックの増加でもすぐにロスが発生してしまいます。","そのため、ネットワーク機器においてバッファサイズを適切に設定することと、REDやCoDelのようなスマートなキュー制御アルゴリズムを使うことが重要になります。","この構成の理解は、ネットワーク設計やトラブルシューティングにおいて非常に有用です。"],"originalSlideText":"Aufblähen des Puffers (2)\\n\\nLetzter Platz in Warteschlange\\n\\nPaket wird verworfen!\\n\\nSender verringert Senderate\\n\\n TCP-Verbindung mit kleinem Puffer und Flaschenhals am Uplink des Routers\\n Puffergröße begrenzt Anzahl an Paketen in der Warteschlange","explanationImage":"","questionImage":""},{"id":11,"questionDe":"(s15) Wie beeinflusst ein großer Puffer mit Flaschenhals am Uplink das Verhalten einer TCP-Verbindung?","questionJa":"大きなバッファとアップリンクにボトルネックがある構成は、TCP通信の挙動にどのような影響を与えますか？","answerDe":["Pakete verbleiben sehr lange in der Warteschlange.","Der große Puffer verursacht hohe Verzögerungen.","Der Sender reduziert die Sende­rate nicht sofort nach Beginn der Überlast.","TCP erkennt Überlast erst spät, da kein früher Paketverlust auftritt."],"answerJa":["パケットが非常に長時間バッファ内に留まるようになる。","大きなバッファは高い遅延（レイテンシ）を引き起こす。","ネットワークがすでに過負荷でも、送信側はしばらく送信速度を落とさない。","パケットロスが発生しないため、TCPは過負荷をすぐには認識できない。"],"explanationDe":["Ein großer Puffer in Kombination mit einem Flaschenhals im Uplink führt dazu, dass viele Pakete in der Warteschlange verweilen können, bevor es überhaupt zu einem Paketverlust kommt.","Das klingt zunächst vorteilhaft, da Daten nicht sofort verworfen werden – tatsächlich entsteht jedoch das Phänomen des sogenannten Bufferbloat.","Dabei sammeln sich Pakete in der Warteschlange an, was zu hohen Round Trip Times (RTT) und Latenzen führt, obwohl noch keine Pakete verloren gehen.","TCP reagiert standardmäßig auf Paketverlust, um Überlast zu erkennen. Wenn aber kein Paketverlust auftritt, erkennt TCP die Überlastung zu spät oder gar nicht.","Dies führt dazu, dass der Sender weiterhin mit hoher Rate Pakete schickt, obwohl das Netzwerk bereits überlastet ist. Die Stauung verschärft sich weiter.","Gerade bei Anwendungen mit geringer Toleranz gegenüber Latenz – wie Videokonferenzen, Online-Gaming oder Echtzeit-Datenübertragung – verschlechtert sich die Nutzererfahrung erheblich.","Dieses Verhalten steht im Gegensatz zu Systemen mit kleineren Puffern, bei denen Paketverluste früher auftreten und eine frühzeitige Anpassung des Senders möglich ist."],"explanationJa":["大きなバッファとアップリンクにボトルネックがある構成では、非常に多くのパケットがバッファに蓄積され、長時間待たされることになります。","一見するとパケットロスが起こらない点で良さそうに見えますが、実際には『バッファブロート』と呼ばれる現象が発生します。","パケットがバッファに溜まり続けることで、往復遅延時間（RTT）が増加し、ネットワーク全体の応答性が悪化します。","TCPは通常、パケットロスを過負荷の兆候として認識して送信レートを調整しますが、このような状況ではロスがなかなか発生しません。","そのため、TCPの送信側はネットワークが既に飽和しているにも関わらず、高速でデータを送り続けてしまい、混雑が悪化します。","特に、低遅延を求めるアプリケーション（Zoomやゲーム、VoIPなど）では、パフォーマンスの劣化が顕著になります。","小さなバッファの構成であれば、より早くパケットロスが発生し、速やかに送信レートが調整されるため、過剰な遅延は防ぎやすくなります。"],"originalSlideText":"Aufblähen des Puffers (3)\\n\\n TCP-Verbindung mit großem Puffer und Flaschenhals am uplink des Routers\\n Pakete verbringen sehr lange in Warteschlange\\n\\nGroßer Puffer sorgt für lange Warteschlange\\n\\nA\\n\\nB\\n\\nC\\n\\nGroßer Puffer sorgt dafür, dass Sender auch lange nach Auslastung des Netzwerks Senderate nicht verringern","explanationImage":"","questionImage":""},{"id":12,"questionDe":"(s16) Welche Besonderheiten zeigt das Aufblähen des Puffers bei einer TCP-Verbindung mit Flaschenhals an der WiFi-Verbindung?","questionJa":"WiFi接続にボトルネックがあるTCP通信では、バッファブロートはどのような特徴を示しますか？","answerDe":["TCP-Verbindung mit großem Puffer und Flaschenhals an der WiFi-Verbindung.","Acknowledgements (ACKs) verbleiben sehr lange in der Warteschlange.","Hohe Verzögerungen auch bei Rückmeldungen an den Sender."],"answerJa":["WiFi接続のボトルネックと大きなバッファが組み合わさると、ACK（確認応答）が長時間キューに滞留する。","その結果、送信側へのフィードバックが遅れ、制御がうまく働かない。","遅延はデータパケットだけでなくACKパケットにも及ぶ。"],"explanationDe":["In drahtlosen Netzwerken, insbesondere bei WiFi-Verbindungen, kann der Engpass (Flaschenhals) in der Verbindung selbst liegen – etwa durch eingeschränkte Bandbreite oder Interferenzen.","Wenn zusätzlich ein großer Puffer vorhanden ist, führt dies zu einer erheblichen Warteschlange für alle Arten von Paketen – auch für Acknowledgements (ACKs).","Da TCP auf zeitnahe Rückmeldungen durch ACKs angewiesen ist, um seine Sende­rate zu steuern, hat eine Verzögerung dieser Rückmeldungen direkte Auswirkungen auf die Effizienz der Verbindung.","Der Sender interpretiert verzögert eintreffende ACKs möglicherweise fälschlich als Überlast oder Paketverlust, was zur unnötigen Drosselung führen kann.","Gleichzeitig kann es durch die Verzögerung bei ACKs zu Störungen im Timing von Slow Start oder Congestion Avoidance kommen.","In WiFi-Netzen ist das Problem besonders gravierend, da diese zusätzlich durch Schwankungen in der Signalqualität oder konkurrierende Clients beeinträchtigt werden.","Effiziente Buffer-Management-Verfahren und optimierte WLAN-Treiber sind notwendig, um Bufferbloat in solchen Szenarien zu verhindern."],"explanationJa":["WiFi接続においては、無線帯域の制限や干渉などにより、接続自体がボトルネックになる場合があります。そこに大きなバッファが加わると、通信の遅延が深刻になります。","このとき問題となるのは、データパケットだけでなく、TCPのACK（確認応答）パケットも同様にバッファ内に長時間滞留する点です。","TCPはACKを基に送信レートを調整するため、ACKが遅れて届くと制御がうまく機能しなくなります。","送信側はACKの遅延をパケットロスやネットワーク混雑と誤解し、不必要に送信速度を落としてしまうことがあります。","特にSlow Startや輻輳回避（Congestion Avoidance）のフェーズでは、ACKのタイミングが重要であり、遅延は通信全体に悪影響を与えます。","WiFiは有線と比べて遅延や干渉に弱く、他のクライアントとの競合もあるため、Bufferbloatの影響を受けやすい環境です。","これを防ぐためには、適切なバッファ制御アルゴリズムや無線ドライバの最適化が求められます。"],"originalSlideText":"Aufblähen des Puffers (4)\\n\\n TCP-Verbindung mit großem Puffer und Flaschenhals an WiFi Verbindung\\n Acknowledgements verbringen sehr lange in Warteschlange\\n\\nA\\n\\nB\\n\\nC","explanationImage":"","questionImage":""},{"id":13,"questionDe":"(s17) Was bedeutet Airtime Fairness in drahtlosen Netzwerken und warum ist sie notwendig?","questionJa":"無線ネットワークにおけるAirtime Fairness（通信時間の公平性）とは何ですか？なぜそれが必要とされるのですか？","answerDe":["Langsame Geräte benötigen mehr Zeit für Datenübertragung.","Schnelle Geräte müssen warten und erreichen denselben Durchsatz wie langsame.","Airtime Fairness sorgt dafür, dass alle Geräte gleiche Sendezeit erhalten.","Moderne Access Points bevorzugen schnellere Geräte, um Fairness zu gewährleisten."],"answerJa":["低速な端末はデータ送信に時間がかかる。","高速な端末も待たされるため、実効スループットが同じになる。","Airtime Fairnessは全端末が同等の送信時間（エアタイム）を得られるようにする仕組み。","近年のアクセスポイントは、高速端末を優先することで公平性を確保している。"],"explanationDe":["In drahtlosen Netzwerken wie WiFi teilen sich alle Geräte das gleiche Medium – die Funkfrequenz. Das führt zu besonderen Herausforderungen in Bezug auf Fairness.","Wenn ein langsames Gerät, z. B. mit einer schlechten Verbindung oder älterer Hardware, Daten sendet, benötigt es dafür deutlich mehr Zeit als ein schnelles Gerät.","Da das Medium gemeinsam genutzt wird, blockiert das langsame Gerät während dieser Zeit die anderen – auch schnelle – Geräte, die in der Zwischenzeit warten müssen.","Ohne Airtime Fairness ergibt sich eine paradoxe Situation: schnelle Geräte bekommen durch das häufige Warten nicht mehr Durchsatz als langsame, obwohl sie mehr leisten könnten.","Airtime Fairness bedeutet daher, nicht die Datenmenge, sondern die Sendezeit gleichmäßig zu verteilen. Dadurch erhalten schnelle Geräte mehr Datenvolumen bei gleicher Airtime.","Moderne Access Points erkennen die Verbindungsqualität der Geräte und priorisieren solche mit höheren Übertragungsraten, um die Gesamtleistung des Netzwerks zu verbessern.","Ohne dieses Prinzip würde die Netzwerkperformance durch einige wenige langsame Teilnehmer stark beeinträchtigt – ein Effekt, der als \'WiFi-Leistungsparadox\' bekannt ist."],"explanationJa":["無線LAN（WiFi）では、すべての端末が同じ電波（メディア）を共有しています。したがって、どの端末がいつ通信するかという制御が非常に重要になります。","通信速度が遅い端末（電波状態が悪い、古い機種など）は、1つのデータを送るのに多くの時間を必要とします。","この間、他の端末（高速な端末）も電波を使えないため、結果として全体の通信効率が低下します。","その結果、速い端末も遅い端末と同じようなスループット（通信速度）になってしまい、不公平が生じます。","Airtime Fairnessは「送信時間」を全端末に公平に配分するという考え方です。つまり、速い端末は短い時間で多くのデータを送れるため、結果的に高いスループットが得られます。","近年の無線ルーターやアクセスポイントはこの公平性を実現するために、速い端末を優先するアルゴリズムを搭載しています。","この仕組みがなければ、少数の低速端末によってネットワーク全体のパフォーマンスが著しく低下する「WiFiの逆転現象」が発生してしまいます。"],"originalSlideText":"Airtime Fairness\\n\\n In drahtlosen Netzwerken können langsame Geräte mehr Zeit für das Senden von Daten benötigen\\n Schnellere Geräte müssen auf langsame Geräte warten und erzielen gleichen Durchsatz wie langsame Geräte\\n Airtime Fairness → alle Geräte sollten gleichberechtigt Sendezeit (Airtime) für Datenübertragungen erhalten\\n Moderne Access Points (APs) verteilen Airtime gleichmäßig an alle verbundenen Geräte durch bevorzugte Behandlung schnellerer Geräte","explanationImage":"","questionImage":""},{"id":14,"questionDe":"(s18) Welche Unterschiede bestehen zwischen Paket Fairness und Airtime Fairness? (Abbildung beachten)","questionJa":"パケットの公平性（Paket Fairness）と通信時間の公平性（Airtime Fairness）の違いは何ですか？（図を参照）","answerDe":["Paket Fairness bedeutet, dass jedes Gerät die gleiche Anzahl von Paketen senden darf.","Langsame Geräte verbrauchen mehr Airtime pro Paket.","Airtime Fairness verteilt die Sendezeit gleichmäßig, nicht die Paketanzahl.","Schnelle Geräte profitieren von Airtime Fairness durch höhere Effizienz."],"answerJa":["パケットの公平性は、すべての端末が同じ数のパケットを送信できることを意味する。","低速な端末は1パケットあたりの送信時間が長く、結果として多くの通信時間を使ってしまう。","Airtime Fairnessは送信時間を均等に配分し、データ量ではなく通信時間での公平性を確保する。","高速な端末はAirtime Fairnessによって効率的にデータを送信できる。"],"explanationDe":["Paket Fairness und Airtime Fairness sind zwei verschiedene Konzepte zur Ressourcenverteilung in drahtlosen Netzwerken.","Bei Paket Fairness erhält jedes Gerät das Recht, gleich viele Pakete zu senden – unabhängig davon, wie lange das Senden eines Pakets dauert.","In drahtlosen Netzwerken bedeutet das, dass langsame Geräte (z. B. mit schlechter Signalqualität) übermäßig viel Airtime verbrauchen, obwohl sie nur wenige Daten übertragen.","Das führt dazu, dass schnellere Geräte – obwohl sie effizienter arbeiten – benachteiligt werden, weil sie genauso viele Pakete wie langsame senden dürfen, aber weniger Airtime erhalten.","Airtime Fairness hingegen sorgt dafür, dass alle Geräte die gleiche Zeit für Übertragungen nutzen dürfen, was bei schnellen Geräten zu mehr übertragenen Daten führt.","Diese Methode verbessert die Gesamteffizienz des Netzwerks, da sie sicherstellt, dass Airtime nicht durch ineffiziente Übertragungen verschwendet wird.","Die in der Abbildung gezeigte Darstellung verdeutlicht, dass Airtime Fairness einen wesentlich höheren Gesamtdurchsatz ermöglichen kann als einfache Paket Fairness."],"explanationJa":["パケットの公平性とAirtime Fairness（通信時間の公平性）は、無線ネットワークでのリソースの分配方法として根本的に異なります。","パケットの公平性では、全ての端末が同じ数のパケットを送る権利を持ちますが、その1パケットの送信にかかる時間には注目していません。","そのため、通信速度が遅い端末が長い時間をかけて1パケットを送ると、その間他の端末は待たなければならず、全体の効率が低下します。","これに対してAirtime Fairnessでは、「時間」を単位としてすべての端末に均等な送信時間を割り当てます。","高速な端末は同じ時間内に多くのデータを送ることができるため、結果としてより高いスループットが得られます。","この考え方により、遅い端末によるネットワーク全体の足かせを減らし、全体として効率的な通信が可能になります。","図に示されているように、Airtime Fairnessの方が、同じ時間内でのデータ転送量を最大化でき、ネットワーク全体の性能を改善します。"],"originalSlideText":"Airtime Fairness\\n\\nPaket Fairness\\n\\nAirtime Fairness","explanationImage":"","questionImage":""},{"id":15,"questionDe":"(s20) Was ist Random Early Detection (RED) und wie funktioniert dieser Algorithmus zur Pufferverwaltung?","questionJa":"Random Early Detection（RED）とは何ですか？また、このアルゴリズムはどのようにバッファを管理するのですか？","answerDe":["RED ist ein Algorithmus zur Pufferverwaltung (Adaptive Queue Management, AQM).","Pakete werden zufällig verworfen, bevor der Puffer voll ist.","Zwei Schwellwerte: THmin und THmax.","Unter THmin: alle Pakete werden angenommen.","Über THmax: alle Pakete werden verworfen.","Zwischen THmin und THmax: Pakete werden mit steigender Wahrscheinlichkeit (Pdrop) verworfen."],"answerJa":["REDは適応型キュー管理（AQM）の一種で、ネットワーク混雑を制御するためのバッファ管理アルゴリズム。","バッファが完全に埋まる前に、ランダムにパケットを破棄する。","2つのしきい値（THminとTHmax）が設定されている。","バッファ使用率がTHmin未満の場合、すべてのパケットを受け入れる。","THmaxを超えた場合、すべてのパケットを破棄する。","THmin〜THmaxの間では、使用率が高くなるほどパケットが捨てられる確率（Pdrop）が上昇する。"],"explanationDe":["Random Early Detection (RED) ist ein Algorithmus aus dem Bereich des Adaptive Queue Management (AQM), der hilft, Netzüberlast frühzeitig zu erkennen und zu verhindern.","Im Gegensatz zu klassischen FIFO-Puffern, die Pakete erst verwerfen, wenn der Puffer vollständig gefüllt ist, beginnt RED bereits vorher mit dem gezielten, zufälligen Verwerfen einzelner Pakete.","Hierbei werden zwei Schwellwerte definiert: THmin (Minimum Threshold) und THmax (Maximum Threshold).","Solange der Pufferfüllstand unter THmin liegt, werden alle Pakete akzeptiert. Liegt der Füllstand über THmax, werden alle Pakete verworfen.","Dazwischen steigt die Wahrscheinlichkeit für das Verwerfen von Paketen (Pdrop) linear an – das heißt, je voller der Puffer, desto wahrscheinlicher wird ein Paket verworfen.","Diese gezielte Zufälligkeit verhindert, dass viele Verbindungen gleichzeitig betroffen sind – im Gegensatz zum plötzlichen Paketverlust bei vollem Puffer.","RED zielt darauf ab, TCP-Verbindungen durch frühe, verteilte Verluste zur Reduktion der Senderate zu bewegen, bevor es zu starker Überlast oder Bufferbloat kommt."],"explanationJa":["RED（Random Early Detection）は、ネットワークの過負荷（コンジェスション）を早期に察知し、遅延やパケットロスを最小限に抑えるためのバッファ制御アルゴリズムで、適応型キュー管理（AQM）の代表的な手法です。","従来のFIFO（先入れ先出し）バッファでは、バッファが満杯になるまでパケットを捨てませんが、REDではその前に、あえてランダムにパケットを破棄します。","このために、2つのしきい値「THmin（最小しきい値）」と「THmax（最大しきい値）」が設定されます。","バッファの使用率がTHmin未満であれば、パケットはすべて受け入れられますが、THmaxを超えるとすべてのパケットが破棄されます。","その中間では、使用率が高くなるにつれて、パケットが破棄される確率（Pdrop）が線形に増加します。","このランダム性により、複数のTCP接続が一斉に影響を受けるのを防ぎ、過負荷前の段階で緩やかに送信レートを抑制できます。","REDは、バッファブロートや突発的な輻輳を防ぎ、ネットワーク全体の応答性や安定性を向上させるために設計されています。"],"originalSlideText":"Random Early Detection\\n\\n Adaptive Queue Management (AQM)\\n RED ist ein Pufferverwaltungsalgorithmus, der in  Routern verwendet wird um Netzüberlast zu verhindern\\n Frühzeitiges Verwerfen von Paketen, bevor der Puffer vollständig ausgelastet ist\\n Minimaler (THmin) und maximaler (THmax) Schwellwert\\n Pakete bei Füllständen unterhalb THmin immer annehmen und oberhalb THmax immer verwerfen\\n Zwischen Schwellwerten steigt die Verwerfungswahrscheinlichkeit (Pdrop) linear an","explanationImage":"","questionImage":""},{"id":16,"questionDe":"(s21) Wie verändert sich die Verwerfungswahrscheinlichkeit (Pdrop) in RED abhängig vom Pufferfüllstand? (siehe Abbildung)","questionJa":"REDにおけるパケット破棄確率（Pdrop）は、バッファの使用率に応じてどのように変化しますか？（図を参照）","answerDe":["Unterhalb des Schwellwerts THmin: keine Pakete werden verworfen.","Zwischen THmin und THmax: Pakete werden mit zunehmender Wahrscheinlichkeit verworfen.","Oberhalb THmax: alle Pakete werden verworfen.","Verwerfungswahrscheinlichkeit steigt linear zwischen THmin und THmax."],"answerJa":["バッファ使用率がTHmin未満：パケットは破棄されない。","THminとTHmaxの間：使用率が高くなるにつれて、破棄確率（Pdrop）が増加する。","THmaxを超えると：すべてのパケットが破棄される。","PdropはTHminとTHmaxの間で直線的に増加する。"],"explanationDe":["Die RED-Strategie basiert auf einer kontrollierten, stufenweisen Erhöhung der Wahrscheinlichkeit, Pakete zu verwerfen, je voller ein Puffer wird.","Im Diagramm ist ersichtlich, dass bei einem Pufferfüllstand unterhalb von THmin keine Pakete verworfen werden – das Netzwerk gilt als unbelastet.","Sobald der Füllstand zwischen THmin und THmax liegt, beginnt RED, Pakete mit einer bestimmten Wahrscheinlichkeit zu verwerfen.","Diese Wahrscheinlichkeit – Pdrop – steigt linear mit dem Füllstand: je näher der Wert an THmax kommt, desto wahrscheinlicher wird ein Paketverlust.","Über THmax hinaus ist der Puffer als voll angesehen, und alle Pakete werden konsequent verworfen.","Dieses Verhalten dient dazu, TCP-Verbindungen frühzeitig zur Reduktion ihrer Sendeleistung zu bewegen, bevor es zu massiven Paketverlusten kommt.","Die Visualisierung in der Abbildung verdeutlicht diese Abstufung klar und zeigt, wie RED eine abgestufte Reaktion auf zunehmende Überlast ermöglicht."],"explanationJa":["REDのアルゴリズムは、バッファの使用率に応じてパケットの破棄確率（Pdrop）を徐々に上げていくことで、混雑を事前に防ごうとする仕組みです。","図を見ると、まずTHmin（最小しきい値）以下ではすべてのパケットが受け入れられ、破棄されることはありません。","THminとTHmaxの間では、使用率が高まるにつれてPdropも徐々に上昇します。この関係は直線的（リニア）に描かれており、段階的にリスクを高める構造になっています。","THmax（最大しきい値）を超えると、すべてのパケットが即座に破棄されます。これはネットワークが限界に達していることを示します。","このように、REDはバッファが完全に埋まる前に通信量を減らすよう、送信側に早めにシグナルを送る役割を果たします。","図はこのプロセスを視覚的に理解するのに非常に役立ち、REDの階段的な制御モデルを直感的に示しています。","このモデルにより、ネットワークは一斉のパケット損失や輻輳を避け、スムーズな流れを維持できます。"],"originalSlideText":"Random Early Detection\\n\\nKeine Pakete verwerfen\\n\\nVerwerfen mit Wahrscheinlichkeit Pdrop\\n\\nPakete immer verwerfen","explanationImage":"","questionImage":""},{"id":17,"questionDe":"(s22) Was ist Fair Queuing Controlled Delay (FQ-CoDel) und wie funktioniert dieser Algorithmus?","questionJa":"FQ-CoDel（Fair Queuing Controlled Delay）とは何ですか？また、このアルゴリズムはどのように機能しますか？","answerDe":["FQ-CoDel ist ein Pufferverwaltungsalgorithmus zur Reduzierung von Latenzen.","Er kombiniert Fair Queuing (FQ) und Controlled Delay (CoDel).","FQ trennt Datenströme und behandelt sie separat.","CoDel verwirft Pakete basierend auf deren Verweildauer im Puffer, nicht nur anhand des Füllstands."],"answerJa":["FQ-CoDelはネットワーク遅延を抑えるためのバッファ管理アルゴリズム。","Fair Queuing（公平なキューイング）とCoDel（制御付き遅延）を組み合わせている。","FQは複数のデータフローを分離して個別に処理する。","CoDelはバッファの使用量だけでなく、パケットの滞留時間に基づいて破棄を判断する。"],"explanationDe":["FQ-CoDel ist ein moderner Ansatz zur Pufferverwaltung in Netzwerken, der zwei bekannte Techniken kombiniert: Fair Queuing (FQ) und Controlled Delay (CoDel).","Fair Queuing teilt den Netzwerkverkehr in unterschiedliche Datenströme auf (z. B. pro Anwendung oder Verbindung) und stellt sicher, dass jeder Stream fair behandelt wird.","Das verhindert, dass ein einzelner Datenstrom alle Ressourcen beansprucht und andere verdrängt – ein typisches Problem bei traditionellen FIFO-Warteschlangen.","CoDel wiederum misst, wie lange ein Paket im Puffer verweilt. Wird eine bestimmte Verzögerungsschwelle überschritten, wird das Paket verworfen.","Im Gegensatz zu Algorithmen wie RED, die nur auf den Füllstand des Puffers schauen, reagiert CoDel direkt auf beobachtete Verzögerungen.","Durch die Kombination dieser beiden Methoden kann FQ-CoDel sowohl Latenzen verringern als auch eine gerechte Verteilung der Bandbreite gewährleisten.","FQ-CoDel wird in vielen modernen Betriebssystemen und Routern eingesetzt, insbesondere in Open-Source-Software wie OpenWRT oder Linux, da es robust und effizient arbeitet."],"explanationJa":["FQ-CoDel（Fair Queuing Controlled Delay）は、ネットワークの遅延を減らしつつ、帯域の公平な配分を目指す先進的なバッファ管理アルゴリズムです。","この方式は、Fair Queuing（公平なキューイング）とCoDel（制御された遅延）という2つの技術を組み合わせています。","Fair Queuingでは、ネットワーク上の各データフローを個別のキューに分け、それぞれを平等に処理することで、一部の通信が他を圧迫するのを防ぎます。","一方、CoDelは単にバッファの使用率を見るのではなく、パケットがバッファ内にとどまっていた『時間』を測定し、一定時間を超えるとそのパケットを破棄します。","これにより、遅延が実際に発生しているかどうかを基準に処理が行われ、より適切なタイミングで介入が可能になります。","FQ-CoDelは、REDのように平均的な混雑を予測する方法とは異なり、実測値に基づくリアルタイム制御を行う点が特徴です。","このアルゴリズムはOpenWRTやLinuxのネットワークスタックなど、多くの現代的なルーターやOSで広く採用されており、信頼性が高く効率的に動作します。"],"originalSlideText":"Fair Queuing Controlled Delay\\n\\n FQ-CoDel ist ein Pufferverwaltungsalgorithmus der Netzwerklatenzen reduziert und die Gesamtleistung verbessert\\n Kombination aus CoDel (Controlled Delay) und Fair Queuing (FQ)\\n\\n Fair Queuing\\n❖ Netzwerkverkehr wird in verschiedene Datenströme unterteilt welche separat behandelt werden\\n\\n Controlled Delay\\n❖ Pakete werden basierend auf der Verweildauer im Puffer und nicht nur abhängig vom Füllstand verworfen","explanationImage":"","questionImage":""},{"id":18,"questionDe":"(s23) Wie funktioniert Fair Queuing (FQ) im Router und was zeigt die Abbildung?","questionJa":"Fair Queuing（FQ）はルーターでどのように動作しますか？図を参考にして説明しなさい。","answerDe":["Der Router unterteilt den Datenverkehr in separate Warteschlangen (z. B. pro Fluss).","Er leitet Pakete gleichmäßig aus allen Warteschlangen weiter.","Datenströme behindern sich dadurch nicht gegenseitig.","Alle Flows erhalten faire Anteile der Übertragungsressourcen."],"answerJa":["ルーターは通信フローごとに個別の待機列（キュー）を作成する。","各キューから順番にパケットを均等に取り出して転送する。","これにより、ある通信フローが他のフローを圧迫しなくなる。","すべてのフローが公平に送信リソースを受け取れるようになる。"],"explanationDe":["Fair Queuing (FQ) ist ein Konzept, bei dem der Netzwerkverkehr in sogenannte Flows oder Datenströme aufgeteilt wird, die separat behandelt werden.","Jeder Flow erhält eine eigene Warteschlange. Der Router oder Switch entnimmt aus jeder dieser Warteschlangen in regelmäßiger Reihenfolge ein Paket und leitet es weiter.","Im Gegensatz zu FIFO (First In, First Out), wo alle Pakete in einer einzigen Warteschlange landen, verhindert FQ, dass ein datenintensiver Stream die gesamte Bandbreite belegt.","Durch dieses Verfahren wird gewährleistet, dass kein einzelner Fluss den anderen benachteiligt – alle bekommen in etwa die gleiche Zeitanteile zur Übertragung.","Die Abbildung auf der Folie illustriert dies durch parallele Warteschlangen (z. B. A, B, C), von denen der Router gleichmäßig Pakete abruft.","Fair Queuing ist besonders nützlich bei der Kombination von Echtzeit- und Hintergrundverkehr – etwa wenn man während eines Videocalls Dateien herunterlädt.","Diese Technik ist Grundlage für viele moderne QoS-Strategien (Quality of Service), da sie eine faire Ressourcennutzung auch bei stark ausgelasteten Netzen ermöglicht."],"explanationJa":["Fair Queuing（FQ）は、ネットワーク上の通信を『フロー』（たとえばアプリごとの通信や接続単位）に分け、それぞれを個別に管理する方式です。","各フローには専用の待機列（キュー）が用意され、ルーターはそれぞれのキューから順番にパケットを取り出して転送します。","FIFO（先入れ先出し）方式では、すべてのフローが1つのキューに混在するため、特定の通信（例：大量の動画アップロードなど）が帯域を独占しがちです。","FQを用いれば、どのフローも他を妨げることなく、均等に送信機会を得られます。","スライドの図では、A、B、Cなどの複数のキューが存在し、各キューから均等にパケットを送信している様子が示されています。","この方式は、ビデオ会議やVoIPなどリアルタイム通信と、バックグラウンドのファイル転送などが同時に行われる環境において特に有効です。","FQは現代のQoS（サービス品質制御）を実現する基礎技術として、ルーターやオペレーティングシステムに広く導入されています。"],"originalSlideText":"Fair Queuing\\n\\nA\\n\\nB\\n\\nC\\n\\n Router leitet von jeder Warteschlange gleichmäßig Pakete weiter\\n Datenströme behindern sich nicht gegenseitig","explanationImage":"","questionImage":""},{"id":19,"questionDe":"(s25) Was sind die Merkmale von TCP BIC und wofür wurde es entwickelt?","questionJa":"TCP BICの特徴は何ですか？また、どのような目的で設計されたのですか？","answerDe":["TCP BIC war der Standard im Linux-Kernel vor TCP CUBIC.","Besonders geeignet für Long Fat Networks (LFNs) mit hoher Bandbreite und Latenz.","Hohe Stabilität und schnelle Anpassung an Bandbreitenänderungen.","Effizienz durch spezielle Wachstumsfunktion für das Congestion Window (cWnd)."],"answerJa":["TCP BICは、TCP CUBICの前にLinuxカーネルで標準として採用されていたアルゴリズム。","帯域幅と遅延がともに大きいLFN（Long Fat Network）に特に適している。","帯域変化への迅速な適応と高い安定性を特徴とする。","輻輳ウィンドウ（cWnd）の成長を調整する特別な関数を用いて効率を実現している。"],"explanationDe":["TCP BIC (Binary Increase Congestion Control) wurde speziell für Hochgeschwindigkeitsnetze entwickelt, in denen klassische TCP-Algorithmen wie Reno oder NewReno ineffizient sind.","Es war lange Zeit der Standard-Algorithmus im Linux-Kernel und diente als Grundlage für die Entwicklung von TCP CUBIC.","Besonders in Long Fat Networks (LFNs), also Netzwerken mit großer Bandbreite und hoher Latenz, zeigt TCP BIC stabile Leistungen.","Die zentrale Idee hinter BIC ist es, das Congestion Window (cWnd) zunächst schnell zu erhöhen, aber dann feingranular nach einem möglichen Maximalwert zu suchen, um Überlast zu vermeiden.","Dabei nutzt der Algorithmus eine Mischung aus Additive Increase und binärer Suche, was zu einem ausgewogenen Verhältnis zwischen Durchsatz und Stabilität führt.","Im Vergleich zu klassischen Methoden ermöglicht BIC eine schnellere Erkennung verfügbarer Bandbreite und eine robustere Reaktion auf plötzliche Änderungen.","Allerdings gilt der Algorithmus im Vergleich zu CUBIC als komplexer und schwieriger zu implementieren, weshalb er später abgelöst wurde."],"explanationJa":["TCP BIC（Binary Increase Congestion Control）は、従来のTCPアルゴリズム（TCP RenoやNewRenoなど）が非効率だった高速ネットワーク向けに設計された輻輳制御アルゴリズムです。","Linuxカーネルでは長らく標準として採用されており、後継のTCP CUBICの基礎にもなっています。","特にLFN（Long Fat Network）と呼ばれる、遅延が大きく、帯域も広いネットワークにおいて高い性能を発揮します。","BICの特徴は、輻輳ウィンドウ（cWnd）を最初は急速に拡大し、ある程度大きくなったら細かく調整して最適なウィンドウサイズを見つけるという点です。","この動作は、加法的増加（Additive Increase）と2分探索（Binary Search）を組み合わせて実現されており、安定性と高速性のバランスがとれています。","BICはネットワーク帯域の変化にも素早く反応でき、突発的な輻輳にも強いという利点があります。","ただし、CUBICと比べると状態管理が複雑で実装が難しいため、最終的にはよりシンプルで効果的なCUBICに取って代わられました。"],"originalSlideText":"TCP BIC\\n\\n Binary Increase Congestion Control BIC\\n Standard im Linux Kernel vor TCP CUBIC\\n Hohe Stabilität in „Long Fat Networks“ mit hoher Bandbreite aber auch hoher Latenz\\n Schnelle Anpassung an eine veränderte Bandbreite\\n Effizienz von TCP BIC kommt durch die Wachstumsfunktion für das Congestion Window (cWnd)","explanationImage":"","questionImage":""},{"id":20,"questionDe":"(s26) Wie funktioniert die Wachstumsstrategie des Congestion Windows in TCP BIC basierend auf dem letzten Paketverlust?","questionJa":"TCP BICでは、最後のパケットロス時のウィンドウサイズ（Wmax）を基に、輻輳ウィンドウ（cWnd）はどのように成長しますか？","answerDe":["cWnd steigt zunächst bis zum vorherigen Wmax.","Additive Increase bis ein Schwellwert zur Differenz erreicht ist.","Dann folgt eine binäre Suche um Wmax.","Wachstum verlangsamt sich in der Nähe von Wmax, da dort Verluste wahrscheinlich sind."],"answerJa":["cWndは、過去の最大ウィンドウサイズWmaxまでまず増加する。","Wmaxとの差がある程度小さくなるまで、加法的に増加（Additive Increase）する。","その後、Wmaxを中心に二分探索（Binary Search）で調整する。","Wmax付近ではロスの可能性が高いため、成長が緩やかになる。"],"explanationDe":["Die zentrale Steuergröße in TCP BIC ist das Congestion Window (cWnd), das nach einem Paketverlust nicht einfach wieder linear wächst, sondern eine intelligente Strategie verfolgt.","Zunächst wird cWnd linear (Additive Increase) bis zu einem Punkt gesteigert, an dem der Abstand zum zuletzt beobachteten Maximum (Wmax) kleiner als ein definierter Schwellenwert ist.","Ab diesem Punkt beginnt eine binäre Suche rund um Wmax – d. h., TCP BIC testet systematisch kleinere und größere Werte nahe bei Wmax, um die optimale Fenstergröße zu ermitteln.","Diese Technik minimiert die Gefahr erneuter Paketverluste, indem das Wachstum bei kritischen Werten (nahe Wmax) stark verlangsamt wird.","Anders als klassische Algorithmen wie TCP Reno, die nach einem Verlust mit exponentiellem Wachstum neu beginnen, nähert sich BIC dem optimalen Wert gezielt und fein abgestimmt.","Besonders bei Long Fat Networks, in denen kleine Veränderungen große Auswirkungen haben können, ermöglicht diese Methode eine stabile und zugleich effiziente Nutzung der Bandbreite.","Die Kombination von Additive Increase und Binary Search macht BIC präziser, aber auch komplexer in der Umsetzung im Vergleich zu einfacheren Algorithmen."],"explanationJa":["TCP BICでは、輻輳ウィンドウ（cWnd）の制御において、最後にパケットロスが発生したときの最大ウィンドウサイズ（Wmax）を基準にしています。","まずは、現在のcWndがWmaxに達するまで加法的に（Additive Increase）増加していきます。","Wmaxとの差が小さくなった段階で、二分探索的に（Binary Search）cWndの値を上下に試しながら、ネットワークに最適なウィンドウサイズを見つけようとします。","この方法により、特にパケットロスが発生しやすいWmax近辺ではcWndの増加を緩やかにすることができます。","従来のTCP Renoのように、パケットロス後に指数関数的に増やしていく方法と違い、BICは段階的かつ慎重な調整を行います。","特に帯域が広く、遅延も大きいLong Fat Networkでは、このような細かい調整が大きな効果を発揮します。","この戦略により、BICは過負荷を回避しつつ、高スループットと安定性を両立させることが可能になります。"],"originalSlideText":"TCP BIC\\n\\n Anstieg bis zu cWnd vor letztem Paketverlust (Wmax)\\n Zunächst Additive Increase bis Differenz zu Wmax kleiner als Schwellwert, ab dann Binary Search\\n Abflachender Anstieg um Wmax, da Paketverlust an dieser Stelle am wahrscheinlichsten ist","explanationImage":"","questionImage":""},{"id":21,"questionDe":"(s27) Warum wurde TCP CUBIC entwickelt und welche Vorteile bietet es gegenüber TCP BIC?","questionJa":"なぜTCP CUBICが開発されたのですか？また、TCP BICと比べてどのような利点がありますか？","answerDe":["TCP BIC war zu komplex mit vielen Zuständen und schwer zu implementieren.","Wachstum war zu aggressiv bei geringer RTT oder niedriger Bandbreite.","TCP CUBIC nutzt eine kubische Wachstumsfunktion für cWnd.","CUBIC bietet gute Fairness bei gleichzeitig aktiven Flows.","Heute Standard in Windows, macOS und Linux."],"answerJa":["TCP BICは状態数が多く、実装が複雑であったため。","RTTが小さいか帯域幅が低い場合に、ウィンドウ成長が過剰になりやすかった。","TCP CUBICは、cWndの成長にキュービック関数（3次関数）を利用している。","同時に動作する複数のフロー間で公平性が高い。","現在では、Windows、macOS、Linuxで標準アルゴリズムとして採用されている。"],"explanationDe":["TCP CUBIC wurde als Weiterentwicklung von TCP BIC entworfen, um dessen Schwächen zu beseitigen und die Implementierung zu vereinfachen.","Ein Hauptproblem von TCP BIC war die hohe Komplexität – es gab viele Zustände, die schwer zu verwalten und zu implementieren waren.","Zudem zeigte sich BIC in Netzwerken mit niedriger RTT oder geringer Bandbreite als zu aggressiv, was zu Instabilitäten und Paketverlusten führen konnte.","CUBIC ersetzt die binäre Suchstrategie von BIC durch eine kontinuierliche, kubische Wachstumsfunktion für das Congestion Window (cWnd).","Die Funktion ist so gestaltet, dass sie sich nahe Wmax langsam (konkav), auf dem Plateau stabil und danach beschleunigt (konvex) entwickelt.","Dies führt zu einer stabileren und vorhersagbareren Bandbreitennutzung sowie verbesserter Fairness bei mehreren gleichzeitig aktiven TCP-Flows.","Durch diese Eigenschaften wurde TCP CUBIC als Standard in den wichtigsten Betriebssystemen eingeführt – z. B. Linux, Windows und macOS – und ist heute der weltweit am häufigsten eingesetzte TCP-Algorithmus."],"explanationJa":["TCP CUBICは、TCP BICの問題点を解決するために開発された次世代の輻輳制御アルゴリズムです。","TCP BICは設計が複雑で、多くの状態遷移を持っていたため、実装や管理が難しいという欠点がありました。","また、RTT（往復時間）が短い場合や、帯域が狭い場合に、輻輳ウィンドウ（cWnd）の成長が急激になりすぎ、パケットロスが発生しやすいという問題もありました。","CUBICでは、cWndの増加を3次関数（キュービック関数）でモデル化することで、より滑らかで予測可能な成長を実現しています。","この関数により、Wmaxの付近では成長をゆるやかにし（凹型）、その後は急激に加速（凸型）させるような動作が可能です。","これにより、TCP CUBICは複数の通信フローが同時に動作する状況でも公平性が高く、安定したスループットを維持できます。","現在では、Linuxカーネルをはじめ、WindowsやmacOSなど主要なOSでTCPのデフォルトとして採用されており、広く利用されています。"],"originalSlideText":"TCP CUBIC\\n\\n TCP BIC\\n❖ Zu komplex mit vielen Zustände daher schwer zu implementieren\\n❖ Anstieg zu aggressiv besonders dann wenn RTT oder Bandbreite sehr niedrig\\n\\n TCP CUBIC ist heute der TCP-Standard in Windows, MacOS und Linux\\n Modelliert Wachstumsfunktion von TCP BIC mit einer kubischen Funktion\\n Erzielt sehr gute Fairness mit gleichzeitig sendenden Flüssen\\n\\n Wachstumsfunktion:\\n❖ W(t) = C(t-K)^3 + Wmax\\n❖ K = cubic_root(Wmax ⋅ β / C) (Zeit bis W = Wmax)","explanationImage":"","questionImage":""},{"id":22,"questionDe":"(s28) Wie lautet die Wachstumsfunktion von TCP CUBIC und was bedeuten ihre Parameter?","questionJa":"TCP CUBICの輻輳ウィンドウ（cWnd）の成長関数はどのように定義されていますか？また、その各パラメータにはどのような意味がありますか？","answerDe":["Die Wachstumsfunktion lautet: W(t) = C(t−K)^3 + Wmax.","C ist ein Skalierungsfaktor für die Steilheit der Kurve.","K ist die Zeitverschiebung, bei der W(t) = Wmax erreicht wird.","Wmax ist die maximale Fenstergröße vor dem letzten Paketverlust."],"answerJa":["成長関数は W(t) = C(t−K)^3 + Wmax で定義される。","Cは成長曲線の急勾配度を調整する定数（スケーリング係数）。","Kは関数がWmaxに達するまでの時間（時間オフセット）。","Wmaxは直前のパケットロス時の最大ウィンドウサイズ。"],"explanationDe":["Die zentrale Idee von TCP CUBIC ist die Verwendung einer kubischen Funktion, um die Größe des Congestion Windows (cWnd) über die Zeit zu steuern.","Die Funktion lautet: W(t) = C(t−K)^3 + Wmax.","Dabei ist C ein konstanter Skalierungsfaktor, der bestimmt, wie schnell die Funktion anwächst – ein größerer Wert von C führt zu schnellerem Wachstum.","K ist eine Zeitkonstante, die so gewählt wird, dass W(t) genau bei t = K den Wert Wmax erreicht. Wmax ist die Fenstergröße, die vor dem letzten Paketverlust erreicht wurde.","Dadurch entsteht eine symmetrische, glatte Wachstumskurve mit einem Minimum bei t = K, von der aus das Fensterwachstum entweder in konkaver oder konvexer Form weiterläuft.","Dieses Modell erlaubt es TCP CUBIC, sich langsam an den kritischen Wert Wmax heranzutasten und dann darüber hinaus zu beschleunigen, sobald das Netz dies zulässt.","Im Vergleich zu den stufenbasierten Ansätzen in BIC oder Reno sorgt diese kontinuierliche Funktion für ein stabileres und besser vorhersehbares Verhalten."],"explanationJa":["TCP CUBICでは、輻輳ウィンドウ（cWnd）の成長を3次関数（キュービック関数）でモデル化しており、時間に応じてウィンドウサイズを滑らかに調整します。","その関数は W(t) = C(t−K)^3 + Wmax という形式で表されます。","ここでCはスケーリング係数であり、グラフの急勾配の度合いを調整する役割を持ちます。Cが大きければ成長は速く、小さければ緩やかになります。","Kはオフセットの時間で、関数がWmax（最後に記録された最大ウィンドウサイズ）にちょうど達する時刻を示します。","この関数により、ウィンドウサイズはWmaxの付近では緩やかに変化し、ネットワークが許すならそこから加速して再び拡大していきます。","従来のTCP RenoやBICのように段階的な変化ではなく、連続的かつ滑らかな成長が可能になるため、より安定した挙動を示します。","結果として、混雑状況の判別がしやすくなり、適切なタイミングでの輻輳制御が実現されます。"],"originalSlideText":"TCP CUBIC\\n\\n Modelliert Wachstumsfunktion von TCP BIC mit einer kubischen Funktion\\n Erzielt sehr gute Fairness mit gleichzeitig sendenden Flüssen\\n\\n Wachstumsfunktion:\\n❖ W(t) = C(t−K)^3 + Wmax\\n❖ K = cubic_root(Wmax ⋅ β / C) (Zeit bis W = Wmax)","explanationImage":"","questionImage":""},{"id":23,"questionDe":"(s29) Welche drei Betriebsmodi kennt TCP CUBIC und wie verhalten sie sich jeweils?","questionJa":"TCP CUBICにはどのような3つの動作モードがありますか？それぞれの特徴は何ですか？","answerDe":["1. TCP-Modus: Wenn cWnd kleiner ist als Wtcp(t), verwendet CUBIC das klassische TCP-Wachstum.","2. Konkaver Bereich: Wenn cWnd < Wmax, wächst cWnd langsam und vorsichtig.","3. Konvexer Bereich: Wenn cWnd > Wmax, steigt cWnd zunehmend schneller an."],"answerJa":["1. TCPモード：cWndがWtcp(t)より小さい場合、CUBICは通常のTCPと同じ成長戦略を使う。","2. 凹型領域：cWndがWmaxより小さい場合、ウィンドウは慎重にゆっくり増加する。","3. 凸型領域：cWndがWmaxを超えると、ウィンドウは加速度的に増加していく。"],"explanationDe":["TCP CUBIC kennt drei verschiedene Betriebsmodi, die je nach aktueller Fenstergröße (cWnd) im Verhältnis zum Referenzwert Wmax und der TCP-Vergleichsgröße Wtcp(t) gewählt werden.","Im **TCP-Modus** verhält sich CUBIC wie ein klassischer TCP-Algorithmus mit Additive Increase/Multiplicative Decrease (AIMD), wenn cWnd kleiner ist als Wtcp(t), also die Fenstergröße, die klassisches TCP zu diesem Zeitpunkt hätte.","Der **konkave Bereich** beginnt, wenn cWnd kleiner als Wmax ist – also unterhalb des Maximums, das vor dem letzten Paketverlust erreicht wurde. In diesem Bereich wächst das Fenster langsam, um eine erneute Überlast zu vermeiden.","Im **konvexen Bereich** (cWnd > Wmax) hat das Netzwerk offenbar mehr Kapazität, daher wächst das Fenster wieder zunehmend schneller. Dieser Bereich ist zuständig für aggressiveres Wachstum, sobald die Überlastgefahr geringer ist.","Diese drei Modi ermöglichen es TCP CUBIC, flexibel auf Netzwerksituationen zu reagieren und dabei sowohl Stabilität (in der Nähe von Wmax) als auch Effizienz (darüber hinaus) zu gewährleisten.","Die Unterscheidung erlaubt eine dynamische Anpassung: vorsichtiger Zuwachs bei Unsicherheit und beschleunigter Zuwachs, wenn mehr Bandbreite verfügbar ist.","Diese modulare Architektur ist einer der Gründe für die hohe Verbreitung und Robustheit von TCP CUBIC im modernen Internet."],"explanationJa":["TCP CUBICには、ネットワーク状況に応じて3つの動作モードが用意されています。それぞれはcWnd（輻輳ウィンドウ）の大きさによって切り替えられます。","**TCPモード**では、CUBICは通常のTCP（AIMD）の動作を模倣します。これは、cWndがWtcp(t)（同時刻に通常のTCPが到達するであろうウィンドウサイズ）より小さい場合に発動されます。","**凹型領域（Konkaver Bereich）**は、cWndがWmax（直前の最大ウィンドウ）より小さいときです。この領域では、ネットワークの負荷を慎重に判断するため、ウィンドウの成長は遅く設定されます。","**凸型領域（Konvexer Bereich）**は、cWndがWmaxを超えたときで、ネットワークに余裕があると判断され、成長が加速されます。","このように、CUBICはネットワークの状況に応じて緩やか・中立・積極的な成長モードを使い分けます。","安定性と効率性を両立するための工夫であり、TCP Renoのような単純な制御よりも柔軟な対応が可能です。","これらのモード切り替え機構により、TCP CUBICは現在の主流となるほどの安定性と性能を発揮しています。"],"originalSlideText":"TCP CUBIC\\n\\n Drei Modi\\n\\n1. TCP-Modus:\\nWenn cWnd kleiner ist als die Fenstergröße, die (standardmäßiges) TCP zum Zeitpunkt t nach dem letzten Paketverlust erreichen würde, dann befindet sich CUBIC im TCP-Modus\\n\\n2. Konkaver Bereich:\\nWenn cWnd kleiner ist als Wmax, dann befindet sich CUBIC im konkaven Bereich\\n\\n3. Konvexer Bereich:\\nWenn cWnd größer ist als Wmax, dann befindet sich CUBIC im konvexen Bereich.","explanationImage":"","questionImage":""},{"id":24,"questionDe":"(s30) Wie verhält sich TCP CUBIC im TCP-Modus und wie wird Wtcp(t) berechnet?","questionJa":"TCP CUBICはTCPモードにおいてどのように振る舞いますか？また、Wtcp(t)はどのように計算されますか？","answerDe":["Bei Empfang eines ACKs prüft CUBIC, ob cWnd < Wtcp(t).","Wtcp(t) = Wmax(1−β) + 3(β/2−β) ⋅ t / RTT.","Ist das der Fall, wächst cWnd mit Wtcp(t) und nicht mit der CUBIC-Funktion."],"answerJa":["ACKを受信すると、CUBICはcWndがWtcp(t)より小さいかどうかを確認する。","Wtcp(t) = Wmax(1−β) + 3(β/2−β) ⋅ t / RTT で計算される。","cWndがこの値より小さければ、CUBICはCUBIC関数ではなくWtcp(t)に従ってウィンドウを成長させる。"],"explanationDe":["Im TCP-Modus verhält sich CUBIC bewusst wie ein klassischer TCP-Algorithmus, insbesondere wie TCP Reno mit Additive Increase/Multiplicative Decrease (AIMD).","Der Modus wird aktiviert, wenn die aktuelle Fenstergröße (cWnd) kleiner ist als Wtcp(t), also kleiner als der Wert, den klassisches TCP zum gleichen Zeitpunkt nach dem letzten Verlust erreicht hätte.","Die Funktion Wtcp(t) basiert auf der Formel:\\nWtcp(t) = Wmax(1−β) + 3(β/2−β) ⋅ t / RTT.","Dabei ist Wmax die maximale Fenstergröße vor dem letzten Paketverlust, β der Reduktionsfaktor (meist 0.2) und t die Zeit seit dem Verlustereignis.","CUBIC verwendet in diesem Fall Wtcp(t), um das cWnd zu erhöhen – anstelle der eigenen kubischen Funktion – um nicht langsamer als ein klassisches TCP zu wachsen.","Dieser Mechanismus garantiert TCP-Freundlichkeit: CUBIC verhält sich mindestens so schnell wie klassische TCP-Algorithmen, insbesondere bei kurzen RTTs.","So stellt CUBIC sicher, dass es in gemischten Netzwerken mit TCP Reno oder NewReno nicht benachteiligt wird oder unfair dominiert."],"explanationJa":["TCPモードでは、CUBICは従来のTCP（特にTCP Reno）の動作を模倣します。これはAdditive Increase / Multiplicative Decrease（AIMD）方式に基づいた制御方法です。","このモードは、現在のウィンドウサイズcWndがWtcp(t)より小さいときに発動します。Wtcp(t)とは、同じ時刻にTCP Renoが到達していたであろうウィンドウサイズを表します。","Wtcp(t)の計算式は以下の通りです：\\nWtcp(t) = Wmax(1−β) + 3(β/2−β) × t / RTT。","ここで、Wmaxは最後にパケットロスが発生したときの最大ウィンドウサイズ、βは輻輳時のウィンドウ縮小率（通常0.2）、tはロス発生からの経過時間、RTTはラウンドトリップタイムです。","この式により、CUBICはTCP Renoと同じかそれ以上の速度でウィンドウを成長させるように設計されています。","これにより、特にRTTが小さい環境でもCUBICが極端に遅くなることを防ぎつつ、他のTCPバージョンとの公平性（TCP-Fairness）を保つことができます。","異なる輻輳制御アルゴリズムが混在するネットワークでも安定かつ互恵的に動作できるよう工夫されている点が特徴です。"],"originalSlideText":"TCP-Modus\\n\\n Bei Empfang eines ACKs wird zuerst überprüft, ob sich CUBIC in der TCP-Region befindet\\n\\n Fenstergröße bei TCP mit AIMD\\n❖ Wtcp(t) = Wmax(1−β) + 3(β/2−β) ⋅ t / RTT\\n\\n Wenn cWnd kleiner als Wtcp(t) dann befindet ist CUBIC in TCP-Region und cWnd wächst stattdessen mit Wtcp(t)","explanationImage":"","questionImage":""},{"id":25,"questionDe":"(s31) Wie verändert sich das Congestion Window (cWnd) bei TCP CUBIC über die Zeit und wie reagiert es auf Paketverlust?","questionJa":"TCP CUBICでは、時間の経過とともにcWnd（輻輳ウィンドウ）はどのように変化しますか？また、パケットロスが発生したときにはどう反応しますか？","answerDe":["Wenn CUBIC nicht im TCP-Modus ist, steigt cWnd mit jedem ACK.","cWnd folgt zuerst dem konkaven Profil bis Wmax.","Dann flacht die Kurve bei Wmax ab (Plateau).","Danach folgt das konvexe Wachstum über Wmax hinaus.","Bei Paketverlust wird cWnd um einen Faktor β reduziert."],"answerJa":["TCPモードでないとき、CUBICはACKごとにcWndを増加させる。","最初は凹型の成長（Wmaxに向かって緩やかに増加）。","Wmaxでは成長が一時的に緩やかになる（Plateau＝平坦部）。","その後、凸型の成長でWmaxを超えて急速に増加する。","パケットロスが発生すると、cWndは係数βにより減少する。"],"explanationDe":["Außerhalb des TCP-Modus folgt TCP CUBIC seiner charakteristischen kubischen Wachstumsfunktion, welche das Verhalten des Congestion Windows (cWnd) über die Zeit steuert.","Die Funktion gliedert sich dabei in drei Abschnitte: zunächst ein **konkaver Bereich**, in dem das Wachstum langsam erfolgt, je näher man Wmax (das Maximum vor dem letzten Paketverlust) kommt.","Sobald cWnd ≈ Wmax ist, befindet sich CUBIC in einem **Plateau** – einer flachen Phase, in der das Wachstum nahezu stoppt. Dies erlaubt dem Netzwerk, sich zu stabilisieren.","Wenn keine Überlast festgestellt wird, beginnt der **konvexe Bereich**, in dem das Wachstum wieder schneller wird, um neue verfügbare Bandbreite auszunutzen.","Bei jedem ACK, das empfangen wird, berechnet CUBIC anhand seiner kubischen Formel die neue cWnd-Größe.","Kommt es dennoch zu einem Paketverlust, reagiert CUBIC wie TCP Reno: Das Congestion Window wird um einen festen Faktor β (z. B. 0.2) reduziert, um die Überlast zu kompensieren.","Dieses Verhalten sorgt für eine gute Balance zwischen aggressivem Wachstum und Rücksichtnahme auf die Netzwerkbedingungen."],"explanationJa":["TCPモードでない場合、CUBICは独自のキュービック（3次関数）に従って、ACKのたびにcWnd（輻輳ウィンドウ）を増加させます。","この成長は3つの段階に分かれています。最初は**凹型領域（Konkav）**で、cWndはWmax（直前の最大ウィンドウサイズ）に向かって緩やかに成長します。","Wmax付近では**Plateau（平坦部）**に入り、成長が一時的にほぼ停止します。この段階でネットワークの安定を観察します。","その後、ネットワークに余裕があると判断されれば、**凸型領域（Konvex）**へ移行し、cWndは加速的に増加します。","これらの挙動はすべて、時間に対するキュービック関数によって定義され、各ACKの受信時に新しいcWndが計算されます。","パケットロスが検出された場合、CUBICはRenoと同様に、ウィンドウサイズを一定係数β（通常0.2）で減少させます。","この設計により、CUBICは積極的な成長と慎重な制御のバランスを取りながら、ネットワークの混雑を効果的に管理します。"],"originalSlideText":"TCP CUBIC\\n\\n Wenn TCP CUBIC nicht im TCP-Modus ist dann steigt das cWnd mit jedem Acknowlegment (ACK) um\\n❖ Wmax(t + RTT) – cWnd / cWnd\\n\\n Dabei verläuft das cWnd zunächst entlang des konkaven Profils dann rund um Wmax entlang des Plateaus und zuletzt entlang des konvexen Profiles der Wachstumsfunktion\\n\\n Sobald es zu einem Paketverlust kommt wird das cWnd um einen Faktor β verringert","explanationImage":"","questionImage":""},{"id":26,"questionDe":"(s32) Was ist Fast Convergence in TCP CUBIC und welchen Zweck erfüllt es?","questionJa":"TCP CUBICにおけるFast Convergence（高速収束）とは何ですか？それはどのような目的で導入されていますか？","answerDe":["Fast Convergence ist eine Heuristik zur schnelleren Anpassung an neue Netzwerkbedingungen.","Nach einem Paketverlust wird geprüft, ob cWnd < Wmax.","Ist das der Fall, wird Wmax weiter verringert.","Ziel ist es, neuen Flüssen mehr Bandbreite zu ermöglichen."],"answerJa":["Fast Convergenceは、ネットワーク環境の変化に素早く適応するためのヒューリスティックな仕組み。","パケットロス後、現在のcWndがWmaxより小さいかをチェックする。","小さい場合は、Wmaxをさらに下げる。","目的は、新規のTCPフローに公平な帯域を早く割り当てること。"],"explanationDe":["Fast Convergence ist ein Mechanismus in TCP CUBIC, der entwickelt wurde, um neue TCP-Verbindungen fairer in bestehende Netzwerke mit laufendem Datenverkehr einzuführen.","Normalerweise wird Wmax – also das maximale Congestion Window vor dem letzten Verlust – als Referenz für die Wachstumsfunktion verwendet.","Nach einem Paketverlust überprüft CUBIC jedoch, ob das aktuelle cWnd kleiner ist als das vorherige Wmax.","Wenn ja, deutet dies darauf hin, dass eine neue Verbindung begonnen hat, die noch nicht so viel Bandbreite genutzt hat.","Um dieser neuen Verbindung schnelleren Zugang zur verfügbaren Bandbreite zu ermöglichen, reduziert CUBIC den Wert von Wmax.","Dies führt dazu, dass die kubische Wachstumskurve früher und aggressiver steigt, was neuen Flüssen eine schnellere Steigerung ihrer Sendefenster erlaubt.","Der Mechanismus trägt somit zur Fairness bei, indem er verhindert, dass neue Verbindungen dauerhaft durch alte Flows dominiert werden."],"explanationJa":["Fast Convergence（高速収束）は、TCP CUBICにおいて導入されている仕組みで、ネットワークに新たに加わったTCPフローが既存のフローに比べて不利にならないようにすることを目的としています。","通常、TCP CUBICは過去の最大ウィンドウサイズ（Wmax）を基準にウィンドウを成長させます。","しかし、パケットロスが発生した後、現在のcWndがそのWmaxよりも小さい場合、それは新しい接続である可能性があると判断されます。","このような場合、CUBICはWmaxをさらに下げ、次の成長サイクルでより早い段階から急激な成長ができるようにします。","これにより、新しいTCPフローは既存のフローと比べて迅速に帯域を獲得でき、ネットワークの公平性が保たれます。","Fast Convergenceは、長く接続していたセッションが新しいセッションを一方的に支配してしまうことを防ぐ仕組みとして有効です。","この機能は、高速ネットワークでの多接続環境（例：クラウドやデータセンター）で特に重要な役割を果たします。"],"originalSlideText":"Fast Convergence\\n\\n Heuristik, um sich schneller an veränderte Netzwerkbedingungen anzupassen\\n\\n Sobald es zu einem Paketverlust kommt wird das cWnd mit dem vorhergehenden Wmax verglichen\\n\\n Falls das cWnd kleiner ist wird davon ausgegangen, dass ein neuer Datenfluss dem Netzwerk beigetreten ist und es wird mehr Bandbreite freigegeben indem Wmax weiter verringert wird","explanationImage":"","questionImage":""},{"id":27,"questionDe":"(s33) Wie verhalten sich SACK und TCP CUBIC bei einer RTT von 8 ms laut Evaluationsergebnissen?","questionJa":"RTTが8msの条件下で、SACKとTCP CUBICはどのように振る舞うと評価されていますか？","answerDe":["SACK kann bei 8 ms RTT die Bandbreite voll ausnutzen.","CUBIC befindet sich in dieser Situation im TCP-Modus."],"answerJa":["SACKはRTTが8msの環境下で、帯域を十分に活用できる。","この状況では、CUBICはTCPモードで動作している。"],"explanationDe":["Die Evaluation auf der Folie 33 zeigt das Verhalten zweier TCP-Varianten – SACK und CUBIC – bei einer sehr niedrigen Round Trip Time (RTT) von nur 8 Millisekunden.","In solchen Netzwerken mit geringer Verzögerung kann TCP SACK, das auf verlustbasiertes Wachstum setzt, die verfügbare Bandbreite effizient ausschöpfen.","TCP CUBIC hingegen erkennt, dass cWnd < Wtcp(t) ist, und aktiviert daher den TCP-Modus. In diesem Modus wächst das Congestion Window nach der klassischen AIMD-Regel von TCP Reno.","Das bedeutet, dass CUBIC in dieser Situation bewusst konservativ agiert, um nicht unfair aggressiv gegenüber klassischen Flows zu sein.","Da keine hohe RTT oder Überlast vorliegt, bringt der CUBIC-spezifische kubische Wachstumsvorteil in diesem Szenario keinen Vorteil gegenüber SACK.","Somit wird die Performance hauptsächlich durch die klassische TCP-Logik bestimmt, was zeigt, dass CUBIC auch bei niedrigen RTTs gut mit SACK koexistieren kann.","Dieses Verhalten unterstreicht die TCP-Freundlichkeit von CUBIC in nicht-kritischen Netzwerksituationen."],"explanationJa":["スライド33の評価では、RTT（往復時間）が8msという非常に低遅延のネットワークにおけるTCP SACKとTCP CUBICの振る舞いを比較しています。","このような条件下では、従来のTCP SACKでも十分に帯域を活用でき、スループットに問題は見られません。","一方、CUBICはこのとき自動的にTCPモードに移行します。これは、cWndがWtcp(t)よりも小さいと判断されたためであり、CUBICはこの条件下でRenoのような振る舞いをします。","つまり、CUBICは本来のキュービック関数による積極的成長を抑え、TCP Renoと同様のAIMDルールで穏やかに成長します。","そのため、CUBICの特長的な高速成長はここでは見られず、SACKとの性能差もほとんど出ません。","この結果は、CUBICが低RTT環境では他のTCPバージョンと公平に共存できることを示しています。","つまり、CUBICは状況に応じて適切に動作モードを切り替える柔軟性を持っていることがわかります。"],"originalSlideText":"Evaluation\\n\\n SACK und CUBIC Datenübertragung mit 8ms RTT\\n Bei so kleiner RTT kann SACK Bandbreite voll ausnutzen\\n CUBIC agiert dabei in TCP-Modus","explanationImage":"","questionImage":""},{"id":28,"questionDe":"(s34) Wie verhalten sich SACK und TCP CUBIC bei einer RTT von 82 ms laut Evaluation?","questionJa":"RTTが82msの場合、SACKとTCP CUBICはどのように動作し、それぞれどのような違いが評価されていますか？","answerDe":["SACK kann bei 82 ms RTT die Bandbreite nicht mehr vollständig nutzen.","Das Wachstumsmuster von TCP CUBIC ist deutlich sichtbar und effizienter."],"answerJa":["RTTが82msになると、SACKは帯域を完全には活用できなくなる。","この条件では、CUBICの成長関数が効果的に働いていることが確認できる。"],"explanationDe":["Bei höherer RTT (Round Trip Time), hier konkret 82 ms, zeigt sich ein deutlicher Unterschied im Verhalten zwischen TCP SACK und TCP CUBIC.","SACK basiert auf dem klassischen TCP-Modell mit Additive Increase. Bei hohen RTTs ist der Zuwachs des Congestion Windows jedoch sehr langsam, da jeder Schritt von einer RTT abhängt.","Daher gelingt es SACK nicht mehr, die verfügbare Bandbreite effizient zu nutzen, besonders in Hochgeschwindigkeitsnetzen mit hoher Verzögerung.","TCP CUBIC hingegen verwendet eine RTT-unabhängige, kubische Wachstumskurve. Diese erlaubt es, das Congestion Window unabhängig von der RTT kontinuierlich zu steigern.","In dieser Situation kommt CUBIC also voll zur Geltung: Es zeigt seinen typischen Wachstumsverlauf – konkav, Plateau, konvex – und nutzt die Bandbreite deutlich besser aus als SACK.","Das Experiment belegt somit den Vorteil von CUBIC bei langen RTTs, was besonders relevant für internationale Datenverbindungen, Satellitenkommunikation oder VPNs ist.","Es zeigt auch, dass die CUBIC-Funktion gerade dort ihren Nutzen entfaltet, wo klassische TCP-Algorithmen an Effizienzgrenzen stoßen."],"explanationJa":["RTT（往復遅延時間）が82msと高くなると、TCP SACKとTCP CUBICの挙動に明確な違いが現れます。","SACKはAIMD方式に基づいており、1つのRTTごとにウィンドウサイズを少しずつ増やします。そのため、RTTが長いと成長が非常に遅くなります。","この結果、SACKではネットワークの帯域を十分に使いきれず、特に高帯域かつ高遅延な環境では性能が低下します。","一方、CUBICはRTTに依存しないキュービック関数により、より積極的にウィンドウサイズを増加させることができます。","このスライドの評価では、CUBICの特有の成長パターン（凹型→平坦→凸型）が観察され、SACKに比べて明らかに高いスループットを達成しています。","このように、RTTが大きい環境（たとえば国際通信、衛星ネットワーク、VPNなど）では、CUBICの優位性が際立ちます。","本実験は、CUBICが従来のTCPアルゴリズムの限界をどのように克服しているかを実証しています。"],"originalSlideText":"Evaluation\\n\\n Gleiches Experiment mit 82ms RTT\\n SACK ist nicht mehr in der Lage Bandbreite auszunutzen\\n Wachstumsfunktion von CUBIC erkennbar","explanationImage":"","questionImage":""},{"id":29,"questionDe":"(s35) Wie schneiden CUBIC, BIC und HSTCP im Vergleich zu SACK bei der Bandbreitennutzung ab?","questionJa":"CUBIC、BIC、HSTCPは、SACKと比べて帯域の利用効率においてどのような違いを示しましたか？","answerDe":["SACK ist bei hoher RTT weniger effizient.","HSTCP und BIC sind zu aggressiv.","CUBIC nutzt die Bandbreite effektiv, wenn SACK versagt."],"answerJa":["SACKはRTTが高い場合に帯域をうまく活用できない。","HSTCPとBICは帯域を使いすぎる傾向があり、制御が攻撃的すぎる。","CUBICはSACKの限界を超えて、安定して帯域を活用できる。"],"explanationDe":["In der Evaluation werden vier TCP-Varianten hinsichtlich ihrer Fähigkeit verglichen, Bandbreite effizient zu nutzen: SACK, HSTCP (HighSpeed TCP), BIC und CUBIC.","Während SACK in Netzen mit geringer RTT zuverlässig arbeitet, stößt es bei höheren Verzögerungen schnell an seine Grenzen. Die additive Zunahme reicht nicht aus, um die verfügbare Bandbreite auszuschöpfen.","HSTCP und BIC zeigen in der Evaluation eine aggressive Vergrößerung des Congestion Windows, was kurzfristig hohen Durchsatz erzeugt, aber auch die Stabilität des Netzwerks gefährden kann.","Diese Algorithmen neigen dazu, unfair zu sein, da sie mehr Bandbreite beanspruchen als konventionelle TCP-Verbindungen.","CUBIC hingegen gelingt es, Bandbreite effizient zu nutzen, ohne dabei zu aggressiv zu sein. Seine kubische Wachstumskurve erlaubt kontrolliertes, aber effektives Verhalten.","Wenn SACK nachlässt – etwa bei hoher RTT oder leichtem Paketverlust – bleibt CUBIC stabil und leistungsstark.","Dies zeigt, dass TCP CUBIC ein guter Kompromiss zwischen Effizienz, Fairness und Stabilität in verschiedenen Netzwerksituationen bietet."],"explanationJa":["このスライドでは、4種類のTCPアルゴリズム（SACK、HSTCP、BIC、CUBIC）の帯域利用効率を比較しています。","SACKは低RTTの環境では安定していますが、RTTが高くなると成長速度が遅くなり、帯域をうまく活用できません。","HSTCPやBICは、輻輳ウィンドウを急速に増加させる設計になっており、短期的には高いスループットを達成できますが、ネットワークの安定性を損なうリスクも高くなります。","これらのアルゴリズムは、従来のTCPとの共存において公平性を欠く場合があり、既存のフローを圧迫する可能性があります。","一方、CUBICは過度に攻撃的になることなく、安定して帯域を活用できます。キュービック関数に基づく成長により、制御されたウィンドウ拡大が可能です。","特に、SACKが機能しにくい高RTTや軽度なパケットロスの環境において、CUBICは優れたパフォーマンスを示します。","このことから、TCP CUBICは効率、安定性、公平性のバランスを取るうえで非常に優れた選択肢であると評価されています。"],"originalSlideText":"Evaluation\\n\\nSACK vs SACK\\nHigh Speed TCP vs SACK\\nBIC vs SACK\\nCUBIC vs SACK\\n\\nBIC und HSTCP zu aggresiv\\nCUBIC nutzt Bandbreite wenn SACK nachlässt","explanationImage":"","questionImage":""},{"id":30,"questionDe":"(s36) Welche Vorteile bietet TCP CUBIC laut Zusammenfassung und warum ist es heute Standard?","questionJa":"TCP CUBICにはどのような利点がありますか？また、なぜ現在の標準的なアルゴリズムとして広く採用されているのですか？","answerDe":["Geringere Komplexität durch kubische Wachstumsfunktion.","Optimierter Durchsatz, auch bei kurzen RTTs durch TCP-Modus.","Verbesserte Fairness durch Fast Convergence."],"answerJa":["キュービック関数を使うことで、アルゴリズム全体の構造が簡素化されている。","TCPモードにより、短いRTTの環境でも高いスループットを実現できる。","Fast Convergenceにより、新規のTCPフローにも公平な帯域割り当てが行える。"],"explanationDe":["Die Zusammenfassung hebt drei Hauptvorteile von TCP CUBIC hervor, die es zu einem geeigneten Standard für moderne Netzwerke machen.","Erstens: Die Verwendung einer kubischen Wachstumsfunktion ermöglicht eine vergleichsweise einfache Implementierung. Im Gegensatz zu BIC mit vielen Zuständen ist CUBIC strukturell übersichtlicher.","Zweitens: Der TCP-Modus erlaubt es CUBIC, bei niedriger Round Trip Time (RTT) effizient zu arbeiten. Das Fensterwachstum wird in solchen Fällen nicht künstlich gebremst, sondern passt sich adaptiv an.","Drittens: Mit Fast Convergence stellt CUBIC sicher, dass neue TCP-Flows schnell einen fairen Anteil an der Bandbreite erhalten – das verhindert Dominanz durch ältere Verbindungen.","Zusammen bilden diese Eigenschaften ein robustes, flexibles System, das sich in verschiedensten Netzwerkumgebungen – von Mobilfunk bis Rechenzentren – bewährt hat.","CUBIC schafft es, hohe Performance mit Netzwerkfairness und Stabilität zu kombinieren, was es zur idealen Wahl für Betriebssysteme wie Linux, Windows und macOS gemacht hat.","Diese weite Verbreitung ist ein Beleg für die Praxistauglichkeit und den ausgewogenen Kompromiss, den CUBIC zwischen Komplexität und Leistung bietet."],"explanationJa":["このスライドでは、TCP CUBICの主な利点が3つにまとめられています。これらの特長が、CUBICが現在のTCP標準として広く採用されている理由です。","1つ目の利点は、アルゴリズム構造の単純さです。キュービック関数という明確な成長モデルに基づいているため、TCP BICのような複雑な状態遷移がなく、実装が容易です。","2つ目は、短いRTT環境でも高いスループットを維持できる点です。TCPモードにより、必要に応じてクラシックなAIMD制御を使用することで効率的な動作が可能になります。","3つ目は、Fast Convergenceによる公平性の向上です。新しく参加したTCPフローが、既存のフローに圧迫されずに帯域を獲得できる仕組みを備えています。","これらの特徴により、CUBICは携帯回線、企業ネットワーク、クラウド・データセンターなど、さまざまな通信環境に適応できる柔軟性と信頼性を持っています。","高い性能だけでなく、他のTCPフローとの公平な共存が可能であることも、広く支持されている理由の1つです。","こうしたバランスの取れた設計により、CUBICはLinux、Windows、macOSなど主要なOSでデフォルトのTCPアルゴリズムとして採用されています。"],"originalSlideText":"Zusammenfassung CUBIC\\n\\n Geringere Komplexität\\n❖ Kubische Wachstumsfunktion des Congestion Windows erlaubt einfache Implementierung\\n\\n Optimierter Durchsatz\\n❖ TCP-Modus garantiert hohen Durchsatz auch in Netzwerken mit kurzen Round Trip Times\\n\\n Verbesserte Fairness\\n❖ Fast Convergence ermöglicht neuen Datenflüssen sehr schnell einen fairen Anteil der Bandbreite","explanationImage":"","questionImage":""},{"id":31,"questionDe":"(s38) Warum wurde TCP BBR entwickelt und welches Problem soll es im Vergleich zu verlustbasierter Überlastkontrolle lösen?","questionJa":"TCP BBRはなぜ開発されたのですか？従来の損失ベースの輻輳制御と比べて、どのような問題を解決しようとしているのですか？","answerDe":["Verlustbasierte Überlastkontrolle füllt Puffer vor Engpässen und hält sie gefüllt.","Dadurch hängen Pakete in großen Puffern fest → hohe RTT.","BBR ist eine Alternative, die nicht auf Verlust, sondern auf Überlast reagiert."],"answerJa":["損失ベースの輻輳制御では、ネットワークのボトルネック前のバッファが埋まり、保持されたままになる。","その結果、パケットが長時間バッファに留まり、RTT（往復遅延時間）が大きくなる。","BBRはパケットロスではなく、過負荷に直接反応する新しい方式である。"],"explanationDe":["TCP BBR (Bottleneck Bandwidth and Round-trip propagation time) wurde entwickelt, um eine der zentralen Schwächen verlustbasierter Überlastkontrolle zu beheben: das sogenannte Bufferbloat.","Verlustbasierte Protokolle wie TCP Reno oder CUBIC erhöhen die Sendeleistung solange keine Verluste auftreten. Das führt dazu, dass sich vor Engpässen die Puffer füllen.","Diese gefüllten Puffer erhöhen zwar kurzfristig den Durchsatz, verursachen aber gleichzeitig hohe Latenzen, da Pakete lange warten müssen.","In vielen modernen Netzwerken mit großen Puffern (z. B. bei DSL-Routern oder mobilen Access Points) entsteht dadurch eine schlechte Nutzererfahrung, insbesondere bei Echtzeitanwendungen.","BBR verfolgt einen anderen Ansatz: Es bestimmt aktiv die verfügbare Bandbreite (BtlBw) und die minimale RTT (RTprop), um optimal und direkt auf Überlast zu reagieren.","Indem BBR auf tatsächliche Netzcharakteristika statt auf Verluste schaut, kann es hohe RTTs vermeiden und gleichzeitig einen hohen Durchsatz erzielen.","Damit bietet BBR eine Lösung für das Bufferbloat-Problem, das mit klassischen TCP-Verfahren nicht zuverlässig kontrollierbar ist."],"explanationJa":["TCP BBR（Bottleneck Bandwidth and Round-trip propagation time）は、従来の損失ベースTCPの弱点であるBufferbloat（バッファブロート）を解消するために開発されました。","従来のTCP RenoやCUBICなどの損失ベース方式は、パケットロスが発生しない限り送信ウィンドウを増加させます。その結果、ボトルネックの前のバッファが埋まり続けます。","このバッファが満杯になると、パケットはそこで長時間待たされ、RTT（往復遅延時間）が大幅に増加します。これは音声通話やオンラインゲームなどリアルタイム性が要求されるアプリケーションに悪影響を与えます。","特に、安価な家庭用ルーターやモバイル環境などで大きなバッファを持つネットワーク機器が使われている場合に、Bufferbloatは顕著になります。","BBRはこの問題に対し、パケットロスではなく、ネットワークの特性（ボトルネック帯域幅や最小RTT）を直接観測して制御するアプローチを採用しています。","その結果、送信レートを最適化しつつ、バッファにパケットが長時間滞留することを防ぎ、低遅延かつ高スループットを実現します。","つまりBBRは、既存のTCP制御方式では根本的に解決できなかったBufferbloat問題に対する実用的な解決策を提供します。"],"originalSlideText":"TCP BBR\\n\\n Wiederholung zum Aufblähen des Puffers „Bufferbloat“\\n❖ Verlustbasierte Überlastkontrolle füllt Pufferspeicher vor Engpasskomponenten einer Verbindung und lässt Puffer gefüllt\\n❖ In großen Puffern hängen Pakete besonders lange fest und es kommt zu hohen Latenzen und daraus folgend hoher RTT\\n\\n BBR ist eine Alternative zu verlustbasierten Überlastkontrollen","explanationImage":"","questionImage":""},{"id":32,"questionDe":"(s39) Wo wird TCP BBR bereits eingesetzt und welche Weiterentwicklungen (BBR v2, v3) sind geplant oder in Entwicklung?","questionJa":"TCP BBRは現在どこで使われていますか？また、BBR v2やv3などの後継バージョンにはどのような特徴がありますか？","answerDe":["TCP BBR wird von Google im WAN verwendet.","Einsatz bei google.com Websuche und YouTube über QUIC/HTTP3.","BBR v2 reagiert zusätzlich auf ECN.","BBR v3 nutzt maschinelles Lernen zur Bestimmung der Netzwerkbedingungen (noch in Entwicklung)."],"answerJa":["TCP BBRはGoogleのWANネットワークで使用されている。","google.comの検索やYouTubeの動画配信において、QUICやHTTP/3経由で導入されている。","BBR v2はECN（Explicit Congestion Notification）への対応が追加されている。","BBR v3では機械学習を用いてネットワーク状態を判断しようとする（現在開発中）。"],"explanationDe":["TCP BBR wurde ursprünglich von Google entwickelt und ist bereits produktiv im Einsatz – insbesondere in Googles weltweitem WAN (Wide Area Network).","Ein konkreter Anwendungsfall ist die Websuche auf google.com sowie das Streaming von YouTube-Videos, wo BBR über das QUIC-Protokoll in HTTP/3 integriert ist.","Damit zeigt sich, dass BBR nicht nur theoretisch wirksam ist, sondern auch in großmaßstäblichen produktiven Umgebungen robust funktioniert.","Darüber hinaus wird BBR stetig weiterentwickelt. Die **Version 2 (BBR v2)** integriert zusätzlich Reaktionen auf ECN-Bits (Explicit Congestion Notification), um sanftere Rückmeldungen aus dem Netzwerk zu nutzen.","In **BBR v3** geht man noch weiter: Hier kommen maschinelle Lernverfahren zum Einsatz, um Netzwerkbedingungen dynamisch zu modellieren und darauf zu reagieren.","Ziel ist es, die Steuerung noch besser auf reale, variable Netzwerkeigenschaften abzustimmen – etwa in Mobilfunknetzen oder stark ausgelasteten Backbone-Infrastrukturen.","Diese Entwicklungen zeigen, dass TCP BBR als Plattform für zukunftsweisende Überlastkontrolle dient, die weit über klassische Ansätze hinausgeht."],"explanationJa":["TCP BBRはGoogleによって開発され、既に同社の広域ネットワーク（WAN）で本格的に運用されています。","具体的な利用例としては、google.comでのWeb検索やYouTube動画のストリーミングであり、QUICやHTTP/3を通じてBBRが使われています。","これは、BBRが単なる研究用プロトコルではなく、商用環境で信頼性の高い輻輳制御として採用されていることを意味します。","さらにBBRは進化を続けており、**BBR v2**ではECN（Explicit Congestion Notification）による過負荷通知に対応し、パケットロスに頼らず混雑を判断する能力が強化されています。","続く**BBR v3**では、機械学習アルゴリズムを導入し、ネットワークの状態をより動的かつ精密にモデル化する試みが進められています（2025年時点で開発中）。","これにより、たとえば携帯ネットワークやクラウド基盤など、変動の激しい環境でも適応的な制御が可能になります。","BBRは、従来のTCPアルゴリズムでは困難だった制御を、よりインテリジェントかつ効率的に行う次世代プロトコルの中核となる存在です。"],"originalSlideText":"TCP BBR\\n\\n TCP BBR wird bereits im WAN von Google verwendet\\n TCP BBR wird zum Teil für die google.com Websuche sowie das Abspielen von YouTube Videos genutzt mithilfe von QUIC in HTTP/3\\n Weitere Versionen von BBR werden entwickelt\\n BBR v2 reagiert zusätzlich auf ECN\\n BBR v3 nutzt maschinelle Lernverfahren, um Netzwerkbedingungen zu bestimmen, ist jedoch noch in der Entwicklung","explanationImage":"","questionImage":""},{"id":33,"questionDe":"(s40) Welche drei Begriffe sind grundlegend für TCP BBR und wie werden sie definiert?","questionJa":"TCP BBRにおいて重要な3つの用語（BtlBw、RTprop、BDP）は何ですか？それぞれどのように定義されますか？","answerDe":["Bottleneck Bandwidth (BtlBw): Engpassbandbreite – die kleinste Bandbreite auf dem Verbindungspfad.","Round Trip Propagation Time (RTprop): RTT ohne Verzögerungen oder Verarbeitung.","Bandwidth Delay Product (BDP): maximale Datenmenge auf dem Pfad ohne Überlast = BtlBw × RTprop."],"answerJa":["Bottleneck Bandwidth（BtlBw）：通信経路上で最も狭い帯域幅（ボトルネック）のこと。","Round Trip Propagation Time（RTprop）：遅延や処理時間を除いた純粋なRTT（伝播時間）。","Bandwidth Delay Product（BDP）：過負荷なしでパス上に保持できる最大データ量＝BtlBw × RTprop。"],"explanationDe":["Um TCP BBR zu verstehen, muss man drei fundamentale Begriffe kennen: **BtlBw**, **RTprop** und **BDP**.","**Bottleneck Bandwidth (BtlBw)** ist die Engpassbandbreite in einem Netzwerkpfad – also der Abschnitt mit der geringsten verfügbaren Kapazität. Sie bestimmt maßgeblich, wie viel Daten übertragen werden können.","**RTprop (Round Trip Propagation Time)** beschreibt die reine Signallaufzeit für eine Hin- und Rückverbindung ohne Einfluss von Warteschlangen oder Verarbeitung. Sie stellt die untere Grenze der RTT dar.","**BDP (Bandwidth Delay Product)** ist das Produkt aus BtlBw und RTprop. Es beschreibt die maximale Menge an Daten, die sich gleichzeitig im Netzwerkpfad befinden können, ohne dass es zu Überlast kommt.","Diese drei Werte bilden das Fundament für die Steuermechanismen von BBR. Statt auf Paketverlust zu warten, versucht BBR aktiv, BtlBw und RTprop zu messen und die Sendeleistung daran auszurichten.","Wenn BBR z. B. die RTT steigen sieht, überprüft es, ob dies durch tatsächliche Netzwerküberlast oder veränderte Bedingungen geschieht – mit Hilfe dieser Größen.","Daher ist ein genaues Verständnis dieser Begriffe entscheidend, um BBRs Verhalten nachvollziehen zu können."],"explanationJa":["TCP BBRの動作を理解するためには、**BtlBw（ボトルネック帯域幅）**、**RTprop（往復伝播時間）**、**BDP（帯域遅延積）**という3つの概念を把握する必要があります。","**BtlBw（Bottleneck Bandwidth）**とは、通信経路上でもっとも狭い帯域幅、つまりデータが最も通りにくい箇所のことです。ここが通信速度の上限を決める要素となります。","**RTprop（Round Trip Propagation Time）**は、送信元から宛先までの往復にかかる時間のうち、キューの待ち時間やパケット処理時間などを除いた純粋な伝播時間を指します。","**BDP（Bandwidth Delay Product）**は、BtlBw × RTprop によって求められ、そのネットワークパス上で過負荷を起こさずに保持できる最大のデータ量を表します。","BBRはこれらの値を積極的に測定し、RTTやロスを待つことなく、送信レートの最適化を図ることができます。","たとえばRTTが急に上がった場合、BBRはそれが伝播遅延の変化によるのか、あるいは混雑の結果なのかをRTpropなどの指標を使って見極めようとします。","このように、BtlBw、RTprop、BDPの理解は、BBRの判断ロジックを理解する上で不可欠な基礎知識です。"],"originalSlideText":"Begriffsklärung\\n\\n Die Bandbreite am Flaschenhals (Link mit kleinster Bandbreite auf dem Verbindungspfad)\\n❖ Bottleneck Bandwidth (BtlBw)\\n\\n Round Trip Time ohne Störungen oder Verarbeitungszeit\\n❖ Round Trip Propagation Time (RTprop)\\n\\n Maximale Menge an Daten, welche über den Verbindungspfad übertragen werden können ohne dass Überlast auftritt\\n❖ Bandwidth Delay Product (BDP = BtlBw ⋅ RTprop)","explanationImage":"","questionImage":""},{"id":34,"questionDe":"(s41) Was beschreibt Kleinrocks optimaler Arbeitspunkt im Kontext der Überlastkontrolle?","questionJa":"Kleinrockの最適動作点とは輻輳制御において何を意味しますか？","answerDe":["Senderate = Bandwidth Delay Product (BDP) ist optimal.","Maximale Auslastung der Bandbreite bei minimaler Verzögerung und ohne Paketverlust.","Ziel: effiziente Nutzung der Ressourcen ohne Überlast."],"answerJa":["送信レートをBDP（帯域遅延積）に一致させることが最適とされる。","これにより、帯域を最大限に活用しつつ、遅延やパケットロスを最小限に抑えられる。","目標は、リソースを効率よく使いながら過負荷を回避することである。"],"explanationDe":["Leonard Kleinrock stellte bereits 1979 fest, dass es einen optimalen Arbeitspunkt im Netzwerkbetrieb gibt, bei dem eine Verbindung ihre Bandbreite effizient nutzt, ohne das Netz zu überlasten.","Dieser Punkt wird erreicht, wenn die Senderate exakt dem Bandwidth Delay Product (BDP = BtlBw × RTprop) entspricht.","In diesem Fall können Pakete kontinuierlich gesendet werden, ohne Warteschlangen aufzubauen, wodurch Verzögerungen und Paketverluste vermieden werden.","Das Netzwerk ist in diesem Zustand ideal ausgelastet: nicht unterfordert (ineffizient), aber auch nicht überlastet (instabil).","Diese Idee ist zentral für das Design von BBR, das explizit versucht, diesen optimalen Punkt durch direkte Messung von BtlBw und RTprop zu treffen.","Die Schwierigkeit besteht darin, dass sich dieser Punkt dynamisch verändert, z. B. durch neue Verbindungen oder Netzumschaltungen.","Deshalb benötigt BBR Mechanismen, um kontinuierlich zu messen und sich an veränderte Bedingungen anzupassen."],"explanationJa":["Leonard Kleinrockは1979年に、ネットワーク通信において『最適な動作点（Arbeitspunkt）』が存在することを理論的に示しました。","この最適点とは、送信レートが帯域遅延積（BDP = BtlBw × RTprop）と一致する点を指します。","このとき、パケットはネットワーク内を滞りなく流れ、キューが発生せず、遅延やロスも最小限になります。","つまり、ネットワークは過負荷にもならず、リソースを無駄にすることもない、理想的な状態です。","TCP BBRは、この最適動作点を目標として設計されており、BtlBw（ボトルネック帯域幅）とRTprop（最小RTT）を測定しながら、この点に近づこうとします。","ただし、この最適点はネットワーク条件に応じて常に変化するため、BBRはそれに動的に対応する必要があります。","この理論は、BBRが単なるロス検出ではなく、ネットワーク全体の構造と性質を考慮したスマートな制御を目指している理由を裏付けるものです。"],"originalSlideText":"Kleinrocks optimaler Arbeitspunkt\\n\\n 1979 hat Leonard Kleinrock gezeigt das eine Senderate gleich dem BDP optimal die zur Verfügung stehende Bandbreite ausnutzt und Verzögerungen, sowie Paket Verluste minimiert","explanationImage":"","questionImage":""},{"id":35,"questionDe":"(s42) Warum ist es schwierig, den optimalen Betriebspunkt nach Kleinrock im realen Netzwerkbetrieb exakt zu bestimmen?","questionJa":"現実のネットワーク環境において、Kleinrockの最適動作点を正確に特定するのが難しいのはなぜですか？","answerDe":["RTT-Anstieg kann verschiedene Ursachen haben:","1. Längerer Verbindungspfad.","2. Reduzierte Bandbreite an einem Engpass.","3. Neue Flows, die Router-Puffer füllen.","Lösung: langfristige Beobachtung der Verbindung."],"answerJa":["RTTの上昇には複数の原因があるため。","1. 経路の物理的な長さが変わる。","2. ボトルネックの帯域幅が狭くなる。","3. 新たなフローが参入し、ルータのバッファが埋まる。","解決策としては、接続を長期間にわたり観察すること。"],"explanationDe":["Obwohl Kleinrock theoretisch einen klaren optimalen Arbeitspunkt definiert (Senderate = BDP), ist es in der Praxis schwierig, diesen exakt zu identifizieren.","Der Hauptgrund ist, dass ein Anstieg der Round Trip Time (RTT) auf verschiedene Ursachen zurückzuführen sein kann – nicht nur auf eine tatsächliche Überlast.","Beispielsweise kann die RTT steigen, weil sich der physische Pfad verlängert hat, z. B. durch Routing-Änderungen.","Ebenso kann die effektive Bandbreite eines Engpasses reduziert worden sein – etwa durch wechselnde Mobilfunkbedingungen oder Hintergrundverkehr.","Außerdem können neu gestartete Datenflüsse die Puffer an Routern füllen, was ebenfalls zu erhöhter RTT führt, obwohl die ursprüngliche Verbindung selbst unverändert blieb.","Deshalb reicht es nicht, eine einzige RTT-Messung als Indikator für Überlast zu nehmen – vielmehr muss das Verhalten der Verbindung über längere Zeit beobachtet werden.","BBR begegnet diesem Problem durch kontinuierliche Messung und regelmäßige Zustandswechsel (z. B. ProbeRTT), um solche Ursachen voneinander zu unterscheiden."],"explanationJa":["Kleinrockの理論では、BDPと一致する送信レートが最適とされますが、実際のネットワークではその最適点を特定するのが難しいという課題があります。","その大きな理由は、RTT（往復遅延時間）の増加が単一の原因から来るとは限らず、複数の要因が絡んでいる可能性があるためです。","たとえば、RTTが増加する原因には、①ルート変更により通信経路が長くなった、②ネットワークのボトルネックが変化して帯域が狭くなった、③新しい通信フローが増えてルーターのバッファが埋まった、などがあります。","これらの違いをRTTの値だけから見分けるのは非常に難しく、単発の測定では正確な判断ができません。","そのため、BBRでは接続の状態を長期間かつ継続的に観察することが必要になります。","この観察を通じて、本当にネットワークが混雑しているのか、それとも一時的な変化なのかを見極める必要があります。","このような判断力を高めるために、BBRはProbeRTTモードなどの周期的な測定機能を持ち、原因の切り分けを可能にしています。"],"originalSlideText":"Kleinrocks optimaler Betriebspunkt\\n\\n Warum war es nicht möglich der optimalen Betriebspunkt für das BDP zu bestimmen?\\n\\n Gründe für den Anstieg der RTT nicht eindeutig\\n1. Verbindungspfad wird länger\\n2. Bandbreite der Engpasskomponente wird kleiner\\n3. Neue Datenübertragungen füllen Puffer im Router\\n\\n Lösung\\n❖ Verbindung über eine längere Zeit beobachten","explanationImage":"","questionImage":""},{"id":36,"questionDe":"(s43) Wie steuert TCP BBR die Senderate und welche Messwerte nutzt es dazu?","questionJa":"TCP BBRはどのように送信レートを制御しますか？そのためにどのような測定値を使用していますか？","answerDe":["BBR bestimmt die Bottleneck Bandwidth (BtlBw).","BBR misst die Round-trip propagation time (RTprop).","BBR reagiert auf Überlast basierend auf BtlBw und RTprop, nicht auf Paketverlust.","Ergebnis: hoher Durchsatz, Stabilität und Fairness."],"answerJa":["BBRはボトルネック帯域幅（BtlBw）を測定する。","また、往復伝播時間（RTprop）も同時に測定する。","パケットロスではなく、BtlBwとRTpropに基づいて輻輳や過負荷を判断して送信レートを制御する。","これにより、高スループット・安定性・公平性が実現される。"],"explanationDe":["Im Gegensatz zu klassischen TCP-Varianten, die Überlast durch Paketverlust erkennen, nutzt BBR eine proaktive Strategie auf Basis direkter Messwerte.","Zentral sind zwei Parameter: **Bottleneck Bandwidth (BtlBw)**, also die verfügbare Kapazität am Engpass, und **Round-trip propagation time (RTprop)**, die minimale RTT ohne Staus.","BBR passt die Senderate so an, dass sie möglichst genau dem Bandwidth Delay Product (BDP = BtlBw × RTprop) entspricht – also der optimalen Rate laut Kleinrock.","Durch kontinuierliche Schätzungen dieser beiden Größen erkennt BBR frühzeitig Überlastsituationen und reduziert die Senderate entsprechend, noch bevor es zu Paketverlusten kommt.","Auf diese Weise hält BBR die Puffer vor Engpässen leer oder nur minimal gefüllt, was zu niedriger Latenz führt.","Gleichzeitig kann BBR durch diese Strategie einen hohen Durchsatz erreichen, da es die verfügbare Kapazität effizient ausschöpft.","Diese Messwert-basierte Steuerung erlaubt zudem eine faire Verteilung der Bandbreite, da neue Flows schnell reagieren können, ohne bestehende Verbindungen zu stören."],"explanationJa":["従来のTCPアルゴリズムは、ネットワークの混雑をパケットロスによって検出していましたが、BBRはまったく異なるアプローチを取っています。","BBRが中心に据える2つの測定値は、**Bottleneck Bandwidth（BtlBw）**と**Round-trip propagation time（RTprop）**です。","BtlBwは通信経路上で最も狭い帯域幅（ボトルネック）を、RTpropは混雑のない最小の往復伝播時間を意味します。","BBRはこれらの値を元にして、送信レートを **BDP（= BtlBw × RTprop）** に近づけるように制御します。","このようにして、パケットロスが起こる前にネットワークの輻輳を予測し、送信レートを調整することが可能です。","その結果、バッファは満杯にならず、遅延も抑えられたまま高いスループットが維持されます。","また、BBRはこの仕組みにより、新しいフローとの公平性を保ちながら、効率よくリソースを活用できるよう設計されています。"],"originalSlideText":"TCP BBR\\n\\n Google entwirft Überlastkontrolle und bestimmt dafür\\n❖ Bottleneck Bandwidth, BtlBw\\n❖ Round-trip propagation time, RTprop\\n\\n BBR reagiert auf Überlast anstatt auf Paketverlust und erzielt somit einen hohen Durchsatz, Stabilität und Fairness","explanationImage":"","questionImage":""},{"id":37,"questionDe":"(s44) Welche drei Zustände kann eine TCP BBR-Verbindung annehmen und wie werden sie unterschieden?","questionJa":"TCP BBR接続にはどのような3つの送信状態がありますか？それぞれどのように区別されますか？","answerDe":["App-limited: Anwendung sendet weniger Daten als möglich, RTT = RTprop.","Bandwidth-limited: Bandbreite ist ausgelastet, RTT steigt um 1 / BtlBw.","Buffer-limited: Puffer ist vollständig gefüllt, hohe RTT."],"answerJa":["アプリケーション制限（app-limited）：アプリが送るデータが少なく、RTT = RTprop。","帯域制限（bandwidth-limited）：帯域がフルで使われており、RTTが1 / BtlBwだけ増加する。","バッファ制限（buffer-limited）：バッファが満杯で、RTTが大きくなる。"],"explanationDe":["BBR analysiert während des Verbindungsbetriebs kontinuierlich, in welchem Zustand sich die Verbindung befindet. Drei Hauptzustände werden unterschieden:","**1. App-limited**: Die Anwendung auf dem Sender liefert nur begrenzt Daten – unabhängig davon, wie viel Bandbreite verfügbar ist. In diesem Fall bleibt die RTT bei RTprop, da das Netz nicht ausgelastet ist.","**2. Bandwidth-limited**: Die verfügbare Bandbreite ist vollständig genutzt. Ein Anstieg der RTT um 1 / BtlBw deutet darauf hin, dass die Leitung voll ist, aber es kommt noch nicht zu Warteschlangen.","**3. Buffer-limited**: Der Puffer vor dem Engpass ist gefüllt, wodurch die RTT stark ansteigt. Das deutet auf beginnendes Bufferbloat hin.","Diese Zustände helfen BBR dabei, korrekt zu interpretieren, ob ein RTT-Anstieg durch echte Überlast, Applikationsverhalten oder temporäre Netzbedingungen verursacht wird.","Nur durch die Differenzierung dieser Zustände kann BBR gezielt Maßnahmen ergreifen – etwa die Senderate reduzieren oder unverändert lassen.","Das Verständnis dieser Zustände ist entscheidend für die Effizienz und Fairness von BBR im dynamischen Netzwerkbetrieb."],"explanationJa":["BBRでは、接続中にネットワークがどのような状態にあるかを3つの主な送信状態に分類して判断します。","**1. アプリケーション制限（app-limited）**：アプリケーション側が少量のデータしか送らない状態で、ネットワークにはまだ余裕があります。RTTはRTprop（伝播時間）と等しくなります。","**2. 帯域制限（bandwidth-limited）**：利用可能な帯域がすべて使われている状態です。RTTはわずかに増加し、1 / BtlBw 程度の遅延が観測されますが、まだバッファはあふれていません。","**3. バッファ制限（buffer-limited）**：ネットワークのボトルネックにあるバッファが満杯になり、RTTが大きく上昇します。Bufferbloatの兆候です。","BBRはこのように状態を分類することで、RTTの増加が何によるものかを正確に判断し、送信レートの調整など適切な対応ができます。","状態を誤って解釈すると、不必要に送信を制限したり、逆に輻輳を悪化させる可能性があるため、正確な分類は極めて重要です。","このような細かな判断を通じて、BBRは動的なネットワーク状況においても高い効率と公平性を維持します。"],"originalSlideText":"TCP BBR\\n\\n Anwendung sendet weniger Daten als Bandbreite zulässt\\n❖ RTT = RTprop\\n❖ „app limited“\\n\\n Bandbreite ausgelastet\\n❖ Anstieg RTT um 1/BtlBw\\n❖ „bandwidth limited“\\n\\n Puffer vollständig gefüllt\\n❖ „buffer limited“","explanationImage":"","questionImage":""},{"id":38,"questionDe":"(s45) Wann ist die Bandbreite in TCP BBR vollständig ausgenutzt und was bedeutet delivery rate = BtlBw?","questionJa":"TCP BBRにおいて帯域幅が完全に活用されている状態とはどのようなものですか？また、delivery rate = BtlBw とはどういう意味ですか？","answerDe":["Wenn delivery rate = BtlBw, ist die Bandbreite voll ausgenutzt.","Der Sender überträgt so schnell, wie es der Engpass erlaubt.","Dies ist ein Zeichen für effizienten Betrieb ohne Überlast."],"answerJa":["delivery rate（配信レート）がBtlBw（ボトルネック帯域）と一致しているとき、帯域は最大限に活用されている。","送信側がネットワークのボトルネックの限界まで効率的にデータを送信している状態。","この状態は、過負荷なく高効率な通信ができていることを示す。"],"explanationDe":["In TCP BBR bezeichnet die delivery rate die tatsächliche Datenmenge, die erfolgreich beim Empfänger ankommt – pro Zeiteinheit.","Die Bottleneck Bandwidth (BtlBw) ist die maximale Rate, mit der der langsamste Abschnitt der Verbindung (der Engpass) Daten durchlassen kann.","Wenn die delivery rate gleich der BtlBw ist, bedeutet das, dass der Sender exakt so schnell überträgt, wie das Netzwerk es zulässt – also optimal.","In diesem Zustand wird die Bandbreite effizient genutzt, ohne dass Warteschlangen oder Paketverluste entstehen.","Wird dagegen langsamer gesendet als BtlBw, ist die Verbindung app-limited oder unterausgelastet.","Wird schneller gesendet als BtlBw, kann es zu Pufferauslastung und Verzögerungen kommen – ein Zeichen von ineffizientem Verhalten.","Daher ist delivery rate = BtlBw ein zentraler Zielwert für BBR, da er zeigt, dass die Verbindung optimal betrieben wird."],"explanationJa":["TCP BBRにおいて、delivery rate（配信レート）は、受信側に単位時間あたりで実際に届いているデータ量を表します。","一方、BtlBw（ボトルネック帯域幅）は、通信経路上でもっとも狭い箇所が処理できる最大のデータ転送速度を意味します。","この2つが一致しているということは、送信側がネットワークの許容量いっぱいまで効率よくデータを送っており、かつ混雑やバッファの詰まりも発生していない理想的な状態です。","逆に、delivery rateがBtlBwより低い場合はアプリケーションが制限要因になっている（app-limited）か、通信経路が十分に使われていない可能性があります。","逆にdelivery rateがBtlBwを超えようとすると、ネットワークはそれを受けきれずバッファに溜まり、遅延やロスが発生する原因となります。","したがって、BBRはdelivery rate = BtlBwの状態を目指して送信レートを調整し、帯域を効率よく使いつつ遅延を最小限に抑えようとしています。","この一致こそが、BBRの制御が正しく行われている証拠となります。"],"originalSlideText":"TCP BBR\\n\\n Wird die Bandbreite voll ausgenutzt\\n❖ delivery rate = BtlBw","explanationImage":"","questionImage":""},{"id":39,"questionDe":"(s46) Warum können RTprop und BtlBw in TCP BBR nicht gleichzeitig bestimmt werden und was bedeutet der optimale Zustand?","questionJa":"TCP BBRでは、RTpropとBtlBwを同時に測定できないのはなぜですか？また、最適状態とはどういう意味ですか？","answerDe":["RTprop kann nur bei minimaler Last gemessen werden.","BtlBw kann nur bei maximaler Auslastung bestimmt werden.","Daher ist eine gleichzeitige Bestimmung beider Werte unmöglich.","Im optimalen Zustand wird delivery rate = BtlBw erreicht, ohne dass Puffer gefüllt sind."],"answerJa":["RTprop（最小伝播時間）は、ネットワーク負荷がほとんどないときにしか測定できない。","BtlBw（ボトルネック帯域幅）は、帯域が十分に使われているときでなければ測定できない。","この2つの条件は同時に満たされないため、両方を一度に測定するのは不可能である。","最適状態とは、delivery rateがBtlBwに一致し、バッファが溜まっていない状態である。"],"explanationDe":["TCP BBR stützt sich auf die Schätzung von zwei Größen: der Bottleneck Bandwidth (BtlBw) und der Round-trip propagation time (RTprop).","Die Schwierigkeit besteht darin, dass beide Werte unter gegensätzlichen Bedingungen zuverlässig gemessen werden können:","RTprop – also die minimale RTT ohne Queuing – kann nur in Phasen sehr geringer Auslastung beobachtet werden, da nur dann keine zusätzlichen Verzögerungen auftreten.","BtlBw – die maximale Bandbreite – kann dagegen nur unter hoher Auslastung zuverlässig bestimmt werden, da der Engpass dann voll beansprucht wird.","Diese Gegensätzlichkeit bedeutet, dass beide Messwerte nicht gleichzeitig exakt erfasst werden können.","Der \'optimale Zustand\' ist dennoch das Ziel: Die delivery rate entspricht der BtlBw, ohne dass sich Warteschlangen (Puffer) aufbauen – also maximale Effizienz bei minimaler Latenz.","BBR nähert sich diesem Punkt iterativ, indem es Phasen mit niedriger Last (für RTprop) und hoher Last (für BtlBw) im Wechsel nutzt."],"explanationJa":["TCP BBRは、BtlBw（ボトルネック帯域幅）とRTprop（最小伝播時間）という2つの重要なネットワーク指標をもとに制御を行います。","しかし、この2つは互いに矛盾する条件下でしか正確に測定できないというジレンマがあります。","RTpropは、バッファに待ちが発生していない、つまりネットワークにほとんど負荷がかかっていない状態でしか観測できません。","一方でBtlBwは、帯域が飽和している（フルに使われている）ときにしか信頼できる測定ができません。","そのため、RTpropとBtlBwを同時に正確に求めることは現実的には不可能です。","それでもBBRは、**最適状態（optimaler Zustand）**、すなわちバッファが溜まらず、delivery rateがBtlBwに一致する状態を目指して制御を行います。","このために、BBRは低負荷と高負荷のフェーズを交互に挿入し、それぞれの測定タイミングを分けて最適化を行う戦略をとっています。"],"originalSlideText":"TCP BBR\\n\\n RTprop und BtlBw können nie zur gleichen Zeit bestimmt werden\\n\\nOptimaler Zustand\\n\\nVerlustbasierte Überlastkontrollen\\n\\narbeiten hier","explanationImage":"","questionImage":""},{"id":40,"questionDe":"(s47) Wie bestimmt TCP BBR RTprop und BtlBw konkret im laufenden Betrieb?","questionJa":"TCP BBRは運用中にどのようにしてRTpropとBtlBwを具体的に測定しますか？","answerDe":["RTT zum Zeitpunkt t = RTprop + ηt (Störungen).","ηt ≥ 0 umfasst z. B. Wartezeit im Puffer oder Verarbeitung.","RTprop wird als Minimum aller beobachteten RTTt bestimmt.","BtlBw wird als Maximum der delivery rate bestimmt."],"answerJa":["時刻tのRTTは、RTpropとηt（バッファ遅延や処理時間など）を加えたものとされる。","ηtは0以上の値で、混雑や遅延要因を含む。","RTpropは観測されたすべてのRTTの中から最小値として推定される。","BtlBwは、観測された配信レート（delivery rate）の最大値として推定される。"],"explanationDe":["BBR schätzt RTprop und BtlBw nicht durch direkte Messung zu einem bestimmten Zeitpunkt, sondern durch kontinuierliche statistische Beobachtung über Zeit.","Die aktuelle RTT zu einem Zeitpunkt t wird als: RTTₜ = RTprop + ηₜ formuliert.","Dabei steht ηₜ für zusätzliche Verzögerungseinflüsse wie Warteschlangen in Routern, Verarbeitungslatenz am Empfänger oder Rückstau von ACKs.","Da ηₜ ≥ 0 ist, kann RTprop als **Minimum aller beobachteten RTTs** interpretiert werden: min(RTTₜ) ≈ RTprop.","Analog wird die Bottleneck Bandwidth (BtlBw) als **Maximum der delivery rate** über einen Zeitbereich angenommen: max(delivery rateₜ).","Diese Strategien erlauben es BBR, verlässliche Schätzwerte zu gewinnen, ohne auf explizite Rückmeldungen vom Netzwerk angewiesen zu sein.","Durch diesen Ansatz ist BBR in der Lage, sich dynamisch an wechselnde Netzbedingungen anzupassen – auch in Mobilfunk- oder Shared-Media-Umgebungen."],"explanationJa":["BBRでは、RTpropとBtlBwを一時的に測定するのではなく、通信中に継続的に観測されたデータから統計的に推定します。","ある時刻tでのRTTは、RTTₜ = RTprop + ηₜ という形で表現されます。","ηₜは、バッファの待ち時間、パケット処理時間、ACKの遅延などによる追加の遅延成分を表し、0以上の値になります。","RTpropは、この式からすべてのRTTの中で**最小値**を取ったものとして推定されます（RTprop ≈ min(RTTₜ)）。","一方、BtlBwは、過去に観測された配信レート（delivery rateₜ）の中から**最大値**を選ぶことで推定されます（BtlBw ≈ max(delivery rateₜ)）。","このような最小・最大ベースの手法により、BBRは外部のシグナル（ECNやパケットロス）に頼らず、自己完結的にネットワーク状態を把握できます。","結果として、動的に変化するネットワーク環境（例：モバイル通信や共有回線）でも柔軟に対応できる設計になっています。"],"originalSlideText":"TCP BBR\\n\\n Bestimmen von RTprop\\n\\n Zum Zeitpunkt t ist RTTt = RTprop + ηt  \\n\\n ηt ≥ 0 entspricht Störungen (z.B. Wartezeit im Pufferspeicher der Router, Verarbeitungszeit des Pakets am Empfänger oder Anhäufung von Acknowledgement’s)\\n\\n෣𝑅𝑇𝑝𝑟𝑜𝑝 = 𝑅𝑇𝑝𝑟𝑜𝑝 + min(ηt ) = min(RTTt)\\n\\n Bestimmen von BtlBw\\n\\n෣𝐵𝑡𝑙𝐵𝑤  = 𝑚𝑎𝑥(𝑑𝑒𝑙𝑖𝑣𝑒𝑟𝑦 𝑅𝑎𝑡𝑒t)","explanationImage":"","questionImage":""},{"id":41,"questionDe":"(s48) Welche Zustände nutzt TCP BBR zur Ermittlung von BtlBw und RTprop und wie funktionieren ProbeBW und ProbeRTT?","questionJa":"TCP BBRはBtlBwとRTpropを求めるためにどのような状態を使用しますか？ProbeBWとProbeRTTの仕組みを説明してください。","answerDe":["ProbeBW: Senderate wird zyklisch erhöht (>1) und dann kurzzeitig verringert (<1), um BtlBw zu bestimmen.","ProbeRTT: Wenn lange kein neues RTprop beobachtet wurde, wird Senderate auf 4 Pakete für 1 RTT reduziert.","Danach kehrt BBR in vorherigen Zustand zurück.","RTprop und BtlBw haben ein Timeout und müssen regelmäßig erneuert werden."],"answerJa":["ProbeBW：送信レートを周期的に増加（>1）させた後、短時間だけ減少（<1）させることでBtlBwを推定する。","ProbeRTT：一定期間RTpropの更新がない場合、1 RTTの間、送信を4パケットに制限してRTpropを再測定する。","測定後は元の状態に戻る。","RTpropとBtlBwは時間経過で期限切れになるため、定期的な再測定が必要。"],"explanationDe":["BBR verwendet zwei spezielle Zustände, um regelmäßig aktuelle Netzwerkcharakteristika zu ermitteln: **ProbeBW** und **ProbeRTT**.","Im Zustand **ProbeBW** erhöht BBR die Senderate in zyklischen Intervallen leicht über den zuletzt geschätzten Wert (>1×), um zu testen, ob mehr Bandbreite verfügbar ist.","Anschließend wird die Rate kurzzeitig unter das aktuelle Niveau gesenkt (<1×), um eventuell entstandene Warteschlangen aufzulösen.","Dieser zyklische Wechsel erlaubt es, die maximal verfügbare Bandbreite (BtlBw) präzise zu bestimmen, ohne dauerhaft das Netzwerk zu überlasten.","Im Zustand **ProbeRTT** überprüft BBR, ob über längere Zeit kein neuer Minimalwert für die RTT (RTprop) gemessen wurde.","In diesem Fall wird die Senderate für etwa 1 RTT lang stark reduziert (auf 4 Pakete), um Warteschlangen zu umgehen und ein neues RTprop zu ermitteln.","Beide Zustände arbeiten zusammen, um sicherzustellen, dass BBR auf aktuelle Netzbedingungen angepasst bleibt – da sich BtlBw und RTprop mit der Zeit ändern können oder veralten."],"explanationJa":["TCP BBRは、ネットワークの状態を常に最新に保つために、**ProbeBW（帯域調査）**と**ProbeRTT（RTT調査）**という2つの特別な状態を用います。","**ProbeBW**では、送信レートを少しだけ意図的に上げて（1以上）、より多くの帯域が使えるかどうかをテストします。","その後、短時間だけ送信レートを下げて（1未満）、ネットワークに生じた可能性のあるキュー（待機列）を解消します。","この周期的な操作により、ネットワークを過負荷にせずにBtlBw（ボトルネック帯域）を正確に把握することができます。","**ProbeRTT**では、しばらくの間RTprop（最小伝播遅延）の更新がなかった場合に発動し、約1 RTTの間、送信レートをわずか4パケットに抑えてRTTの最低値を再測定します。","これにより、バッファの影響を受けていない純粋なRTTを得ることができます。","いずれの状態も、BtlBwやRTpropの推定値が古くなったり、ネットワーク状況が変わった際に再測定する役割を果たします。","このようにしてBBRは、動的なネットワーク環境に常に適応できるように設計されています。"],"originalSlideText":"TCP BBR\\n\\n Probe Bandwidth „ProbeBW“ Zustand vergleichbar mit Congestion Avoidance\\n❖ Senderate wird in regelmäßigen Zyklen um einen Faktor > 1 angehoben, um neuen Wert für BtlBw zu bestimmen\\n❖ Danach kurzzeitig mit einem Faktor < 1, um mögliche Warteschlangen im Puffer vor dem Flaschenhals abzubauen\\n\\n Probe Round Trip Time „ProbeRTT“ Zustand\\n❖ Wenn lange kein neuer minimal Wert (≈RTprob) für RTT gemessen wird Senderate für ein RTT auf vier Pakete reduziert\\n❖ Danach wird in den ursprünglichen Zustand zurückgewechselt\\n\\n Gesammelte Werte für RTprob und BtlBw haben Timeout bis diese ungültig werden und zu neuer Schätzung und Senderate führen","explanationImage":"","questionImage":""},{"id":42,"questionDe":"(s49) Wie passt TCP BBR die Schätzung der Bottleneck Bandwidth an, wenn sich die verfügbare Bandbreite ändert?","questionJa":"TCP BBRでは、利用可能な帯域幅が変化したとき、ボトルネック帯域（BtlBw）の推定をどのように調整しますか？","answerDe":["Wenn sich BtlBw von 10 Mbps auf 20 Mbps verdoppelt, erkennt BBR dies in 3 Zyklen.","Wenn sich BtlBw halbiert (z. B. auf 10 Mbps zurückfällt), passt BBR die Schätzung ebenfalls an.","BBR führt regelmäßig neue Messzyklen im ProbeBW-Zustand durch."],"answerJa":["たとえばBtlBwが10 Mbpsから20 Mbpsに倍増した場合、BBRはそれを3サイクルで検出する。","逆に、BtlBwが半分に減少した場合にも、BBRはそれに応じて推定値を調整する。","BBRはProbeBW状態において定期的に測定サイクルを繰り返している。"],"explanationDe":["TCP BBR aktualisiert die Schätzung der Bottleneck Bandwidth (BtlBw) nicht kontinuierlich, sondern in diskreten Messzyklen im sogenannten ProbeBW-Zustand.","In diesem Zustand erhöht und senkt BBR die Senderate periodisch, um die Reaktion des Netzwerks zu beobachten.","Wenn sich die tatsächliche Bandbreite (z. B. durch Laständerung, Routing oder Mobilität) ändert, erkennt BBR diese Änderung über mehrere Zyklen hinweg.","Wie auf der Folie dargestellt: Wenn sich die BtlBw von 10 Mbps auf 20 Mbps erhöht, erkennt BBR diese Verdopplung typischerweise nach etwa 3 Zyklen.","Ebenso erkennt BBR eine Halbierung der Bandbreite (z. B. durch Rückfall von 20 Mbps auf 10 Mbps) ebenfalls durch die periodischen Messungen.","Dieser Mechanismus ist wichtig, da BBR keine sofortige Rückmeldung vom Netzwerk erhält, sondern durch eigenes Verhalten die Bedingungen erforscht.","Die zyklische Struktur sorgt dafür, dass Anpassungen an neue Netzwerkbedingungen zügig, aber nicht überhastet erfolgen – ein Kompromiss zwischen Reaktionsfähigkeit und Stabilität."],"explanationJa":["TCP BBRでは、ボトルネック帯域幅（BtlBw）の推定は継続的に行われるのではなく、**ProbeBW**モードでの周期的な測定サイクルによって行われます。","このモードでは、送信レートを定期的に増減させて、ネットワークの反応を観測することで帯域幅を推定します。","たとえば、利用可能な帯域が10 Mbpsから20 Mbpsに増加した場合、BBRは3回程度の測定サイクルを通じてその変化を認識します。","逆に、ネットワークの負荷や経路変更などによって帯域が減少（例：20 Mbps → 10 Mbps）した場合も、同様に段階的に推定値を修正します。","このアプローチにより、BBRはネットワークの挙動を受動的に観測するのではなく、自ら積極的に条件をテストして状態を把握する設計となっています。","ただし、一度に急激に推定値を変えることは避け、サイクルを通じて安定性と精度を両立させています。","この測定方式は、動的なネットワーク環境におけるリアルタイム適応を実現する上で重要な要素です。"],"originalSlideText":"TCP BBR\\n\\n BtlBw von 10 Mbps verdoppelt sich\\n\\n BtlBw von 20 Mbps halbiert sich\\n\\nVerdopplung der Schätzung in 3 Zyklen","explanationImage":"","questionImage":""},{"id":43,"questionDe":"(s50) Wie startet eine TCP BBR-Verbindung und was geschieht im Startup- und Drain-Zustand?","questionJa":"TCP BBRの接続開始時にはどのような動作を行いますか？Startup状態とDrain状態ではそれぞれ何が行われますか？","answerDe":["Im Startup-Zustand wird die Senderate mithilfe binärer Suche schnell erhöht, um BtlBw zu schätzen.","Dabei entsteht bis zu 2BDP Überhang in der Warteschlange.","Im anschließenden Drain-Zustand wird die Senderate bewusst reduziert, um den aufgebauten Puffer zu leeren."],"answerJa":["Startup状態では、送信レートを二分探索的に急速に増加させてBtlBwを推定する。","この過程で、最大で2倍のBDPに相当するデータがバッファに溜まる可能性がある。","その後のDrain状態では、送信レートを意図的に減少させて、溜まったバッファを解消する。"],"explanationDe":["Beim Verbindungsaufbau mit TCP BBR startet der Algorithmus im sogenannten **Startup-Zustand**.","In dieser Phase wird die Senderate mithilfe einer binären Suche schnell erhöht, um eine erste, grobe Schätzung der Bottleneck Bandwidth (BtlBw) zu erhalten.","Diese aggressive Steigerung kann jedoch dazu führen, dass die Warteschlange vor dem Engpass stark anwächst – typischerweise bis zu 2-fachem Bandwidth Delay Product (BDP).","Um diesen Effekt auszugleichen, folgt im Anschluss der **Drain-Zustand**.","In Drain reduziert BBR gezielt die Senderate unter das bisherige Niveau, sodass sich der aufgebaute Puffer leert und das Netzwerk sich stabilisieren kann.","Dieser kontrollierte Übergang vom aggressiven Wachstum zur Stabilisierung stellt sicher, dass BBR mit minimalem Verlust und ohne dauerhafte Überlast startet.","Erst nach Drain wechselt BBR in den ProbeBW-Zustand, um zyklisch und gezielt die Netzwerkkapazität weiter zu vermessen."],"explanationJa":["TCP BBRでは、接続の初期段階でまず**Startup状態**から動作を開始します。","このStartupでは、送信レートを二分探索的に急速に増加させ、ボトルネック帯域幅（BtlBw）を早期に推定しようとします。","ただし、この急速なレート上昇により、通信経路の途中にあるバッファが一時的に大量に埋まってしまい、最大でBDPの2倍程度のデータが滞留する可能性があります。","そこで続くのが**Drain状態**であり、ここでは送信レートを意図的に減らし、Startupで溜まったバッファ（待機キュー）を排出します。","この2段階構成により、最初に効率よく帯域推定を行い、次にネットワークの状態を落ち着かせることで、安定した通信に移行できます。","この設計は、混雑やパケットロスを最小限に抑えつつ、高速スタートを可能にするBBRの特徴の一つです。","Drainが終了すると、BBRはProbeBWモードに入り、以後は帯域幅の再評価と最適化を周期的に行っていきます。"],"originalSlideText":"Start einer TCP BBR Verbindung\\n\\n Startup Zustand\\n❖ Zunächst wird die Senderate mit binärer Suche angehoben, um sehr schnell einen aussagekräftigen Schätzwert für BtlBw zu bestimmen\\n❖ Dabei entsteht jedoch bis zu 2BDP Überhang als Warteschlange im Puffer am Flaschenhals\\n\\n Daher nach Startup Wechsel zu Drain Zustand\\n❖ Während Drain wird bewusst inverse von Startup gesendet, um aufgefüllte Puffer wieder zu leeren","explanationImage":"","questionImage":""},{"id":44,"questionDe":"(s51) Wie verhalten sich TCP CUBIC und TCP BBR hinsichtlich des Durchsatzes bei Paketverlust?","questionJa":"パケットロスが発生した場合、TCP CUBICとTCP BBRはスループットに関してどのように異なる挙動を示しますか？","answerDe":["CUBIC reduziert den Durchsatz deutlich bei Paketverlust.","BBR hält den Durchsatz konstant, da es nicht auf Verlust reagiert.","BBR erzielt dadurch stabileren Durchsatz unter schlechten Bedingungen."],"answerJa":["CUBICはパケットロスが発生すると、スループットを大きく下げる。","BBRはロスに反応せず、スループットを一定に保つ。","そのためBBRは、劣化したネットワーク状況下でも安定した通信を実現できる。"],"explanationDe":["Der Vergleich zwischen TCP CUBIC und TCP BBR unter Bedingungen mit Paketverlust zeigt grundlegende Unterschiede im Verhalten der beiden Algorithmen.","CUBIC ist verlustbasiert: Sobald ein Paketverlust erkannt wird, reduziert es das Congestion Window gemäß einem festen Faktor. Dadurch sinkt der Durchsatz deutlich.","Dieses Verhalten führt dazu, dass CUBIC unter instabilen Netzwerken (z. B. mit Störungen oder drahtlosen Verbindungen) schnell Leistung verliert.","TCP BBR hingegen reagiert nicht auf Paketverluste, sondern auf geänderte Messwerte von BtlBw und RTprop.","Solange sich diese Werte nicht verschlechtern, bleibt die Senderate konstant – auch wenn vereinzelte Pakete verloren gehen.","Deshalb zeigt BBR auch bei moderater Verlustrate eine hohe und stabile Datenrate.","Diese Eigenschaft macht BBR besonders attraktiv für Netze mit sporadischen Verlusten, z. B. Mobilfunk oder Satellitenverbindungen."],"explanationJa":["このスライドでは、パケットロスが発生した際のTCP CUBICとTCP BBRの動作の違いが示されています。","CUBICはロスベースの制御方式を取っており、パケットロスが発生するとウィンドウサイズを減少させ、スループットが大幅に低下します。","そのため、ネットワークが不安定だったり、無線通信などで一時的なロスが起きるような環境では、性能が急激に落ちる傾向があります。","一方、BBRはパケットロスを輻輳の兆候と見なさず、BtlBw（帯域）とRTprop（RTT）に基づいて制御するため、ロスがあっても送信レートを維持します。","その結果、BBRはスループットを安定させることができ、パケットロスの影響を受けにくいのが特徴です。","このように、BBRはモバイル通信や衛星ネットワークなど、パケットロスが発生しやすい環境に適しています。","ロスの多い状況でも、通信の品質や速度を維持したい場合にBBRは有効な選択肢となります。"],"originalSlideText":"Durchsatz: TCP CUBIC vs TCP BBR\\n\\n Im Fall von Paketverlust sinkt der Durchsatz bei CUBIC\\n BBR reagiert nicht auf Verlust und hält den Durchsatz konstant","explanationImage":"","questionImage":""}]');const o={class:"container py-4"},h={class:"text-center mb-5"},g={class:"display-5 fw-bold text-primary"},m={class:"fs-5 text-muted"},c={class:"text-dark"};var b={__name:"Lecture13Page",setup(e){const n=(0,s.lq)(),i=(0,a.KR)(""),b=(0,a.KR)(""),B=(0,a.KR)(""),w=(0,a.KR)([]);return(0,t.sV)(()=>{const e="lecture03",t=parseInt(n.name.split("_")[1]),r=l[e];i.value=r.title,B.value=t.toString().padStart(2,"0");const a=r.lectures.find(e=>e.number===t);b.value=a?a.title:"",w.value=u}),(e,n)=>((0,t.uX)(),(0,t.CE)("div",o,[(0,t.Lk)("div",h,[(0,t.Lk)("h1",g,(0,r.v_)(i.value),1),(0,t.Lk)("p",m,[(0,t.eW)(" Lecture "+(0,r.v_)(B.value)+": ",1),(0,t.Lk)("span",c,(0,r.v_)(b.value),1)]),n[0]||(n[0]=(0,t.Lk)("hr",{class:"w-25 mx-auto border-primary"},null,-1))]),((0,t.uX)(!0),(0,t.CE)(t.FK,null,(0,t.pI)(w.value,e=>((0,t.uX)(),(0,t.Wv)(d.A,{key:e.id,question:e},null,8,["question"]))),128))]))}};const B=b;var w=B}}]);
//# sourceMappingURL=6929.8434218c.js.map